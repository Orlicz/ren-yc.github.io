<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LG - 听取 WA 声一片 - 题解</title>
      <link href="/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="16783c8ea370fa03c2a733b27c5cb42db545295467564aa7b48bc00c7e63fe86">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cc14db3c95bd80164544e733d5d0b786a6dfe96ebae7851c287a7d1d36f18e1da08f2fb956c5b0c60263fdb2d80ee27d1fca2ee688ce7bc5fc9c448d1f71c6814ed090838911cf32f86a13f02d2185fb3f5ab745f5d4ec57e08bb6d337873502e93cd9fe8b4c974b0087ddc58671873986c27b653a28c5c6d38d58a825d7e642335c12134b6e200b639f391c0856aa7cd73d3b85b8f89b1e4e6d4447e4e2eed709bdd321441108504910b3315a5cc8b59ab4705743a9195de2326b83b9d62b2d40d9b614eb654778e8d63170b76dc0c714a8defb08f315bb543828786ef3c707159bf50f861928b5baca828f3184ee43804dc08ff3c9d31f2878cec77f956c161317cf553b00906be2701363f40ae785a6f93ab2a5bcbc338ede7cfa74092be8c726536188462fde01755a29984fc34736b66e2e4798620f7947514d04c665144fdd41cc8c3c8397229d51f5f69f4ad3bec4c8565f75f79622be1db98dfc17e349d9eb4ab53af8284c9d778fed3e43b662d6a2a399e908e5260c6a10fe034015b2cbec5be13089016b1087d8514ab4468a1d6919757384498031c88ae963d40293fe2c39f90646a9942091e278d7f599f2374c348a08b2ab6be24d973ea919dd18465c7aabf0a50fc324cd62456db4d9df6708873fd055db56adcb3887ecbac407fbb56af703bf29193e5e95af2fc9e95b1e73da70007a4e88d2468c64f8ac1ace83b542a31d34070e1463e6dd24391800ddb0ed35b1b4ea4513591d37c970e096bb4fdcefe676e5acfaf94afd991697c6595e3eaaeedfe7c5de9d7f7cf9cb3d307ce3b1f5147e4db7dfcf07ec021201cb9a5680ece0ed7cd0ede89032a035a08c49a2bdb8575212a1ec4e2653fa251dbc989547ad5d174a82b42235cd78205d8bbfe7d7a9f03f6c08299ec83ad02554b0c1f93adaaf4820bc986519c3f73e48457e285fabcac1411bd7b89ac87355888c72a634651f9896e29e14520a5365bc2f5ebab5c4243c533d7b901361d652a97abe25b837d2172b3279866e94fba1b895ffa513d939de5435a1c45781d468cca3462f24cd3a3f35f64de3af73935732136428a2ac5d3fec2d2b49b10fff211de17dd8861f70ab5a18337f939711a7eb22ca0bf62323b5a75e65f220dcb3d2c0f9101ddc166ce3c8b4c2286bae32361348fca7670e67100f2e35a4874d89034c591773d7ea4747f1615f5fd92b0de5edd2b61831ff0690c8c38c37e0ef65358b57fb2f969a63c0fc32f486250514bd60f5aa2a3f6684c2289665f2c78b3ef11d1e6d27c6e235a6d57dbbc0a2112736b817296bc46f3ad8969c5a2e37f4ab0688b9d15d6d370345b9a8a2c306f82eaddeb1ca7a6bf4e0dfb6cf0f3863cfdd128d9cea5c6e5150aeb3cf0e8fd5d3ac85e8fa7fdc620542af45c3ccd372839dd45fcd0147a519c4c5051ff31c5279ed0178b752ab6bdda500cbf37bd1e323392fed0a54a6c7b5dd6fae1886acf5f39278c5de3cdc09bfba869efbecef452ffed619b752711722851ecd50d152ccf9351c21d27e174f8cf528b2f357c31342eaad903e2397756a4c24c8d84a2c1a1b071797f4199b8204aec89cd50403267c1817492ba2b23beb58a37407204b315c0099e8cf508e50810e4c97633eb67472fe6192082c66ba52a60feb36c95a89cac64f2d43612bacb4fed8817bdba62eb05139c8ca0b7524775e9d3896adc1c35181bd5271063464c3d96945c5d1865c0bd26f72d2d89e74d313210769a4bab577079ae30062261d9e808a0f6755797138de9cca4ebfb03a4852bd9e4bd12240eb4287fbb8ccc8f78322fdd4e4b9a5061097caaceabf291640641508a7b579fbf6bf7b464b858d251eac54317abea749c28a498b7a6fcbce0678921c9761800a7214dee8dd2cfe6c998dd5bf44fc2c6d6923905f3ccb4bbe06d45eb31f73aa294b5d0697b3c93236c6e96533c604129903e635dcf7455e30f013dbf45a5a6cd87700078d7b1c2a4fac085049a592e41e728aa2c8336bd4803118f4c0c0e206849470fbdeb9a2e140f5efee1067b2db35a2ba403df53ab59dd228cfd2e3931ef3572382fbe69347512be511f88b7d807da262a3df3cfc706f63e2eab6a70dba16a718ca5dc1dccf2393825152f95f1f3a847540085fe7b3a69175a9d137a07be9ffb5f9cb05bebac2656c0987765625b148ff690f30e2b706eb378793028a275794d34fc20b67dd1b290bbd72523588141f930194993c2f99023e7342fb0d3f098829667ab0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Killer Queen - 题解</title>
      <link href="/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="e43462c8d7b9420fe4c8e4f158cbbf71a7c2e91b73d4474a82f464ac8555afd8">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cc14db3c95bd80164544e733d5d0b786a6dfe96ebae7851c287a7d1d36f18e1da056f7ac290f94506a0213fad1d54c7831c2fa44cb06d28522bb07bf59caa0576b17d22d230ec2f6c4817b831c42354e4f10239c0cee08547349ed6ba3863bc3936a3601cd37a2601a659898575e4c23257b5e00795a43b226288f8ee47159808632d1ccb784987773432ac7b3652aa9e33772c6b93ef2bb8fb7a2edb3412d2236cb0c5e6ce8eb97cb62539f1e1ecea0ab533322e3696846ca852a52fa88845654abe3f5c2c1c0be001f04d7180418e9a0305902ddb807f32f06c7b262e4c16e0024665a222acc9cc58f9ff15a5c77309ea95e90fe0a19f7f28cbfcdc912d82a9f9023e7cc2c4a0841a6ee72d28c82dc4a22e87193e30c2b06fafb8da6c17fc583b171fe6be30cdcafd16045df909a481eeb910509f15d23fb6bf57fdce9abaf07feca6e75f7b4836f0af5784448811da359eb8ade971a045ad984ef41570e5f8b12d3ee406bbb9060f3e8791599ec1888044c27150ec2c7fc25f07bc677c823722fbbd5631c1cbdb9eac11194e3dad2a9d24d0f5367143f7bdacaeec5e73d8ea150d313732b943feec5e5e3672f4c203d894f3f702cb3c15bce19de6d1831ac487499dc6e077de5088b62118fe920140e31bafe9ac5dbec61e10082ebee0b266604df9adc6eef74747db6a702c9cacdd8177198457185e9ad5af290f8da7f62f0802ec05eade6991454ef0c7ab9846dfab41b6b7351fd60f7b2180ae4500826f99bba63c83b52d715f93dac2b36dbe67fe4559b0fbea0eabd6fa2946d171166405da8ab63d106a062614c714bb3ea3c226e32b02b05aa2f0bdcddb3620d93930b06e360101b63f76e2de2c03bd358de054565f244d8c76553383de6f253c83c497279d123c9e98230175197146f588951b56320ab706fb6034d58d02e4cf4fd0410c9282e02fe815615085ec2833069a2edeba8cd0aaffaff034b0a6025b72af5b2cef399f2fbf4cba757f7192f9e661ea9522626112ed91a421b3ee1bf8818b5f7c7f0b47f43d0594d1b51a4ee4e57d2531f7eb41b55b89bfc1dd59d485a55cd2a0aa4bd097b7c273ada551cae85763c031c345916dc7a0b8b3dbedb23080b9621b49d29c198b8c1071dbd8d7736e690138bb8ac715401cb4467f91ca3d24ea3ffc4b7c7438c988f91c137c485162d0b0fe86f5fb2fe713097403760d0cd8432041e8d15c023d20a24652bcebef5966a0f1bc6b036e4b70d0809c2e8903ba7be37e0bcfe9c475958e2a848c5f646c6f13505f8387e2ef73422b6d24192fa43dceadc0f26a2ad82a0f64c5594b0cf7f55e75de32ca7b2399c834bfa89518a9a811f56234dac077cf5556c2c95ed1ce0a29056211e682bcbb4d36c9e7f9bf7e3425f1bf39656cd1bef1b3d7b38f145ba970ac1e8c5013b7f2045ece146fc41d0fc553f1eb58ef3ee55416d1c392c850c1283f5aacde7aa92c392ac570ee548db36a2a26726bd4246d35084a235588b1f36e9dc41cc47f06a73c8f6448e8d28fb4c7f16703bbe2d902f4c9602ab16df5bd1810d0230553e7c36db7c8f2678f6b6a4a47246aff715ca9a853fea36e346d6f2f1ba5ba22bc803dd01622c014da381f5246e9cfd14b9a9aa54386ad290a2770779aea720ede230c3b68808c31a139d3ce755995eee22b8cb106d4c5fddce98b9f433c83ad880bcab92d705925768082aa98157a9f00ec718aec5adfaf38a77593a7ad9b7af709bbdf6aa4bb021abf175b2531951027ece9032499033dbf5b1f607227942bce6ba8b17fff6b98c559f48dd442bf4a0408591fe1361a2493e3a55de8fc62edf30800ca827b933a034766232d8ed908acd48e8322cbfa946ba52cf5c97b6ca88b32e8b73956f5a18c5a66bf111d31f653a5ff3e0511d27fad0852a10c8e20708f5362b87512fc5e276e69bc1ec7238c157efce5fe109f589b2e16a9efdf07e6b7d84d1c66354d9f2d4f2dd62f8b1c79647beedb4f4c1cd08d9afe8a2e57c011302bcb28287cd4076caa789cabc3fa71a63f834d5ed1894ee9aee570638a3d9a1d7be782f0088d8aa0a80490f8297b41e2114c6ba09bdd74fb3cacc3d9bd41c24238d39d90533c5e0829c463b082aa0cf0f2e6afad3f8bc2decbea8aaf1eb749493c4b77b9d2c2170e3c591fdea8f1fcd693c5bb1b3f90672365c5494135c46fe45b70e41fa316988f95d83d6712c881646ffcc6d20c2df3776e02b20019dc9f237ce805bd37667cb0d2aac49df4e8b7ed9cbb0d12f85406e68b449f637e4c760dadbe01210e8e32f2ec71e76ea568fc109f574e1d6466a2b32dc6bbd2c55ce3df3b673b0ff3ce9a2b990471047066003f6ad7a8bcfd4329b172f2fedb96c787e3dd0523680855fbf74d3f06344242b0f240ee92f62a1fcc0a7d4f16501264e988e15e0682a3c9e88ce7250ce5b1a1f9a92140c3d3d6ac1a071dcd3c519c2e74f49e2d01ae25ffb6c4e7fa3604987d39fcaedf34cb70391521e18c0af34a16709c1ec4a39ac5ed2410f2d5a729304f819e847adf78fe7a2730c8586dd17e584a50b2291e69f02f742468b404218d9d52c5cc3648c9ebe6cbc1298e641bac6e20a409b1ab0cb67dde7b8dc18eda805f894aaf5fbd85635000253b87bf34c5074719bf60dfb2c61fe0048705d0b1ebdb4a31a7dab76e860913640f4481a47337570bd3f7bc6392f0ce617462572ee835c2a69e5bcbb0a57d8995336ffaa7df73b6a6547aeec609303935dd4681297e334c479467576aa1a248b37c000552ad61c6b6bbe190cc0e6b41fc41a8d802e12091c74f2d5e5430ec747622520e814fb14b1f217b0ab261be67a0f207d96e785cef4d8bdf2fa37a44232a95c93bcac9162c7e082bc6e9c77ccf537d478128029cd4f52c47e7e5f0efaae3b856fd6332e943e019b116841802f2a2b5acf8d101f706e1c1257fde529c3b210cbac8949539a68c94a9ec9106d6d604e01fa53c2057215e6d7dda867d10eee6eb1addacc22a1a7a45d73b4959d5c729f869f038952d2b39cf6f6de87850e5f7e2a9667d2470049eb04ce6ee420cd4cf974faacb28d01e4743e3dbbbaabafe7e8c0d20d8de132567506a0f956cf0f7eb6d26b263720a81fcb9a26b10f885b36c6decab16779a9ab423236bb6ceda441b22e7918caf9d248b852cfac0f90797bd9f6539dd805c4820e5f45e44eb136984c8a29213d78a014b2f6eaa8e65f364f2f9c775253b113e1d82d3da13d7864bbba8f2eadc758c9cecc69d7608516e8151246e824695af1f48efe4e6872c10df47a67a48a9231cbc01c1d8b307d770069e2a9790258f32becaabee4e23bcf04703fcd5944603d6939a83255b7a97fc1aab4855089049cbbd63e064f6f588ab57e69bd9629c43b6cefcae92cef42d1914e3aa0c94180c354509f82c1bd960b3d075a633590ae2db2428e0edcc6e5ba292420718abf17f7637f65d444e82ef74476661b7f0a57aaff4da2459ffd8e24bd8f0b048495b2fc2ccc5fee757886f5debb184bcb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 李白的酒 - 题解</title>
      <link href="/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>淼题，只需要逆推累加出结果。</p><h3 id="代码分析">代码分析</h3><p>循环逆推。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n;double tot = 0;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;tot++;tot /= 2;&#125;cout &lt;&lt; fixed &lt;&lt; setprecision(5) &lt;&lt; tot &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/14/LG-李白的酒-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 满二叉树 - 题解</title>
      <link href="/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>满二叉树板子题。</p><h3 id="代码分析">代码分析</h3><p>三个 <code>for</code> 循环，</p><p>第一个用于计算节点的数量，</p><p>第二个用于初始化树数组，</p><p>第三个用于模拟。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int k, q, a[10001] = &#123;0&#125;, p = 1;char s[101];cin &gt;&gt; k &gt;&gt; q;for (int i = 1; i &lt;= k; i++) &#123;p *= 2;&#125;for (int i = 1; i &lt;= p - 1; i++) &#123;a[i] = i;&#125;for (int i = 1; i &lt;= q; i++) &#123;cin &gt;&gt; s;int o = 1;for (int j = 0; s[j] != '\0'; j++) &#123;if (s[j] == 'L') &#123;o *= 2;&#125; else &#123;o *= 2;o++;&#125;&#125;cout &lt;&lt; o &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/14/LG-满二叉树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 IDM</title>
      <link href="/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/"/>
      <url>/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言">前言</h3><p><s>众所周知</s>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><s><em>我很严肃</em>：</s></p><p><s><em>IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</em></s></p><h3 id="下载">下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装">安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解">破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 主目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p>方法同上。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” – “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://xn--9zr.tk/gx" alt=""></p><h6 id="若破解失败，记得在评论区留言告诉我小编哦">若破解失败，记得在评论区留言告诉我<s>小编</s>哦</h6><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/">https://ren-yc.github.io/2021/08/12/TLS-如何使用-IDM/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四篇关于 chen_zhe 的美文</title>
      <link href="/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/"/>
      <url>/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="壹-chen-zhe人">壹 chen_zhe人</h2><p>那是谁 是谁 是谁</p><p>那就是 chen_zhe</p><p>chen_zhe 人 chen_zhe 人</p><p>背负着暴政之名</p><p>抛弃了一切（指民心）而战斗（指禁言）的男人</p><p>chen_zhe 代码是超音波（形容很会卡常）</p><p>chen_zhe 之眼（指管控 OIer）在洛谷飞翔</p><p>手里掌握着 恶魔之力</p><p>正义的英雄（</p><p>chen_zhe 人 chen_zhe 人</p><p>开始知道暴政的男人</p><p>因那紫名而觉醒的男人</p><p>chen_zhe 禁言是迫害之力</p><p>chen_zhe 之眼透视一切</p><p>chen_zhe 劈砍肋骨可断</p><p>手里掌握着 管理之力</p><p>正义的英雄</p><p>chen_zhe 人 chen_zhe 人</p><h2 id="贰-少年-chen-zhe">贰 少年 chen_zhe</h2><p>明亮的机房中开着一台神秘的电脑，旁边是一个题库，都存着一望无际的 chen_zhe 做的神仙毒瘤题，其间有一个十二三岁的少年，血管里流着网络流，靠着一棵平衡树，向蒟蒻的 lhy930 尽力地踩去，lhy930 被爆踩了好久后却将身一扭，反从他的胯下跳进他家的内存池了。</p><p>这少年便是 chen_zhe。我被他爆踩时，也不过十多岁，离现在将有几年了；那时我还没开始学 OI，也很 LJ，我正是一个蒟蒻。那一年，我家是一件大比赛的值年。这比赛，说是三十多年才能轮到一回，所以很毒瘤；正月里做神仙毒瘤题，题目很多，数据很讲究，做的人也很多，数据也很要防偷去。我家只有一个忙月，忙不过来，他便对父亲说，可以叫他的儿子 chen_zhe 来出题配数据的。</p><p>我的父亲允许了；我也很高兴，因为我早听到 chen_zhe 这名字，而且知道他和我仿佛年纪，是个神犇巨佬，会做和出神仙毒瘤题，所以我们叫他巨佬。他是能 AK 所有比赛的。</p><p>我于是日日盼望新年，新年到，chen_zhe 也就到了。好容易到了年末，有一日，母亲告诉我，chen_zhe 来了，我便飞跑的去看。他正在机房里，红色的圆脸，头戴一顶小绿帽，看上去明显就是一个光头。他见人很喜欢嘲讽，唯独嘲讽我嘲讽得最过分，没有旁人的时候，来嘲讽我，于是不到半日，我便被爆踩了。</p><p>我们那时候不知道谈些什么，只记得 chen_zhe 很高兴，说是上洛谷之后，做了没有其他人会做的毒瘤题。</p><p>第二日，我便要他做题。他说：“这不能。须有神仙毒瘤题了才好。我们电脑上，有了题，我开出一块内存池来，用预处理所有的几亿个数据，打好表，看输入来了时，我立刻地将我预处理好的答案，只一输出，那正确答案 $0$ $ms$ 就输出来了。数据结构、字符串、图论、DP 什么的都是 LJ 玩意儿……”</p><p>我于是又很盼望有题。</p><p>chen_zhe 又对我说：“现在这些题太水了，你夏天到我们这里来。我们日里去网上虐人，lhy930 也有，kkk 也有，tourist 也有。晚上我和爹虐全场去，你也去。”</p><p>“要加文件输入输出吗？”</p><p>“不用。我的程序可是非常大佬的，可以自动判断要不要文件输入输出。要管的是卡时间、卡空间、卡算法。洛谷上面，你看，月赛开始了，我要 AK 了。你便写好膜拜之语，在犇犇里发出去……”</p><p>我那时并不知道这所谓月赛的是怎么一件东西——便是现在也没有知道——只是无端的觉得这肯定是神犇巨佬才能参加的比赛。</p><p>“比赛很水么？”</p><p>“有我呢。开始了，看见题了，我便 AK 了。这些题目很毒瘤，要用主席树，还要用模拟退火。但是对我来说都是不是一点的水……”</p><p>我素不知道天下有这许多新鲜事：竟然有比 A+B Problem 毒瘤的题目，而且竟然有人能够 <code>AC</code>，我先前单知道我连 A+B Problem 都过不了罢了。</p><p>“我们 CF 上，题目要来的时候，就有许多人喊着要 AK，但最后都被我给 Hack 掉了……”</p><p>阿！chen_zhe 的心里有无穷无尽的稀奇的算法，都是我往常的朋友所不知道的。他们不知道一些事，chen_zhe 在 AK 虐场时，他们都和我一样还在颓 A+B Problem。</p><p>可惜正月过去了，chen_zhe 须回家里去，我急得大哭，他也躲到厨房里，哭着不肯出门，但终于被他父亲带走了。他后来还托他的父亲带给我一堆神仙毒瘤题和它们的 <code>AC</code> 代码，我也曾送他一两道红题，但从此没有再见面。</p><h2 id="叁-chen-乙己">叁 chen 乙己</h2><p>chen_zhe 一上洛谷，所有做题的人便都看着他笑，有的叫道，“chen_zhe，你门前又长出主席树了！”他不回答，对老师说，“开两台电脑，要一堆毒瘤题。”便排出一堆 <code>AC</code> 代码。他们又故意的高声嚷道，“你一定又 AK 了人家的比赛了！”chen_zhe 睁大眼睛说，“你怎么这样凭空污人蒟蒻……”“蒟蒻？什么蒟蒻？我前天亲眼见你虐了 lhy930，吊着打。”chen_zhe 便涨红了脸，额上的青筋条条绽出，争辩道，“AK 不能算 AK……AK！……巨佬的事，能算 AK 么？”接连便是难懂的话，什么“我是神犇”，什么“lhy930 是蒟蒻”之类，引得众人都哄笑起来：机房内外充满了快活的空气。</p><p>听人家背地里谈论，chen_zhe 原来也做 IOI 的题，但终于不屑于再做，又不会出这种对他来说特别水的题目；于是做的题愈做愈难，难到我一看就吓晕了。幸而做得所有题目，便替人家做水题，换一道神仙毒瘤题做。可惜他又有一样坏脾气，便是不屑于做。做不到几天，便连人和电脑程序代码，一齐失踪。如是几次，叫他做水题的人也没有了。chen_zhe 没有法，便免不了偶然做些 AK 神仙毒瘤比赛的事。但他在洛谷里，品行却比别人都好，就是从不拖欠；虽然间或不屑于做洛谷的题，暂时记在任务计划上，但不出一小时，定然全 A，从任务计划上拭去了这些题目的名字。</p><p>chen_zhe 做过几道神仙毒瘤题，涨红的脸色渐渐复了原，旁人便又问道，“chen_zhe，你当真能 AK IOI 么？”chen_zhe 看着问他的人，显出不屑、鄙视的神气。他们便接着说道，“你怎的连洛谷的题目也不刷光呢？”chen_zhe 立刻显出藐视嘲讽模样，脸上笼上了一层红色，嘴里说些话；这回可是全是“全是水题”之类，一些不懂了。在这时候，众人也都哄笑起来：机房内外充满了快活的空气。</p><p>在这些时候，我可以附和着笑，老师是决不责备的。而且老师见了 chen_zhe，也每每这样问他，引人发笑。chen_zhe 自己知道不能和他们谈天，便只好向蒟蒻说话。有一回对我说道，“你会做 A+B Problem 么？”我略略摇一摇头。他说，“不会做，……我便考你一考。洛谷的深蓝题，怎样做的？”我想，这么大佬的人，也能考我么？便回过脸去，不再理会。chen_zhe 等了许久，很恳切的说道，“不会做罢？……我教给你，记着！这些题应该记着。将来打我出的比赛的时候，做题要用。”我暗想我和他的等级还很远呢，而且我也从不敢打他出的神仙毒瘤比赛；又好笑，又不耐烦，懒懒的答他道，“谁要你教，不是只有你才会做的题目么？”chen_zhe 显出极不高兴的样子，将两个指头的长指甲敲着键盘，点头说，“错啦错啦！……这些题目都是超级水的红题，你知道么？”我愈不耐烦了，努着嘴走远。chen_zhe 刚打了一堆毒瘤算法以及宏函数，想在 IOI 官网上 AK，见我毫不热心，便又叹一口气，显出极惋惜的样子。</p><p>有几回，邻居 main 包和 ltt 听得笑声，也赶热闹，拦住了 chen_zhe。他便给他们神仙毒瘤题，一人几十道。他们做完题，仍然不散，眼睛都望着他的个人题库。chen_zhe 着了慌，退出题目将屏幕锁住，弯腰下去说道，“太简单了了，这都太简单了。”直起身又看一看题目，自己摇头说，“简单简单！难乎哉？不难也。”于是这一群神犇巨佬都在笑声里走散了。</p><p>chen_zhe 是这样的使人快活，可是没有他，别人也便这么过。</p><p>有一天，大约是 ACM World Final 后的两三天，正在慢慢的算 <code>AC</code> 题目，取下粉板，忽然说，“chen_zhe 长久没有打洛谷的题了。任务计划里还有十九道题呢！”我才也觉得他的确长久没有打我们的题了。一个蒟蒻的 lhy930 说道，“他怎么会打我们这些水题？……他打神仙毒瘤题去了。”老师说，“哦！”“他总仍旧是 AK。这一回，是自己太强，竟 AK 到 IOI 里去了。IOI 的神仙毒瘤题，AK 得的么？”“后来怎么样？”“怎么样？先拉他去了 ACM World Final 比赛现场，后来是做题，做了几分钟，就直接 AK 了。”“后来呢？”“后来他 <code>AC</code> 完所有的神仙毒瘤题了。”“刷完了怎样呢？”“怎样？……谁晓得？许是去出神仙毒瘤题然后自己 <code>AC</code> 了。”老师也不再问，仍然不住地感叹 chen_zhe 是历史上最强的神犇大佬。</p><h2 id="肆-chen-zhe-先生">肆 chen_zhe 先生</h2><p>浙江也无非是这样。NOIP 爆 $0$ 的时节，望去确也象绯红的轻云，但 <code>WA</code> 下也缺不了成群结队的 “天朝 OIer” 的速成班，头顶上盘着大辫子，顶得绿帽的顶上高高耸起，形成一棵主席树。也有解散辫子，盘得平的，除下帽来，油光可鉴，宛如小蒟蒻的算法一般，还要将脖子扭几扭。实在标致极了。</p><p>天朝 OIer 会馆的门房里有几本《算法导论》买，有时还值得去一转；倘在上午，里面的几间洋房里倒也还可以坐坐的。但到傍晚，有一间的地板便常不免要咚咚咚地响得震天，兼以满房烟尘斗乱；问问精通时事的人，答道，“那是在学 DP。”</p><p>到别的地方去看看，如何呢？</p><p>我就往上海的 OI 专门机房去。从长沙出发，不久便到一处驿站，写道：新♂日♂暮♂里。不知怎地，我到现在还记得这名目。其次却只记得温州了，这是江南皮革厂的老板黄鹤王八蛋欠钱的地方。上海是一个强市，并不大；夏天热得利害；还没有浙江的 OIer。</p><p>大概是物以希为贵罢。北京的白菜运往浙江，便用红头绳系住菜根，倒挂在水果店头，尊为“胶菜”；福建野生着的芦荟，一到北京就请进温室，且美其名曰“龙舌兰”。我到上海也颇受了这样的优待，不但机房不收学费，几个教练还为我的食宿操心。我先是住在小黑屋旁边一个客店里的，初夏已经颇热，蚊子还多，后来用被盖了全身，用衣服包了头脸，只留两个鼻孔出气。在这呼吸不息的地方，蚊子竟无从插嘴，居然睡安稳了。饭食也不坏。但一位教练却以为这客店也包办棕名的饭食，我住在那里不相宜，几次三番，几次三番地说。我虽然觉得客店兼办棕名的饭食和我不相干，然而好意难却，也只得别寻相宜的住处了。于是搬到别一家，离小黑屋也很远，可惜每天总要喝难以下咽的蒟蒻汤。</p><p>从此就看见许多陌生的 dalao，听到许多新鲜的算法。数据结构是两个 dalao 分任的。最初是二叉树。其时进来的是一个白胖的 dalao，大饼脸，戴着眼镜，挟着一迭大大小小的书。一将书放在讲台上，便用了缓慢而很能嘲讽的声调，向学生介绍自己道：——</p><p>“我就是叫作 chen_zhe 的……。”</p><p>后面有几个人笑起来了。他接着便讲述 OI 在上海发达的历史，那些大大小小的书，便是从最初到现今关于这一门学问的著作。起初有几本是线装的；还有翻刻中国译本的，他们的翻译和研究新的医学，并不比浙江早。</p><p>那坐在后面发笑的是上次 % 你赛爆 $0$ 的留级学生，在机房已经一年，掌故颇为熟悉的了。他们便给新生讲演每个 dalao 的历史。这 chen_zhe dalao，据说是太强了，竟能 AK IOI、吊打集训队；他做的题，都是神仙毒瘤题，有一回参加 IOI，致使出题者的疑心他走后门，硬是叫他爆了 $0$。</p><p>他们的话大概是真的，我就亲见他有一次 AK IOI。</p><p>过了一星期，大约是星期六，他使助手来叫我了。到得机房，见他坐在树状数组和许多单独的线段树中间，——他其时正在研究着线段树，后来有一篇论文在本校的杂志上发表出来。</p><p>“我的代码，你能抄下来么？”他问。</p><p>“可以抄一点。”</p><p>“拿来我看！”</p><p>我交出所抄的代码去，他收下了，第二三天便还我，并且说，此后每一星期要送给他看一回。我拿下来打开看时，很吃了一惊，同时也感到一种不安和感激。原来我的代码已经从头到末，都在注释栏添改过了，不但增加了许多脱漏的地方，连语句的错误，也都一一订正。这样一直继续到教完了他所担任的功课：二叉树、线段树、主席树。</p><p>可惜我那时太不用功，有时也很任性。还记得有一回 chen_zhe dalao 将我叫到他的机房里去，翻出我那代码上的一条语句来，是递归的定义，指着，向我嘲讽的说道：——</p><p>“你看，你将这条语句移了一点位置了。——自然，这样一移，的确比较的快速些，然而代码不是竞速，题意是那么样的，我们没法改换它。现在我给你改好了，以后你要全照着PPT上那样的写。”</p><p>但是我还不服气，口头答应着，心里却想道：——</p><p>“代码还是我写的不错；至于实在的题意，我心里自然记得的。”</p><p>学年试验完毕之后，我便到 slay 颓了一夏天，秋初再回机房，成绩早已发表了，同学一百余人之中，我在中间，不过是没有爆 $0$。这回 chen_zhe dalao 所担任的功课，是 OI 实习和莫队。</p><p>OI 实习了大概一星期，他又叫我去了，很高兴地，仍用了极能嘲讽的声调对我说道：——</p><p>“我因为听说浙江 OIer 是很敬重 main 包的，所以很担心，怕你不肯次 main 包。现在总算放心了，没有这回事。”</p><p>但他也偶有使我很为难的时候。他听说蒟蒻是很菜的，但不知道详细，所以要问我怎么菜，菜到怎样的程度，还叹息道，“总要看一看才知道。究竟是怎么一回事呢？”</p><p>有一天，本级的学生会淦事到我寓里来了，要借我的代码看。我检出来交给他们，却只翻检了一通，并没有带走。但他们一走，洛谷就收到一封很长的私信，拆开看时，第一句是：——</p><p>“警告：刷屏者禁言”</p><p>这是《算法导论》上的句子罢，但经 kkksc03 新近引用过的。其时正值犇犇战争，k 老先生便写了一封给 chen_zhe 联盟和反 chen_zhe 大队的团队主的私信，开首便是这一句。文文新闻上很斥责他的不逊，爱咕青年也愤然，然而暗地里却早受了他的影响了。其次的话，大略是说上年 % 你赛的题目，是 chen_zhe dalao 代码上做了注释，我预先知道的，所以能有这样的成绩。末尾是匿名。</p><p>我这才回忆到前几天的一件事。因为要开同级会，淦事便在黑板上写广告，末一句是“请全数到会勿漏为要”，而且在“漏”字旁边加了一个圈。我当时虽然觉到圈得可笑，但是毫不介意，这回才悟出那字也在讥刺我了，犹言我得了教练漏泄出来的题目。</p><p>我便将这事告知了 chen_zhe dalao；有几个和我熟识的蒟蒻也很不平，一同去诘责淦事托辞检查的无礼，并且要求他们将检查的结果，发表出来。终于这流言消灭了，淦事却又竭力运动，要收回那一封匿名信去。结末是我便将这 kkksc03 式的信退还了他们。</p><p>浙江是弱省，所以浙江 OIer 当然是蒟蒻，分数在 $9$ 分以上，便不是自己的能力了：也无怪他们疑惑。但我接着便有参观封禁浙江 OIer 的命运了。第二年添教高级算法，算法的代码是全用电影来显示的，一段落已完而还没有到下课的时候，便影几片时事的片子，自然都是 chen_zhe 联盟战胜反 chen_zhe 大队的情形。但偏有浙江 OIer 夹在里边：在犇犇里刷屏，被管理员发现，要封禁了，围着看的也是一群浙江 OIer；在讲堂里的还有一个我。</p><p>“Hello World！”他们都拍掌欢呼起来。</p><p>这种欢呼，是每看一片都有的，但在我，这一声却特别听得刺耳。此后回到浙江来，我看见那些闲看禁言 OIer 的人们，他们也何尝不酒醉似的喝彩，——妈耶，无法可想！但在那时那地，我的意见却变化了。</p><p>到第二学年的终结，我便去寻 chen_zhe dalao，告诉他我将不学 OI，并且离开这上海。他的脸色仿佛有些悲哀，似乎想说话，但竟没有说。</p><p>“我想去学游戏设计，dalao 教给我的 C++，也还有用的。”其实我并没有决意要学游戏设计，因为看得他有些凄然，便说了一个慰安他的谎话。</p><p>“为竞赛而教的 C++ 之类，怕于游戏设计也没有什么大帮助。”他叹息说。</p><p>将走的前几天，他叫我到他家里去，交给我一道神仙毒瘤题的 <code>AC</code> 代码，后面写着两个字道：“爆踩”，还说希望将红题也送他。但我这时适值没有红题了；他便叮嘱我将来出了发给他，并且时时私信告诉他此后的状况。</p><p>我离开上海之后，就多年没有写过代码，又因为状况也无聊，说起来无非使他失望，便连信也怕敢写了。经过的年月一多，话更无从说起，所以虽然有时想写信，却又难以下笔，这样的一直到现在，竟没有寄过一封信和一张照片。从他那一面看起来，是一去之后，杳无消息了。</p><p>但不知怎地，我总还时时记起他，在我所认为我 % 的 dalao 的之中，他是最强，最骚的一个。有时我常常想：他的对于我的热心的爆踩，不倦的嘲讽，小而言之，是为浙江，就是希望浙江有新的 OI；大而言之，是为学术，就是希望新的 OI 传到浙江去。他的性格，在我的眼里和心里是伟大的，虽然他的姓名并不为许多人（除 OIer）所知道。</p><p>他所注释的代码，我曾经剪成三个 Word 文档，收藏着的，将作为永久的纪念。不幸 $9$ 年前迁居的时候，中途毁坏了一台笔记本，失去半个 F 盘的数据，恰巧这代码也遗失在内了。责成修电脑的去修复，寂无回信。只有他的神仙毒瘤题的 <code>AC</code> 代码至今还挂在我电脑的桌面上，C++ 旁边。每当夜间疲倦，正想偷懒时，仰面在灯光中瞥见他白胖的面貌，似乎正要说出嘲讽蒟蒻的话来，便使我忽又良心发现，而且增加勇气了，于是喝上一口冰阔落，再继续写些为“dalao”之流所深恶痛疾的文字。</p><p>***文章转自luogu</p><p>此文章转载于 <a href="https://www.cnblogs.com/Attention/p/9781101.html">https://www.cnblogs.com/Attention/p/9781101.html</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/">https://ren-yc.github.io/2021/08/09/四篇关于-chen-zhe-的美文/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 光头强砍树 - 题解</title>
      <link href="/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>很淼，读入后循环判断输出就行了。</p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(n)$</p><p>空间复杂度 $O(n)$</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, k, a[101] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];&#125;cin &gt;&gt; k;for (int i = 0; i &lt; n; i++) &#123;if (a[i] != k) cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/08/LG-光头强砍树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 不存在的 1 + 1 = 1 - 题解</title>
      <link href="/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="c25995f06632be837ef49c1cbbdc04a81701dd1f9a85eac141608e6744d6e582">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cc3bd371f049ef504a3c48130505d3f6926bf609c21a06465e0775dea1ab7832d460b099b43628fad2298ee201e59e37320ed2abfa3ed2b2f8b9e7fec135eda9f875c9a1ddd1cf028828123f9765768b027e07a07df2e77134396b442ccfb2dd32fa2062cc4cbc49c6f856870baff1547a23efd0e357d94a55b396d556ec5b389dbe14d9bad113c55ed08eef01dbaa648f277e1e8da4d96cdd51272182bd2463049a2e3de16b51425ead31735983a76d2a0776d0c6531333a5168cf9fdecc43be0de85fab9f4690e5d66acbbf18815ff7077ca5a88f5a073a9b41fb2bc48963b8917f8a54966f26a9b2b46bea1fd169334aedf1bd59529e9263943f28b5a4294a3238ffcdd91190dcccbdf775ca529843fc4dfd198d2ff16e197166dd1557b96aa429abed2b819963b5949afa8c100236931e2fb37fbd240cd1c41e11d0d584c4b54a9bffe5f0e767300c5b35522e651e04de0e514edd1a374a7577f10c4e6b02c4c6739d392f9fd1cd1cd51749bd77f686c1a0c0bbc6576029a61f314f0952ba7cee2f5ee3162ac1642379e7c2fc65ea7cb0e8ec01ce32c9639e12b5dbc1ff464ba5ceffdfa7368a214b7fa2dafeefb50c9848acb7eceaf4142327573c2228b879077c1bc1c2a58fb2ccb0b963784ff821e6e262335a9e21ccae192ac499f5b0e3f5b9800cd143f74be6a1529504b89f4edd604cea82446f8e19cd3490f308026372faeaecfed93ecbbcd69789bd9bdea66944b58533d16aea8fa5c02efe746c7e4e0ec646be2ba5cb858231e3873c30cd226d7d6572a61821090e2ae70819aca91e50c1248a818cc61f20410b133d48adf23f50b5bc76cd9c5d3ddacec75e61a91e19ba9266de678808569385c36244c1c5ee0fac1ab3bec4ae77fff848f5f00ac7efce3aac81e6a3ae5f7220e13ef5cbdc1c291af2abd602d581e36734d2f525e5497e6c3c8f6b9e81af37d458efe6d5689415ad0615aaf30e7b6af662d40d90b5b2653ca2d671e41314e39733b4ad92968bdfea137d80ebe8060740c27ff7fcc8407a88d901270f64576cc70e64acde0bbf6a1ec7afa317c81e3b918972b7cb84b1f1aa2208dd5b1ee8e3ffe0328c260c2049e37a62ce56efff56891c10cd1610e449aa709bf9c70a74ef9112b0ca7feeb2a866ba7ef7cd96a47454264ca976d01d5a816507d0f574f2018e27e7574ea587d446a436bc686da12a454a170385efbf7f39461ff02cd97eba69ccbd7d6f848c5413bb39dece301ff2995d2a21521c12bbb8907989cd09aa792a2371039a72de7fb0a15915a264840d053a275e27bb714b56e62be0db6d1aa0e51824d71aa9aca830ceeaab202c2731d735b5815964fbe27e484aea6cc80f8a0b4c1aa9d557e96bb3d48eb477866bb4a24e5e66d55ed64314c5371ee24174062457815dc9ca03963bc81169bc2d852d89a1075ca6ff3aa14050fb924e1bacae37f5a6fe1a87ea015d07f48189439462e753a12c4d7ac747a995badf5f672509ea4daed58404fcf4aa64da8fcb9916ccb80902479ff4e7a782406063d673205ab59ef03a609338caa7c79960c365cb5d7215adb959d1a275d7b776e78c05c96ba9c261d87374a727f687c16b307a70a7d5b5e8187225db20d4ecda0d9786ee924e42681518846533a64ac5d7140397643d89e0e3043e98dce240934aba9643abdb1149eef5403b188d84251612d5c861ec4be881ffe327033efc716043ac80561154a34cbb1250df719dd99093db35a94a5ae8ca759e03c5d59c6ea43709d349910f99fa2e405d449349f9cf6e2aab331a75fb92726d3d8940f9799a5c78200a707b6b0ddeb79d010c7f51050ec7d9a3370479a326a9796f3c15f642eef4c4fcb0de6715e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 木棍 - 题解</title>
      <link href="/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题目说</p><blockquote><p>Bob 想知道至少他需要去掉多少根。</p></blockquote><p>所以我们可以利用 “三角形两边之和大于第三边” 的性质来做。</p><h3 id="代码分析">代码分析</h3><p>不解释。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long n, tmp, a = 1, b = 2;cin &gt;&gt; n;if (n &lt; 3) &#123;cout &lt;&lt; 0 &lt;&lt; endl;return 0;&#125;for (int i = 2; a + b &lt;= n; i++) &#123;long long c = a + b;a = b;b = c;tmp = i;&#125;cout &lt;&lt; n - tmp - 1 &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-木棍-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 苹果树 - 题解</title>
      <link href="/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>典型的 $Fibonacci$ 数列题，题目居然写出来了…</p><h3 id="代码分析">代码分析</h3><p>板子题。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, i = 0, a, b = 1, s = 2;cin &gt;&gt; n;if (n &gt;= 2) &#123;n -= 2;i += 2;&#125; else &#123;cout &lt;&lt; 1 &lt;&lt; endl;return 0;&#125;while (n &gt; 0) &#123;n -= s;i % 2 == 0 ? a = s : b = s;s = a + b;i++;&#125;cout &lt;&lt; i &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 万恶的试卷 - 题解</title>
      <link href="/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>既然题目说了 $a_i$ 可能很大，就是高精度了，<s>但我懒得写高精</s>，得用个不同的排序方法。</p><h3 id="代码分析">代码分析</h3><p>这题难就难在两个输出循环怎么搞，为了避免溢出，要先输出一半再输出一半。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;string a[1001];bool cmp(string a, string b) &#123;if (a.size() == b.size()) return a &gt; b;return a.size() &gt; b.size();&#125;int main() &#123;long long n;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a + 1, a + n + 1, cmp);for (int i = 1; i &lt;= n; i += 2) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;for (int i = (n / 2) * 2; i &gt;= 1; i -= 2) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 捕食关系 - 题解</title>
      <link href="/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>水题一道，输入后循环查找 $a_i$ $&gt;$ $b_j$。</p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(n + m)$</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, m, s = 0;cin &gt;&gt; n &gt;&gt; m;int a[20001] = &#123;0&#125;, b[20001] = &#123;0&#125;;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;for (int i = 1; i &lt;= m; i++) &#123;cin &gt;&gt; b[i];&#125;for (int i = 1; i &lt;= n; i++) &#123;for (int j = 1; j &lt;= m; j++) &#123;if (a[i] &gt; b[j]) &#123;s++;&#125;&#125;&#125;cout &lt;&lt; s &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 负二进制 - 题解</title>
      <link href="/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="bfd80e894189546d713a82eac798b09cc818dbfcdcdcc6d07b7571ec00075e07">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cce1cc1f0fbc27e1d52fb73555db5b68ca124bdad7eaba8fbc9bee8bd54ce067cfb63b48a6ed0a33595d2cca444e77366b20e5e2e399f9d03b04de0f3bf234f5522ed793dac5329152312ed814378bccc43aa9c314b88e20a603b3e0242602fafe53af23138d68928cfa5c1c6e7b6cb6838e03d3f791ea4b8702812d48711fb1b3ade8135daf7f692c1f3f739acd52594bfb8b72c52349d2feaad114b10f8503edebb2691d0fc9b148a508ef9ac6859fd9d03f816553f65b403641db8837c2630334b82b450fe88f483956dde0315c6bc7e271f355ec74f6f0d547356288ce6fe82b08dc8aa62385d22a6ed70472566d12bdc63ee2e0955a04c267328a8ba5a588bb09439f96b8ac7a9a6793437e58fc8d8d380f425ca801d783bfd3fc99c8bd507e70777d472f555aa40950ab453fb887baaf81e00080ec5cc5bc8e62c5e231d7e12d60b319980b115ff04aa258652ee497b926e0bde66281dd952874c77fcbe0566b8ee25f88e5d3846f52780061fea72bdaa07a9faaf706be78c25b0c1375cce519bbf9880c7e48d9c8cf40eb5419ed361445a2a8b997af03e784d66165b8f2be8109b8efaa62554b2c6c1fefe131c25bee8e625db416ed9bf78aeed2b4665413f828af6ad53535f466ac551670831c98fa3fde4c5163f4c3034a5f598a998465b447cbec79f25a51685cfce1a8387b241e894b949ac28b1cfeabde08730af0ed5807f3d9fdfe6c2e4c18a0216909e43695cc0c304a1c4a083e819b43671bd5272e90ab94fa5734e346dd6d53f106800fb36da72b23abe0ef57e15dfbc8c10dee7bfc8f861c8b5d5eedd201b1055353829c97dc7582bb58b400c5162b24b52c5f81354fbfea637b50a20d0706fb958416c934d0ab74e09e226602e2d5a74405e9087390466f19e5d898a5a919a2c207ae7911ba5f12345ee44cb9596ed903c4f9f9a64bc848651d00240af48ebc9704a5d67743d46aeb32694cfe1c0e47462afcc7866b856e51fb46fca51feab910556fd62e80c3feb49e1fab108c520fbe06d856d32684965a417a7bf6aad380229a5d73df740a9b8e48cdaeaeb2d66ee4eb1a5419b515a6ecb6e8316ca7e9f109bebfff78f0b7c28c27e9f27e83048687f52ea6ff46714fdc5e1d993bd203c5541aa08c8db22c46613364875a1a2d22c9b548e5dfb810a8fe29fdfc6117f694a7932f4e0f9e859e04013ed296f28f5d6a99d6c2cf7920d83c9d8bc98dc2eceda4a6cb7d3f2ba0d995c94ca25fec0bea4ec5ca4d30ae00db9abc8f171c62579867db086763a88227baca497f199f398cabfc92bb06d90f0c6544d0be7688e460bfeb0dcc495d48cb5d27807ab921690a666d618a2c952c9b943265817ea0fc5f0df4acc1326263b79e4ebfa0a78659a8ac15cf9e46377afd1765196066136ed6295fa672277411f793c314f0bc5532b347b50d9f0cb80a964d07a8aecc023bed028596a5beb516328d008a36265b562413f9c42a52278925765c69f46c1434e223f96e3b667862497a2b41a9272456ed04017aaeb90c331f4d0f37dcce21ea31c82e65292a55b0a9e7b86f179edd621b113e1009fd1c775b31bb299e770497b75285bfa64f6e64806d8dde81008aae70716b850454f75fbcd18dc1e10a074e10d5bb50e7c79d64feeaed34f3c94978969a24674dceb0e30c368b33d40c57d825fa496fc46e27bbea063d3d5951cc493ba7d7230faea39bb02f6d1295a6323b82c8b838a863fcf8700e009feef32b73812cc9d84e492cd660e3759b4afc458c6060fb297e2a5a3829da76d786ebdefaccab4d2732f751a982eeb7f9fd87822071bb5b8ff33f20dcdb8b8627a07e5ecc78f79b9ecfd347b1f62541ecbddbef36cd99107c1364dce0c20d9660bc7d409e1b785da1a465bc3d50e373e6d271511394fb7d322ecc04d1d0604b5b95fb6a81504cb4a8e75c250ba4fc9a1f5339cfcce66cb37a53163613609f33ad192d7d4796c669f1b700c6a5e849aa3eacdc5dc37b7bfc72b91fde515e7b4f7b704bed71924e8c3533f09782c36cd4a20fff6a553635b071af6e3695274576f5a5837ea154bdf9ae1e2d051de95ea7b6e006be9d997f70c711f1e4f5d1f2c4185f0277e6d1bb7cb75a7a19abdadff9a3b180c088c516f504666445d7e735c4742b99c7e55d168b6932a5139034ca43352df7bc2c6612527c6cf53505ac756a50dfb4dd522ec7c8bf8934626d52ca24d80bb5b9bc4e1d09d65ec76ff3f00bdec46d328ec70837586c03fb1966ef7bb2d5b80910772254aab3a52b3911e1cdf675ffb4c721cb5f1a794a644f9b5a16c7fe1197a8887491032d0d1d22afa789f7fdb174db11fb13b45310a2b92006f85ecabb061cacb4c2933c8f89090997cf32ba28cd2e204da0d00a83989d68523fd13ef7e3584dcc897681a7700754a3e822fd88b0603ed6a18380de9b58df163b1fd0f1f8e52ce47bf6606420a68e77546925b8bdb91b1f5cae8f1073816600ab2d918e8ae524bcb688dd5c8fc5b93f296d10ffa091c12a4c29afc0814fc27de4c8c49fb4bd8472f437</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 行程码 - 题解</title>
      <link href="/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="df4fb9dfa253aa85d47ed62fa6f6a70e93ac572991bf7f8f2e09d774d92e3641">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccc8bc78212f166148a4c68dc108945a7c87f953b3c77e49e7e44003b6ef865d9132ac9d4b448e49006032f292c1d7a8d4c3a2f3588346bead18f59a8802b220477ca98a419cab7333cca188a73e5e912a62974f81df9c8f67a80f9db298bc2900eea623364fda50ee8a32aaf85c6ba7a3ff82d63f436c2169b58cf78f03867dd54401954eb5895cb6bfc8d642245a10f34f7e5d9acb05790569c3841b0485aaa70f855f11640f49f9b7f5bcc5261d2bbefa4f95e1a6d00d1939807a355a2004ee53072f34281f4b2383cbb4edb1d1161a9e9481d2c295e6851ba25c6f1bd405052c0f136d1bef03a695457b58ea4b7fdb7499dbd47b909bda206be5b34e085fb9903314d5ed993892ac5f8f395b1ec2fa88ba0db06f638d2332265c1896fc14bff33820fb33750a297360a3543029a7e1c7e748071ac5c0691cbd47c6f8b4111a4b7d1b2726575252fb2b529ac30dc4b846948ada9436b2782ceecacd18e581bc96c80ccbff30800760b600f9dd45252ffcf583b880de76b9fe786d15d6d2e3b919b12c15fd919e6829618aed67ed399d96638a30bef7e834f231f5a597d00a338613ebb97a8628d1e248e209b47ce303ce57b1e34979057fe34f468e903a7097bbdf37bca2a30971fdefcc765a9b4b891a01defa0605bb3a2f9e85a218be0c839377423968a7e8d0db457de8f4de65fc5f9f4482b95fe357fca1d062292d5691c23ec48524cb0a7fcae402285bd726ff6c34feb687961c65785649a33e93228c9b9a077a3757bb83d20d1c4c55e24541271708cd1949942a2634a26487cbcd4ba5793c9c5df3cf8d45b941a2f891093a3f0ab0a85c870ab5b2a531657760c2e3fdc0ae9b2652fcad1412d4e092481db10baa731c2af230b5f8f8d15149f2f86126222aa4bc6ab6178eed47b2403fb5bf7fd06fc4ebdfc427ebbdc2e6447758a63b1390cf0f4cb2edfa0314ccaa54f83766985f063f2056cd8d69aee51919c1c348c81b82c5dd95be58ee1d2370ed9e772965ea41a841bff9f6a9a40a1132fc45606111feb4d6453d82f5479ee936dbaed8406bb2a92d3039a21142a8a26a5b7987c1dbaa3948779c1a45dcacbbf26509f0ca70a23214f7565c0e6e74a1c4d8d38ec8abbc5ac41a784d339086cf15a84df6b10d7396a707804cc6d3e8fff8ea20814ce8e01a1babc203ca3aae2b7a00a372ef6969f5c40b1abfe4b5717809d656d840132c9b539d4c2e63eeb01580814d27e64057f3a470f0ddec8897bc96b434457acc36239f1ac4b8adf0e56c058ec1f84747ff1161d3fc0c3dd4618d7143e1b70e7618fd64fb7a56a7dc4530644703f792a10d071129c73a2d59d04c7f9a11f0f335681cd923802ed4854918be69d0299690e45eca17d787416366cb902c790aaee8ab95addf0e5a16b8907ea58c9342e9cdea20f668b156c99f75bf25503679b6e7e96fbf850bd0c86f076c0cb679d880f0e5d0cb3272e64b744c2a0b79ec558730a85ca6764e85b211dcabfc716810c37aeee9310454fdb1064cf66f14cfc97cd360e32d103a9963dd9bd454befe6984c991a422f079e9982866ce1b574907a0fdc117940738fe1a5d2933d673597c08351e354c637ba82433d90f8885c7dcbe64c6db8fadc55b079c991cf22ef266fdead86b809398b4e0ff63d3e1d76b7ec462f4562ceb1450a45e6b30d21b7b4cff13e33b32e3434d457f4534d8615c4da731d9b70000d892cb4cac0231714d1ba2aaef380730e844a689397582bd68119a5bca5941d18104ca5208d062fbd6f8ed300b8e7829c13c0b4218e5c42474494196b5523b0fcf16ffb1ea668d5cae0e28130ef9927c5e080a8fcc74c654665dc4206a87491b53a1f81d134540140dfbda88c828b8126f3159d7e004c8e5179f84de772ebeeca29cb6102c4ca403c5653b57a618f3507e52c79e9df271f737e2a3811c5f1e28cf37f0585762c173bcaf8e78505e38cac134ea702402efef714e2701be0924e82877a122a2936330e77ac5e76bb9d3651079fe6d392106887a1f5ebedf54c0116f31aaa0fe5449600d55126709171795a6d8245f851827513330c1326bdb157d8ea3ef1434e90a4489b836ef2ed9af90f6eef3308e0d377752a9b4b958dd691fd87d3d035b1eb17da761e1fbaac7d4c7881e485f5041b70fc326cb8f89d0272d5de54ec64d8a620429d63629fcb3eafcb77dc89589c440bb0f471bdb819eacd14cffad282d0d92eb37518df17773ffc611364212623ac13dee1ad35e3e0c1b54fc122b08f6370e9ea112bc22e2806727c32033af90e86fc07098065edcb3693570f2891945db21a32f4abeb008b99ee652a24c58c532f2217f888838733ab3d00e2c317565f70b83349253ac71e5fef37977315d0e122c24a612507559b62a1a6f858680f0b74918db4d404f01b5849f20f4e08008ef47a4988a43e794e569be9176533b8a9f369cf411749e08d538f9c63c0070254b2083683adc8795141de5209e34eff3e08f4234bc9102768c0c98dfec8a63f0e682b02a2d625d18ec6c1b5f596944e3a87becf86dee88a0733a65158ea5529681887d6b086a655ed5759ce90a36a9bf9c87f67fa5b029b85732f8c20909e4233f2962a5457f26ba1cef19fa5e9fbdb70aa6415afe1230f2ea3b94ec8532bff975e04393284d73810a6e6d76ea87875976cc859451ae8a544b04d9bfd6e8015b53c709f25f195675e36390e2e7b4b4cfe03b983f13f92ce5510164ad1670e5113de9547fbe62e9d4395fbed774ca15a953e11525ea93c03e8f94bebf742090eddca03d64a11be8bcd2fb67066f2de3c6e7051e799b21d00062283e61fec8e0c2f8817ece95178d67666aa8dd62bd60822683e4caed0da6c91bbe210f53c25957f8aa45655928baa9d39bffd8c64f3a443d5a077973909400b71d02c1a3cd108fb9bd8d39e66910e63084ffda85ba6efa501469b0d49ac0f239e5b78ce984c6dbe32de9f83b10e05834b9b28e2be25e71c06fbab31332c3236add47d96f9567ef677c978eb66da05b4fecc302d877d2e6f75d9665fbb6d195004c0e54ec290146efad20d52c49e11a243536fab9bdc9f528d8dae4f2ba9d485c9140679731183c33299bb7bded9b42aecf7e75e92d4e526e40b02aa5d99f7eab07798f4fec99d70a2ffe1f14f547c587c3abde69fac9e5ea6aab1c6614f6206f86f711eacd624e02f9fb38632c0426d7dc6bfe73e544cb6f454eb5d22ec2e7808ed81828db4131ff8e3c80c4ab99507481a6cfcc4184978d0ae1f1bc92aa51267dabb25ce8318a3032c73ab194a9a0fed26b52c20aca991c9cf4166a4c67775e6fdf868ae600fd0e3783c12892a6889fcc666f092c36784c9a3f713ace9928ac7cf603924478fa8bba80909cc09ccca430d89a4db488d352967af8f31e3df909e951672b3c434f357a66e2bda9832608f5e5a13e5ac972b96e78c1d2d49ea95a4377882f22f76d10385654d9ff1d7ec942a887dc550f18f1d7909e7eb8ce7f22f101fbe451d9e99bb6fbe23f56c1adefe934f6110e396b99475dcaae4b378d0bc5a278affee3acb6b8a965a7206b067b90642423b0cc8ee0ccb7bbc7f3557643d64785860ca77cd6565a296e401e7e3188335461e13c32d639796e2828017477a853a7a3e3b181a0fabf7be1be0b58b16b4db32bbc6b40df259d720ed3f2bab48ebd661add0f6d1f01fc30d62978ad7aeadd7ff7a555088f67cc615eabe57bbe761e5b91d35da84d636771bef3f9facc5a4d792637b8e0b97f49af91774333042ae1f07aca2d0d7f32c910fcadba562124bca7d7317059c814369120e833b2fd1645c524e15f6bba5ee083025a1d1f80a4574d6c2f2c21490fc0266ab8b8d4edb2f574ea8adfb22bed1a28f16815080c985a6c8a0ab4a2ed1a95d3826bb94fa3fe60ad5d218f98d11c50ec0bd282afd00ea7c5a442b18c49cb550e36e7f8ea3244fa15d67da219c69c49d3ef980411920674abc45ea0d1f4ac57a22c5c16cb470d53235c307befd585ae302ec75abb292de057a9abe43fb7ace8432a0043b6fa66445837c73d874215e6c2cc853d271834d1da5764691b0d88a0a294ce6c8b76f54a61b7f8dc31353e370e887fa3d9106c9e05d2243f6a77d41d0001d87e96614268cabeb0c2c8e011e53e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 之吃牛肉 - 题解</title>
      <link href="/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="来自验题人的致歉">来自验题人的致歉</h3><p>本题验题人太<strong>垃圾</strong>了，没有注意到题意矛盾，导致标程出错，而样例过于简单，无法查出部分错误。</p><h3 id="题目解析">题目解析</h3><p>这题太淼了，但我做的时候因为玩过 MC，觉得吃饱指的是不能再吃，差半个饱食度也能吃的那种。</p><p>这题就是字符串匹配。</p><p><strong><code>if</code> 出奇迹</strong></p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(1)$</p><p>要点：</p><p>$tot$ 要转换成整型再 $\div$ $3$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, m, cnt = 0;double tot = 0;bool flag = false;string s;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; s &gt;&gt; m;for (int j = 0; j &lt; m; j++) &#123;if (s == &quot;stone&quot;) &#123;tot += 0.1;&#125;if (s == &quot;coal&quot;) &#123;tot += 0.5;&#125;if (s == &quot;iron&quot;) &#123;tot += 1;&#125;if (s == &quot;gold&quot;) &#123;tot += 1.5;&#125;if (s == &quot;diamond&quot;) &#123;tot += 1.75;&#125;if (s == &quot;obsidian&quot;) &#123;tot += 4;&#125;if (s == &quot;zombie&quot;) &#123;tot += 0.5;flag = true;&#125;if (s == &quot;skeleton&quot;) &#123;tot += 1;flag = true;&#125;if (s == &quot;creeper&quot;) &#123;tot += 2;flag = true;&#125;if (flag == true || 20 - tot &lt; 6) &#123;cnt += floor(tot / 3);tot -= floor(tot / 3) * 3;flag = false;&#125;&#125;&#125;cout &lt;&lt; cnt &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/06/LG-MC-之吃牛肉-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 公交车站 - 题解</title>
      <link href="/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题面很长，总体来说，这道题就是让你来判断每个乘客的区间中是否有车停靠。</p><h3 id="代码分析">代码分析</h3><p>本题要点：</p><p>要定义结构体，结构体中要有总时间如 <code>TOT</code></p><p>输入的时候记得用 <code>scanf()</code>，这个函数可以无视中间的 <code>:</code></p><p><code>scanf()</code> 的参数是指针类型</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct NODE &#123;int HH, MM, TOT;&#125; a[1001], s[10001], t[10001];int main() &#123;int n, m, tmp, d[1001] = &#123;0&#125;;cin &gt;&gt; n &gt;&gt; m;tmp = n;for (int i = 0; i &lt; n; i++) &#123;scanf(&quot;%d:%d %d&quot;, &amp;a[i].HH, &amp;a[i].MM, &amp;d[i]);//输入记得带格式a[i].TOT = a[i].HH * 60 + a[i].MM;&#125;for (int i = 0; i &lt; m; i++) &#123;scanf(&quot;%d:%d %d:%d&quot;, &amp;s[i].HH, &amp;s[i].MM, &amp;t[i].HH, &amp;t[i].MM);//同上s[i].TOT = s[i].HH * 60 + s[i].MM;t[i].TOT = t[i].HH * 60 + t[i].MM;for (int j = 0; j &lt; n; j++) &#123;if (s[i].TOT &lt;= a[j].TOT &amp;&amp; t[i].TOT &gt;= a[j].TOT &amp;&amp; d[j] != 0) &#123;cout &lt;&lt; a[j].TOT - s[i].TOT &lt;&lt; endl;d[j]--;goto END;&#125; else if (tmp != 1) &#123;//敲黑板tmp--;&#125; else &#123;cout &lt;&lt; &quot;Leave&quot; &lt;&lt; endl;tmp = n;//记得重置goto END;//goto跳转到结尾，也可以用break&#125;&#125;END:;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/06/LG-公交车站-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Hands - 题解</title>
      <link href="/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这题看上去很难，但分析后就可以一个循环解决。</p><p>每次取牌如果有一个连续的大于 $0$ 的数列，那就全部取出，取到其中的某一个数等于 $0$。</p><h3 id="代码分析">代码分析</h3><p>边输入边累加，记住当 $x - last &lt; 0$ 时，就不要累加。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int ans = 0, n, x, last;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; x;ans += max(0, x - last);last = x;&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/05/LG-Hands-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』WFR - 如何使用 Warfarin</title>
      <link href="/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/"/>
      <url>/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介">简介</h2><p>Warfarin 是一个由 C++ 编写而成的解释型语言。</p><h3 id="特点">特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li></ul><p>具体信息请看<a href="https://www.luogu.com.cn/discuss/show/338156">这里</a></p><h2 id="使用">使用</h2><p>Warfarin 目前最新版本：<strong>3.31</strong></p><h3 id="下载-配置">下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-运行">编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code></p></li><li><p>编译运行 <code>.wfr</code> 源文件（请看下文）</p></li></ul><p>Warfarin 的源文件扩展名一般为 <code>.wfr</code>，</p><p>使用 <code>Warfarin.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code>，</p><p>此命令会编译出一个 <code>.ff0</code> 文件，相当于 C++ 的 <code>.exe</code> 文件，<s>但不能双击运行</s>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接">相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip">本站下载链接</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://www.luogu.com.cn/discuss/show/334473">作者发布帖</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/">https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warfarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 买二送一 - 题解</title>
      <link href="/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><blockquote><p>凡是顾客购买两本书，就可以免费带走第三本书，只要免费书的价格不超过两本付费书各自的价格即可。</p></blockquote><p>可以使用排序来做。</p><h3 id="代码分析">代码分析</h3><p>排序，建议偷懒使用 <code>sort</code> 函数，<strong>But</strong> 是降序排序，所以要写炒鸡简单的 <code>cmp()</code> 函数。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, a[100001], ans = 0;bool cmp(int x, int y) &#123;return x &gt; y;&#125;int main() &#123;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a + 1, a + n + 1, cmp);for (int i = 1; i &lt;= n; i += 3) &#123;ans += a[i] + a[i + 1];&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 方舱医院 - 题解</title>
      <link href="/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是炒鸡淼的小学一年级数学应用题（（（</p><h3 id="代码分析">代码分析</h3><p><s>由于本题过于淼所以不分析。</s></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int a, b, c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;cout &lt;&lt; (a / c) * (b / c) &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/31/LG-方舱医院-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 开关灯 - 题解</title>
      <link href="/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>一个循环搞定。</p><h3 id="代码分析">代码分析</h3><p>一个嵌套循环 + 检查灯的状态的循环。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, x, y, a[10001] = &#123;0&#125;, sum = 0;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; x &gt;&gt; y;for (int j = x; j &lt;= y; j++) &#123;if (a[j] == 1) &#123;a[j] = 0;&#125; else &#123;a[j] = 1;&#125;&#125;&#125;for (int i = 1; i &lt;= 10000; i++) &#123;if (a[i] == 1) &#123;sum++;&#125;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-开关灯-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 古老的 A + B - 题解</title>
      <link href="/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>This is the waterest problem I had ever seen.</s></p><p>好吧 A + B 最 water。</p><p>没啥好讲的，就一个循环。</p><h3 id="代码分析">代码分析</h3><p>直接读入然后来个循环，注意输出格式。</p><p>时间复杂度 $O©$，空间复杂度 $O(1)$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int a, b, c;cin &gt;&gt; c;for (int i = 0; i &lt;= c; i++) &#123;a = i;b = c - i;cout &lt;&lt; a &lt;&lt; &quot;*&quot; &lt;&lt; b &lt;&lt; &quot;=&quot; &lt;&lt; a * b &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-古老的-A-B-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 排序 - 题解</title>
      <link href="/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡淼的 C++ <code>if</code> 语句题（?）。</p><p>太淼了就不解释了</p><h3 id="代码分析">代码分析</h3><p>全读入完来个函数判断就行了。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[6], b[6], cnt1, cnt2, tot1, tot2;int mysort() &#123;if (cnt1 &gt; cnt2) &#123;return 1;&#125; else if (cnt1 == cnt2) &#123;if (tot1 &gt; tot2) &#123;return 1;&#125; else if (tot1 &lt; tot2) &#123;return 2;&#125; else &#123;return 0;&#125;&#125; else &#123;return 2;&#125;&#125;int main() &#123;for (int i = 0; i &lt; 6; i++) &#123;cin &gt;&gt; a[i];cnt1 += a[i];if (a[i] == 50) tot1++;&#125;for (int i = 0; i &lt; 6; i++) &#123;cin &gt;&gt; b[i];cnt2 += b[i];if (b[i] == 50) tot2++;&#125;cout &lt;&lt; mysort() &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-排序-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 生小虫子 - 题解</title>
      <link href="/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这道题其实就在检验 <code>for()</code> 循环的应用。</p><h3 id="代码分析">代码分析</h3><p>读入一切信息后，</p><p>写一个循环 $z$ 次的 <code>for</code> 循环，如果满足条件 <code>k == x</code>，小虫子数量增加，反之 <code>s1 = 0</code>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int k = 0, x, y, z;cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;int s1 = 0, s2 = 0, cc = 1, cl = 0;for (int i = 1; i &lt;= z; i++) &#123;k++;cl += cc;cc = s2;s2 = s1;if (k == x) &#123;s1 = cl * y;k = 0;&#125; else &#123;s1 = 0;&#125;&#125;cout &lt;&lt; cc + cl &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 合成大西瓜 - 题解</title>
      <link href="/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道 C++ 枚举题，只要遍历 $b$ 数组就 $ok$ 了。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$，$b_x = b_x + 1$;</p><p>遍历 $b$ 数组。</p><p>倒着遍历，一旦发现有符合条件的数，直接输出并结束程序。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, b[201];int main() &#123;int x;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; x;b[x]++;&#125;for (int i = 0; i &lt; n; i++) &#123;b[i + 1] += b[i] / 2;&#125;for (int i = n - 1; i &gt;= 0; i--) &#123;if (b[i] != 0) &#123;cout &lt;&lt; i + 1 &lt;&lt; endl;break;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 救援争先 - 题解</title>
      <link href="/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡不淼的 C++ 结构体排序题，我卡 <code>cmp</code> 了好久。</p><p>就俩循环读入 &amp; 输出，<code>sort()</code>，还有<strong>万恶</strong>的 <code>cmp</code>。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i . sh, a_i . sm, a_i . dh, a_i . dm$;</p><p>使用 <code>sort()</code> 结构体排序;</p><p>循环输出排序后的 $a_i$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct Node &#123;int sh, sm, st, dh, dm, et, id;&#125; a[1001];bool cmp(Node a, Node b) &#123;return a.et &lt; b.et || a.et == b.et &amp;&amp; a.st &lt; b.st || a.et == b.et &amp;&amp; a.st == b.st &amp;&amp; a.id &lt; b.id;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;scanf(&quot;%d:%d %d:%d&quot;, &amp;a[i].sh, &amp;a[i].sm, &amp;a[i].dh, &amp;a[i].dm);a[i].st = a[i].sh * 60 + a[i].sm;a[i].et = a[i].st + a[i].dh * 60 + a[i].dm;a[i].id = i + 1;&#125;sort(a, a + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; a[i].id &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之武魂融合技 - 题解</title>
      <link href="/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡淼的 C++ 模拟题，也不卡 <code>long long</code>。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$ 和 $y$。</p><p><strong>一边输入一边计算，速度快</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, x, y, z;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; x &gt;&gt; y;z = (x + y) * 2;cout &lt;&lt; z &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 前 n 个偶数位回文数之和 - 题解</title>
      <link href="/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>这道题目就不淼了，变成沝了。</s></p><p>写几个函数就不行了。</p><p><s>真 简 单</s></p><p><s>250lht：呜呜呜这是比赛赛题，我保龄。</s></p><h3 id="代码分析">代码分析</h3><p>输入 $n$，写个循环判断从 $1$ 起的每一个数，如果满足函数 <code>weishu</code> 和函数 <code>huiwen</code>，则加到计数器。</p><p>这时有人就会问了，<code>huiwen</code> 函数中的 <code>_itoa_s()</code> 是神马东西，请看<a href="https://blog.csdn.net/smcrystal/article/details/71191335?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base">这里</a>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool huiwen(int g) &#123;int i, j;char b[1001];_itoa_s(g, b, 10);for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>以上代码交到洛谷上会 <strong><a href="https://www.luogu.com.cn/record/54096300">CE</a></strong>，你谷居然无法使用 <code>stdlib.h</code> 的 <code>_itoa_s()</code> ???</p><p><strong>偷懒失败</strong>，只好自己写转换函数。</p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;int i = 0, k, n;char temp;if (m &lt; 0) &#123;s[i] = '-';m = -m;i++;&#125;while (m &gt; 0) &#123;n = m % 10;m /= 10;s[i] = n + '0';i++;&#125;s[i] = '\0';if (s[0] == '-') k = 1;else k = 0;for (int j = k; j &lt; i / 2; j++) &#123;temp = s[j];s[j] = s[i - j - 1 + k];s[i - j - 1 + k] = temp;&#125;&#125;bool huiwen(int g) &#123;int i, j;char b[1001];int_to_string(b, g);for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之魂系辨认 - 题解</title>
      <link href="/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>@250lht 这道题目太淼了！</p><p>不多废话，这道题直接写一连串的 <code>if</code> 语句就行了。</p><blockquote><p><strong>P.S.由于 Windows 操作系统终端使用 GB2312，所以无法正确显示中文，但这不会影响洛谷评测结果</strong></p></blockquote><p>审题人真的良心，写了这个，不说的话我还以为我代码出 BUG 了呢。</p><h3 id="代码分析">代码分析</h3><p>输入 $n$，循环读入 $a_i$，尽量<strong>一边读入一边输出</strong>，<strong>速度快</strong>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void judge(int n) &#123;if (1 &lt;= n &amp;&amp; n &lt;= 4) cout &lt;&lt; &quot;魂土&quot;;if (5 &lt;= n &amp;&amp; n &lt;= 14) cout &lt;&lt; &quot;魂师&quot;;if (15 &lt;= n &amp;&amp; n &lt;= 34) cout &lt;&lt; &quot;大魂师&quot;;if (35 &lt;= n &amp;&amp; n &lt;= 39) cout &lt;&lt; &quot;魂王&quot;;if (40 &lt;= n &amp;&amp; n &lt;= 49) cout &lt;&lt; &quot;魂宗&quot;;if (50 &lt;= n &amp;&amp; n &lt;= 54) cout &lt;&lt; &quot;魂尊&quot;;if (55 &lt;= n &amp;&amp; n &lt;= 59) cout &lt;&lt; &quot;魂帝&quot;;if (60 &lt;= n &amp;&amp; n &lt;= 69) cout &lt;&lt; &quot;赤炎斗罗&quot;;if (70 &lt;= n &amp;&amp; n &lt;= 79) cout &lt;&lt; &quot;巅峰斗罗&quot;;if (80 &lt;= n &amp;&amp; n &lt;= 89) cout &lt;&lt; &quot;封号斗罗&quot;;if (90 &lt;= n &amp;&amp; n &lt;= 100) cout &lt;&lt; &quot;海神&quot;;cout &lt;&lt; endl;&#125;int main() &#123;int n, a[101] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];judge(a[i]);&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 2 - 题解</title>
      <link href="/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这道题目应使用算法库函数 <s>当然自己手写也行</s> 和类型转换。</p><h3 id="代码分析">代码分析</h3><p>先输入 $x$ 和 $y$，直接输出 $\lceil x \div y \rceil$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long。</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long a, b;cin &gt;&gt; a &gt;&gt; b;cout &lt;&lt; ceil((double)a / (double)b) &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - gcd 与 lcm - 题解</title>
      <link href="/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><h3 id="代码分析">代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数。</p><p>（算法库里有 int 的：<code>__gcd</code>，不过本题卡 long long）</p><p><strong>注意本题数据范围 $10^{10}$，卡 long long</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;long long gcd(long long a, long long b) &#123;if (a % b == 0) return b;else return gcd(b, a % b);&#125;long long lcm(long long a, long long b) &#123;return a * b / gcd(a, b);&#125;int main() &#123;long long T, a, b;string mode;cin &gt;&gt; T;while (T--) &#123;cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;if (mode == &quot;gcd&quot;) &#123;cout &lt;&lt; gcd(a, b) &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; lcm(a, b) &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（2） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ <strong>结构体</strong>排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，$a$ 一样的按 $name_0$（字符串首） 的 ASCII 码<strong>从小到大</strong>排序，所以我们还要自己写 <code>cmp</code> 函数，来比较两结构体。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<s>偷懒</s>，写一个 <code>cmp</code>。</p><p><s>出题人 NB！！！不卡我们 long long 了</s></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct node &#123;string name;int a;&#125; wx[101];bool cmp(node a, node b) &#123;if (a.a == b.a) &#123;return a.name[0] &lt; b.name[0];&#125;return a.a &gt; b.a;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; wx[i].name &gt;&gt; wx[i].a;&#125;sort(wx, wx + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; wx[i].name &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（1） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ 排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，所以我们要自己写 <code>cmp</code> 函数，来判断升序。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<s>偷懒</s>，写一个 <code>cmp</code>。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(long long a, long long b) &#123;return a &gt; b;&#125;int main() &#123;int n;int a[1001] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a, a + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 - 题解</title>
      <link href="/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ 语言入门题。</p><h3 id="代码分析">代码分析</h3><p>直接输入正整数 $n$ 再输出 $n \times 10$。</p><p>或者输入字符串 $n$ 再输出 $n + ‘0’$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long（使用方法 2 可无视）</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long x;cin &gt;&gt; x;cout &lt;&lt; x * 10 &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/03/hello-world/"/>
      <url>/2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/06/03/hello-world/">https://ren-yc.github.io/2021/06/03/hello-world/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
