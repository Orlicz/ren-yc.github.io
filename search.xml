<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『题解』LG - UVA11559 Event Planning</title>
      <link href="/2021/09/14/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA11559-Event-Planning/"/>
      <url>/2021/09/14/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA11559-Event-Planning/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目翻译">题目翻译</h3><p>作为一次短途旅行的组织者，你需要根据参与人数、预算、酒店及其周末空余床位的情况，决定是否成行。其中旅游人数 $N$，预算 $B$，可供考虑的酒店数量 $H$，可选择的出行周末 $W$。其中 $H$ 确定之后，会输入 $H$ 组数据，每两行为一组，第一行表示该酒店的人均住店费用 $p$，第二行表示 $W$ 个周末对应每个周末该酒店的床位空余情况 $a$。</p><h3 id="题目解析">题目解析</h3><p>本题很明显就能看出是一道模拟题。</p><p>只需要在输入的时候顺便计算一下是否超预算。如果有，则顺便记录下是否是更低的预算即可。如果都超预算，那么输出 <code>stay home</code>，否则就输出记录的那个更低的预算。</p><p><strong>一般 UVA 的题读入行数是不给定的，所以我们要使用</strong> <code>while (cin &gt;&gt; n)</code> <strong>或者</strong> <code>while (~scanf(&quot;%d&quot;, &amp;n))</code><strong>。</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁using namespace std;int main() &#123;int N, B, H, W, p, a, Min = INT_MAX;//Min 根据个人喜好设置较大数while (cin &gt;&gt; N &gt;&gt; B &gt;&gt; H &gt;&gt; W) &#123;//如果是 scanf 可以加上 != EOFfor (int i = 0; i &lt; H; i++) &#123;cin &gt;&gt; p;for (int j = 0; j &lt; W; j++) &#123;cin &gt;&gt; a;if (a &gt;= N) Min = min(Min, p * N);//读入时求最小值&#125;&#125;if (Min &lt;= B) &#123;cout &lt;&lt; Min &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; &quot;stay home&quot; &lt;&lt; endl;&#125;Min = INT_MAX;//根据个人喜好&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11559">洛谷博客</a></strong></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/09/14/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA11559-Event-Planning/">https://ren-yc.github.io/2021/09/14/『题解』LG-UVA11559-Event-Planning/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 双色棋 - 题解</title>
      <link href="/2021/08/31/LG-%E5%8F%8C%E8%89%B2%E6%A3%8B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/31/LG-%E5%8F%8C%E8%89%B2%E6%A3%8B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="d013fc4eb84166082996ab48d2f9ceadfe1671b24c06065c47b4b2204cdebee7">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cc3f58295754745f19e5981852a52ece6b2eac06c3cc1356b39a175868193dcb8775ab5e1534e5eb9a5562cb2a1d56436b60052b23ad6638d48722def9fa3bae056e6f41fe69011895407587f49c5d2c3ff564c909939f7e61ce74eae815a232ae803c80107bc59c4d7f91e1f86c7bbacfda8357ccbbf1a661e6d96904af58555d8fc3505991348a506716f3447f62c82f1c53b79f6caee14bd84be42d4e0747756a6172a60af474af57901ab3bd39aab7719de272216ac8f93f1eaafee52f26ddb47bbeff9ba398fe394c2fda34b3f52a05f4e3a5c7f75f71842c6776a2bb08782bb0cd78e65692281b8f64128271c63b7e2a1002d5ee5db7a669708a700a6d421f4d5a23d111d4e6769857f3ef2fd1dd7a53693594a9292621554ebba902fe9a349c8f685c71503afbd0234d6e30e2d84457ccc791bb7fb8a8e343d10767913523e9e711fdb1f3f688f9c1a15e38fe413e249a19eb18cc4efbfe92dd0efb9e69177a396bbaff953467caf73978ac2d3a6fd0074e4ceb622d5e334ed56d0301274ccd5939a2adacbf423024ebf0122be82ac085c17c3e4615b8dccabd5360436f2616bdab7b24f95a1e857c54f31bb5ce85a25c5be6fb35d3eeb78479402c56df4b3e95868456e52bd9c1b5dfbd88d84f62bc5cc0df6d893d29579b8030822f4736b3a43e798ac03183a9d1bdc9a2fd09526251b8ac119a6f88d77c8089235cb2cac844f2aacebda7af1702564b23cd8939ee4fa536f83960216467181522a3bc2f0b807b7a64e4af27d36b37797e79693058aed6c6d1f9bb2bbadf6ef290bfe4496dc1b5effd9f946c1bbbbdbd79f80333b8a63398c4e2aa015250b3a386bc814d8e7e9430346a369c5ec45729816c4150d2b6c9ef5ef63769f9d855f5fefb188323095c93cca0531e9b3a9ddcc3eec6fef6f46540d2911e9423d6940cbf9365e32067601887cadeaf00629da8fae2852790bce60ec38f10ec541fdbb4fdf18c74250a108ce403a29b4a762b80cab64ab7bdb487e739d0c8b3ae52ffea6c251a39c13a84dfd7699125af5d9544fc27bc804cb4deb247612bf2342c4b47ff63e582cdd6b4112ba893cedf720e59620d7ac9675992397eec2ef7dd0a209c62145910d8eeb7228573c32ac7cad9c96bf971046fe97b51cfe614e83b11a02b8668975a70ff6a3ee0ce5cd17a836b6d2ba9663ffd9dd430e15495d7bda6757c25d160cd8515f1fe82032b05bff49d408ff4f6a8fb844c9a858a9fb9ef0699ed92c938e72f7f01021c93c69bf35da305a278bbe621689eb0876c2cdce631be7c0d8dce2c38f106aa37e149b3b7c3fc0c51c5f907cfec6049d07b5d064f660a3dfad7e8277385a233b092470fa266d5e221c7c46c7237c652592e54b0a17b0388371e57f3fbdcdca0235f5fe9b13594d22cd1d863104e60ada6b611ad5462edfe29904aa763a8d5812f5785d58438918a043bfc193a91abe1d32431b0239437acad465544c06890f40f654e2d284ae97a134c224fa9126423a28a6555fb7dba9539b5c4cced394fdc5e3a7bb0549187f7e9848d3411a14cf47251f58800908b6e6dc5c45ef465ef58dec39785f1aea5a56458c5a0851e48c5e914dd760ed372a549f448acc3d72abb5f7bf4ef3d086ed42ea17e3190dcdfd730c35c18ebeb77f7a6584fa44871253d0d5050da6d4fbacffe6e4fa432551170e8b3c3de11d0b54c10c9bb3003add7084ac4cb11e1eba9cbe1563aa3cc45449ed63ffe34d52ed12baaabed4ae2352c62d968559269db826f3a020ba0742975e3f349307020113ec6f9e4dec35657b6230aefe16978431a462c86439b544dab0c4e45f2e2eeb43b8fa5fd79e106377cf01608fa9603402dd90c0913392dfa0c1a05e2f6e7d8282be3a0813ce3d4da3a31fb7cdade888658e8d1098c5ffd5580d32813e88f82801e50b1d076317c2e3dd663c3512ec4df5a95b9b1f7a1ca71dd7bdc927e73c4a039c4c58a66d0efb891f41e37624aa85c108e06ebf7d65194283085046e6711d07af85d95c5e9841026aeab54ec673189dede73fc9d3b6fcfd2b5f41fd835ff0ed2600be24cd3bc0de2a8f5fa0e7c8524122ce3b6bb2ae29729320f1bafaf94722d681de9041b0b01cbe15a5b639ffe16df0de8378f66aaea40a4a35fd90eff458b2e1cb5b8ce06c3739b9dc805a39828cc7858a90035e04f72f29988996d951764c6d0a4a1fbedf1d244a17ea186292632e3623b6d8cecb212ed9631e3e840f39e3caafd1f81fefc868398ef2613be21ad63c1241b9ff6fcaf06f813d8b2854ec5e0ea58b9ad60c7142fde6d2750e76bded41906128b307c396257a39fe803cc25b7361625f62fc7fe9bafcdf6b1e467840899d269801f179d982ee752eae22dc344d787709ac0c53d1f7a2f0d80568a5f77a4bbd3ccc277225add15c59cf21db5461ff96251955125ef65310c42ee88f01852cc1b33bbb7ce17ef57719f8f16f297e55b8cb9655cac2cf5c6ce4dbe65fa7de3fc2270512f87994cdc5371af3aefc1902d784464a0b8dc3490f06d6cd2fcd8a391b0c237b3f8500a605e50662d268f26d9a6e02b7f2c6088954c45e8c902b0329e677cb943e41a14d469c01f28754dc18fe1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 贪玩的 ac - 题解</title>
      <link href="/2021/08/29/LG-%E8%B4%AA%E7%8E%A9%E7%9A%84-ac-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/29/LG-%E8%B4%AA%E7%8E%A9%E7%9A%84-ac-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="7fedba1c75a164fef03c61c4595c17bf5e68eae792d985320833fd4f794f0a83">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10637c6e81d6995515642d55a82aa31a45814cb943c1938bfce462287bb4e6f662972741379ec8720fd386f2d1c3f1d9d237e87f04e5888a4c7ef12a34888ccd754776e8fd259c74546f44032739932d3ea620ba8b7e189c52bfe93c338142f3674c8f490bcff261bc642c17239f5a217703ccf9984ad1702d8b8db8a8f0c9adafbf8907c3e64d19f811788f933438838d2b878ca1e9a345173e0f9d2a02cbb11ab54988caa00b00970162782f9c6c91417546eab0380979a13b8d6bd9a8280f01e27b6bf91b68cb3bce3661ad135e39b357aeee3dc20b07c5f1bb23700f528b9ec997b445e1ebc1dbb7576037d864a4d5d9728b74e15886fb4569bb21e2d9f106ebd0c6a9c32f0fcccfe926d3450b7e68ffce34f5e16e052ed5a12aadb9087f49a7172ac956b35114a90885022fe77bf88058bef4e0d16a849deff512c93fcfba40f218093d0ccbf2732d78b5d48549a49ea67b41753cbf70e8f78f7dc1fab22e67a3687a64e1f50b0a6804787642cf9e8b580a42875c69507ecaeb35cf412c05a9eb0c1e11848b3d95cb9f8f4a3cec39cd44323240eac32d3cb4a4113e04efd444707958d4de3659590f74d5b388ff71714916c31d2e67508679d430a4c688332d187b8940175574fc2315618d4e43dc51b71124bc5511a62b6a9b01d69b6d275722c687b51f7e2ac59c31a6322c15d8f86f3edacb0094a88144e4c74f82b1e9a9128d8cfa67ef9082bd319e8c25fbbc5f0dd32be32c53c1c6e017458caeeb618216fd91405bed30642d544de6dc5aa4ada8e9f5c6daa28f9a267a18641f0dd38772906d738c4859d17ac1fd10a467203f118363819b188dee41837ee926e2a5af9e6714bea45aa1892c04396f8c3c1fdcefb2690d6e8a44738615fe0e7a97181fcba42363e7668770f8fe4979e220edfd69f626e0f6b3d117f8821a730cd754dea54f8b636af349c6b1a97587715f70147b22a94085ad101a450dce00381932b3222d9f5b8b6aea20cb94c0195f7a72ce69edd297bc6f1ee8ef456ed93e84ff9806d554a0e4ce003f49552a133d8e5264dfab08495ab51cf4e884c94b613651918ad0dabfca880cbe359f0377b3edf616f5905fc2fbdb856cefe92b11e576a20452ab668d7f8b15316103c30d8f5e3dc20ba5208fb0595ba5a4dea159f546ca6e064400215471918e47c09199403194a03f837242365f38bc9b2141ab269d86110640db061a032020f7b1bc9856245563425b3aec50d81a4d1a7ed2b3252f0fcaf1a16899690569a9e3dae391938261e540de4143859acee77efe9064fcaec23bb8afcd7bd056f534340f2e311aa65bf280ada65a37a8b9fc40d3167f39c684a7dc8341b129da85f2e4492d5afe80e8a0f6c904b085305f3f6698a3fdd16d06f227f24e329e4ee0254eb548116acdc508090668b1b3a9278953aacad2e956ca667f6bef858622434221b7a6c1688dfd500bdcc84ccabd8730fbb4e9630c5df71de42a02f7d90c181c3206501ae6b95bea364da09f59565827aff220fcb3376e683d688b7782e049843e7cb5fbb9c35e2a4d5149f9499bd78e250c82f64dd66d8620bae8c0ffda0e7cb36d816fb556c2a164eeca356d11f64eed432d5c6108ee374ecb7f60bcfe194dc4e1223b8fe9c1a00a08c5d11ab62552f4e3f069109faa61151613921bb0b14b71a337c3c21de9cf7ba7ff4d77245a508c834d6856be04395a8c20268d0e9a09e5c60091b328f9718cbc4a62474c83880bcf5999dfe5cfbda216eee8a7d3a086d849857fd77277febb37542531bb68cea9c0c700f918ec5752532870410e392adada16cdca56b604c11758e48fdecec813315e0308f1286b61913d03b76af79b941c79f7f232df002002bbad0b3369d250909ac0a8ad9934f3f382ff1e59acffeba52c60e13e86af4077a5e4696519a8bb88b82a44a02525e7e823f59649007265dee5b18748c0c4c7a94ef65deb7f1f9aac4abc3dbd4a5a124b0ed28f07e9f2cec3f3bd6abf563eac8df879ff11501b355c50e22cf6de9d38a6eb68668fa386d270a6da02393970a14c03cfa41fe4f195ba55891f28bee976f5aa4e97a79e7292fc14d4a09a04d61c2e10a113c7edee91b1590eb39e10dcaf4aa19bdbde6a9ab18cb9399561ee0f37bff947a671524bee18a0469fcaebe6a30891a27434e01a1c078e02577f89059d8c214b9de250c385c6f3eda43d1ede8c92a5cc805ade8e68d46ac073bf7ab50c6d53d1260d1113e9be727b7147c0d4301d104eee56fa8f2fe487470955faba9bc7e40a5741188d4ee724156760a6bcf7b3b9ddba4f1866aa925608ae546150f2bfbf7ffd6821f4b1ddea13a15d81e5a5cdb0834e43167d0ef377ec2a38dc2ba6441868b4439aa5cded7747bf891251</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Numbers - 题解</title>
      <link href="/2021/08/29/LG-Numbers-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/29/LG-Numbers-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="0cac20aa8f67b6d5c35ce72f6302eb87a1c0375ad7edf4e2c05a2727d7728453">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccc585a7c36e3b30bc5c5863a045649895cc97491ebb5aa3cb334e82f8e49866b5fd802a067de28843fecfe5b20a3ba1b39f123f4d30ac641eee5c06f1b77f28b2092cf1d6493ebad7051124f154186d0f45e211849acfcaf85ac786d7933a454478c3e9bfecdd420879e208c332b956bef72671c0eb5c71a9b6b3a9ee7600a3ec9f711e0c1060507afe6dfaca61e21a131b0db9257948d333f6891e4c2b2898c9345730ce85701dfdd44f813616840acbae7fecd772e380de90d0a30cfee5461d639278e17a5a9926b09f32429f60748b39bb088c659b71518177c8d4e8eb2caeac1aa90cce4b5937aa535b58b58a8cefe9aae105233056e41abb4ddbe9e0e977ba8771651fb1914ef915809b09080c4b6ffc15d599bbc37791d07dd06067efb67b96717b0011f4e99ef1955412633ece9f03bda6c4d643f00ae07e20e9bf71b8e9e10e9006e085652254e1e5e5b85b6e09398317385e1400108356d860d44b3d6cf173445b03c80d4a039a6e22b3db81523d5e0d22ca47c18994a4e237f98b8a6b7891bffc7a410d7d238de39d6f92e37a58f499efd40b41c0de40f3c5f5fe93b2c10547e1345264aeee884b8a12097f584481d8d491ae3242c531c843de5dec39a6ef78d30bc252564bb7733e80d12ef7b9a59a6c93c4e5bf253536d7785d32eeaa6e789adb7c603966016d4f2a1a9aa69d844b5cd3d7988f64ee4dd92211498914895251c5d55342824cb18ad03aa0e54980b44e5ef193f1b41d7e4605447e393cc4c733da8eba0954657c692ee2128f96540bcf29e192a6e9387de80134478371639994586bfaffbf7c77fe4562ab9aa6adb006a49fe8a8a4ab5d18d79759d4dead83c61d9e02ff0dc9e78adc50c5a71d33ecb42bc53d8329c64c91a6f8570a6cc4c30dcb17b2f448cf88357f84bffe141e4e27b7070bbb222fb0f592f9e72788027e4b89a9b68a5186f3e4dfa104a63285de5412e14320ce6661e7d223fe92ceb542e8a8a5ca1d8b9c31070e087e641e9cc52728ea2903393dc04d01783d1310f63791aeb95d40ccfd5e7be70cc68e5699029bbce21ca16b93a369704b454adaad8f47e1d228c99e46edd7b280bca4777b4f3190991174dae534dacc9f105013920095261a0fd467ac07373a6f51680608abaada426c8cf54be746d47776779836b9147c266ff6451da63434c3349b777dd2310976007a7ee301df991f703b8da1980c66213f60a3af6ecee59b3f640d8dea214a4ac28877efdb0d3e57a2ecb7f2219bc177e88f9f281c8df4f9caec1e51dc4764aba03cf4451e3d02dc2f079fd2599458068a6e9bfbeef6f480c63dea5c37bf43a96010a76d661b25594e5b0509f7ad3741c6e6ca18349ebae8c12e9cce26117ccd2f4615829ac0072d4169529a44e99567f40bcc0fb125da7f179b5c75d975b8d2c7563d088360996e90bf6cbed7ecf0760b5adaac2b8f63f5091a067891867a6aabb8e869f205800baf262539bb17b04913c1bfe37553ee4010897436ce2f91c9339c04d0a7db5f249a81176bec746eb36b47d99fcff1a53a3925ff75369c0e8eb3e51f65fcf2dc5eaddcf8eb04d9af2574e88475af02ebfdd25c1d2ede71848128dff640160c2de43dcc7d751b919326d9fcddbd68ba47f8f75c71d81ade153ff5639dc834e9fced99785d61ae6d3867aa8066284253fe129ddfc1efc32432de8f2cfe241ef87136d1c4f4da705492e4996cd9963c57a1774f9d679a33a88e23212459bbe8cb86270cf8d02a29eada83711365b61fe3574f75622f133fb208b5c41ee1714f512839fb540e99de22fc377360f693ca27601d9455a4f999db3c1d661189382bb2279fb12f6e346dc254587c65953d2242c1cf557f56fdbc6fd93ca2e30731bf9a2439877758a246590a184147a83250dc8dd59563dc71e269ded8cd5eba2884b758b97a2d7017e5cc46bdaf152610d19f50056a397be8c5c3ba69543fecf6d09e16c954a085eb8480bc84e1c45a81be924f3e51e7a2577809c575698dc5e0bb22828f683db22dd30b1ae1fefd6a537241d06aff5b3b8e0d20307b745ab91c7e64c4c457af241fd98f64a5997abb31eb8e42b3291cd0498f77abe07319d84384dceb7030d94479bc789c16d3612b19ee676fd75120e6a29c6a8cef0aa32d911675fa35ede0cd04f2a8b27efa056d764598b1693d16b08a0c714d9aa4a24b1c4ce897afc42a46bf302c937195cecca32c16f313487a0cf405c2ccfb01da82cb26f0a5a442dd555d19118da17138a33e74ca116cb77ca611a34389274b6a9f39a84612f0ee837fcb10b51ef85df28fbe733bc831b954a709d323075b0fed781b0771c8889512c70f89fefbcd045700011bd75f94e409e2ab1835345312bad485473652bd81b2b3a07c237a5fe57eacc5cfc0a01665a3dc00c25a8e5ed898ba25f98ce7a3eeb5889ef63ef272a72a1b06c27099fb00ed6e29c9d9fe7b74424cd6540e1d6a47908227de624a30a8a212b3aaf803f30b11c1667059fe4ae37668c87ada3dd1fcecea71a26d897e483f3bb1418718aae1ff389c40252f186ce16a92a726e048ffbc4c32e401b60266b13181820f79430b4a510e5e484a09541c87364030aed3e34855c110e0d850ba3c4540040151178da00b28323e8c5ced4437ece2bb10b6048d1554bc30a1ed88463eb0ac26b74bbcac9feb16bb7ad4d0c7113f9bb931a7543dc57b81130b9a86ab6324e2a2772638368b2736c69ac112e0d9121720c574a6e8f3ebe23a6047bebea61eca155378b17bc842f6a3ccb95a60b219d16fab25b7941d9f6a2a898b2fc8e131c4e18a7c30668d99dd5e2a2a00c1b09de2c7ab8c7cafdea8ddc0a2cd325f188d9356f11d99084528439b406118059e23c8c7fbc79441c32172ce02cdb0d539ea036173c4b09f11bddd2fd01154a6df04abc68009bfe36f242dba3b63cbb36d8e8a1dcd3baebd10c6de96bd43e7688d392717b9e6409374eae545b12e44ea7b02c408e27117f81f4ecb97a34bf3abe0c05e4c0c89bb0dceb2e9818b2610cb51fea0f27c353953df7e7186b009958b8047a2f837aa62d2c38b275006358d16725d4acf21fceae5a3f92a7f6be32a8e5e9d6c4f47e8dd3c76aba43339f56b27b5e5caf8f01d01273f85d473cb98f5cd84c00f223ba7b6ca66f6250d4ba5b49bd1bc5d50cfdb7262df924a3d90ae02755e58ae81b33f0d9b9765c8d9d696d261a3df53d032efd99c5acdc6f9a84357e4339608062c385912be2006b09b67a8769ba0f5a9dde36d62aaa1fb64fe13a8f8d5e0d2dbd1e60b9ef90965b789ca6d87b6df5e555499d9740258110a0f2f43db474e23f61de89b932819d1f16bcc8d95d360ede1492157b86dfbfcb8df4ca016ac8f1078fe29af2b96f1179bfa9e1505f616b33d59647c65fbad623a0a7c72227649a150c717e710a1409bcea713a0bd45e892c6382d6aaf5b385908dc8a75c53cd87cdc1ebd9f673ea59274c04f1d12c121a51e7fc6d7c2c6b129b6f1da3750bcee9f735d70e0c0c8a96f603f07a3a50829f0ebf8ee262e67905515ee04051aa76e4a067c58227da6aec30d446887782679298d56bf30fff8770de6fb475a51e9875914f09e366860cd4d356fa44bfb8c5ffa6d9605e39db54f419d4ed28240d67b8ff7b82b6b48df9fa3fde9c1ea8f71e2927158ea3375812d0401ba0a9446c24fb62bc78b2bc758904a40a484a46698647fa96994604f67ad45b26642c309b35331611f4f9f7d1ac635ff1f5f4f5fba5590ffb9cbe3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 生存游戏 - 题解</title>
      <link href="/2021/08/28/LG-MC-%E7%94%9F%E5%AD%98%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/28/LG-MC-%E7%94%9F%E5%AD%98%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="86caf766b1e54d6fc2bfb7c66e1e5e6d19376aaabff53087e9f42522a0a9670d">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccdd0cc6955c9a521f3f73ba1ef23130e9f5a03d58ec0e875e9e1824f289438cf3f906962409f0e329246a5069beba33560c7f6bdbc520054c94d48bd9f2bb4434dce35499b678c7d9e31791423b881bfbfd3dedd8a159f847d37755d1a5ee3b0132b1920fa3058e5b9ab530e5936a235b2920707aa164bbb414a4d7b0d610a14929211f3e11cb138103e7069d3e7936888d72a4d4b319b16db76115c8814fc3e14a73211f38cbf48cd18775ad7cb5c6755053b8142040b5d446762f1a0a8dcf0c9837c068a3ae91b3c744a140657a00b5e5043f5e474b104e1237aca2e2e7315554024233bc7e7c05b0e6c7489ddecda13ea9539851c4b65162a448ca9ff6cecb7db3c6738b2c4fee1f8e7a509e0045850c615317546a24e928dd2660b893492ed01a50361bbb942e4feadafae0e23745ad19e8f9ebc8563bee2e9ceaf5a4d5184d7b01fd51ab5fbe6b181e8b2b2594f9be4d97d94da74bc1390286b7b08b33fef1600c471797fd6a65cfc4d2c2904b799d551317eff5624c224e013e3845edd225451fe462f1e047bb15ff35ef653fdddea21e7c3caabbdccb56bdbae5f94babac41d486e4dfd6c7d53b34a221d6e007c9f25ff43273f52e4af061f05a899027414c28605a2d388c4c490964048d9d37b4f25489b352f3887704abc25f43f250145db5f340a54458b6d864e1245bbf853ba582046b2bb2142cf46faa41d7a95fec576b943f86f9fff19dbd3493dbd0f2010386a02f9050a73f8e3ea5533fe6954ad012209c84a17e03eda2b1eeda237858b54585e7e3136bbe2c1f5236029caad6efa04051d7d7836a3c55d670e5965eff746d52c182ae648d359cf3214dfde5950e28a6437c2cef02911a956b5abb57572024ce80d9eb14d6c83edbcbaa477808eb3d44cf9e3da8486e76f915e00020691b34a6be26fbb101074b404d95200e76ffbe9b89bb17bb4fd784b6adf259f950e3d9e116c04e1bcca105a69cac0730fddf84245464281b832201b12295acec13764c6fa2b232ded9bc807240b81d6f6f97a21bef5e0913e11c9ee3a7de34bfd04f7b5b805073d68678bddf24772ce305f8d60d7ba1e08b4e6e7d7dfefb1d1b6dcfa52842b4f76142361fdb4d35f4a19f4524b3c3d58cbb06b9eafe735c722127412c32831a4c602a454f10234eeed0afe3e959e50b6ac42a16382ef3f8cfed63375eb4ea4798dac5d6e4f81baba7912da6b30923065c1b27c44de2d4c6192dd61e246390a87ed53f9293f470abb8d8bf95c59f9181dcf2a884e71c9273e652701aa9ca56212d726d264f70df923ec5bcfa7db082f89fffa6ba3b252fcbcd46d7657a2ae86d8b5b4b80fc1ff5916475ace5437073ebcfef02b2ff8f6b2d0e46e4bac54809dd56f34ffeb04dbc03d845af21ffa200c749408dce1445180ad6630ffb6157abaeed9b4571da26696f0b91c9e4820a49b4d56d74a15cc863ef56a4de199d0ac2275a5f8e480e77159774335e8e767f85ccde376a725fa05a0fbdfa511a205475e32fcceb4bebd77137cf2170e6d066549b4eac791632f203d875cd6167029c7ca2d62c6647b5859024262600792049f118d6ea4a4676768b77440d781fd312b13329f17009708c9b544c06137542a165ca5c35434ce30ae4f88ca527cbd790766ca973aaac8ab6816d01363a4fb7ab8f3d49ea913c4d7615d7e1b6998e72ebf8441ad0c7cafef3a3085b76e0c744f21dec46e69943a46498513e739248701528a7fa5234944d81a7f2901d3cb3052d0fdb3d86cd4df3c46524c6029126107ece7186e579823b781590d6f9d95a08605da37443fdc6110a96b0f34ccac9e7d0c65fc4c4562df0146622d7667563fd368877e181ce47702818c2c531924a01a7d8abd4787d340688417cc494ddd3c293856b1a9f30f9ca79bbe710eac4183ff2b4b9bc32fb0e51e4acaf285858936b46fa9f74f4e1df02d4dff9dc9a3dd4563c1609ac92144690b5e6b4c35517cc518e062a28ce25f36f243067a88addef1153a4fd6f3554416db7ccdf4fe6c316ff9a7ee03b39b5d299596556dce15da1d90c4ba9f3b6efd3b943a318982b91388d1be3dcc5ee2abd7ff328e8f7b4c3c7ae1d1f8b11f624c45cd2766f510df65af5cdae8ea72e42f33442cc5ff0aef7fb423e32879c0a14c31e7af3477e5c06cdd5513d09e7482d560a1545dff8069d05184cee29947b7e1817cdae9557d576b3789badcd408aaf97717ee2507fe538be2092ac39120609088eb64e1d78547fe0911fe0ba328a9927c59822219634c5fc04642dae5cfb6ad9c3430f56f20181c0be4c1109fabc6c5dfac2deaea1ef3c085e803fecf2ea57694555bc8ddf1b45d04d122e6552b56ef01a7c58bcadcc3a10163a063afdb63cce4cca8ec49326256e69e065acaf9e73c67172d72117ae5a48919339ca09641471e45aaecd726a8d341a078eb37f78e06c4899ca7f883b724a07baa30f84b11d8ef37c4cd5cf9fb2cd55fc55e93a8bb9f96efbf294b999df117be8802a2f1d3fd917ad6d53a9c9c5403502438315c2fb59106417eee0348ffc0e91eaa9201964c327272a00e8d64f6fd86dd2fa1fe3f86ea16821584c95472cac9e50ce188e38e96ea1816892d273810b16f93c5aef007045684f9539719ecea98aa86f84d20f4841260b3e41a599236f7ceda468b582c39ed8605e3bb57e940503be11f62bd9932d8e58cd573c61173cb2191f851dcb5282b0d885738bfbc30a32ceba3db3b4726adeb99773a3dfd9e57ac2b51b1aee8bd1ec80c93a4a4d6d7b60af33ab8ffedcb01091e14fc1cea0f4d315b8dc387a24996712b7277ca04f0be3f7a57ae6fbcbc043803b9749261ab0b4e7ef6ff4ab80eaf6f5a6d30d8b1c6403d30d1d5abca182cefd0542e0d6d61a6e646e3c35ab6b5dcc4cfe249bd0f1bfb40808f68e081768c19f68b6158f7acf360d67069bd0cd939f62ace1be0ab1fcf8380cf74bea70ab32f1e5eb4e48fe9bf59c5691481def6b0616cd969af2f97daaf69857749763fd2fd81b68f7999332d73efb72c22c4547a21e1bcb57787afd497527fb26bccc27851357514e7298a2806df9cd8a9c9eb677534e06c8bbbd33b9c486d54ba51074889a591a75783f180302032042523adee8bb6796673ae1b94a826fe6842fa70df1f4062419caa05ca284cccaa5a61e0ddb62644bb2e63024e9c1f1c5f56b00752adb1db75bafb22b3be9986b354ba7d6d9cb13306807182f20ab914e61fcd9c1f5c898276a121dd744ee6fbcae241cc51e62a788c44e9c50de0bab982025bccc84263298bce3008240fe91c508b5fb8ed4f94ef60b82eeeef9add28dff21b2c868185feef6f7a28a9757983c1af3332c4286d69b533ce8ce86f8ea7c6f8ed81975474edf6181b82346f640f12c727720f0fbb8f09a8aa822eb0058e4bb45b1e54181a3cae3bf39054a24209f8580a3cfb23dea76a032c29c1af26534b8aa507e2f35eac033564c4f74ca099d6fa76673439af0d56e8e73ffb709b63d6c2994d64cae4f17ac491cb3425ab7be4f7ade6594ef4d8ce8b29955238fedaaebdb3e05ab9ee168e3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 爱数学的 ac 做因式分解（弱化版） - 题解</title>
      <link href="/2021/08/28/LG-%E7%88%B1%E6%95%B0%E5%AD%A6%E7%9A%84-ac-%E5%81%9A%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/28/LG-%E7%88%B1%E6%95%B0%E5%AD%A6%E7%9A%84-ac-%E5%81%9A%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="b95239969f8498db641458d098635eea21f0d1ae157b6a63715da653a39a483d">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccc8bc78212f166148a4c68dc108945a7c79725a479066f905decc7a749329571881c1336b6be3dc0496716d8c66692d6d4ae73ad2e0bf0ef41ac9837122e6158b16636161662a38c6156c76cc7c5db76227542f050840f8915e6677c92ade7f031c09e5ba8d8a435de43994cc28484e52e51453ae052dbf10da1c6c66e071bb91d157b5960b031d8e32d2f4a085473630c8d1aa7902f360f7f9b81cc1bc7bec51b9d063be1f31e14f05bcf4e0c5ff65b299d889f648c02bc47f9bdce84f030e19a32f128fcbd5ba4219378b66bef26a3e4be4a963487274fc448c9921bca7a8c03e7131705731a8a1f25e3e556172ad880d5495d8fd701cac14cb537c6a4cbdbd0f6acbfc427684887f2f29179d1fa1cc11e165e4671a30c5c374069137147e2d9dbb28c44cc91f76d005a852c967a58920ec1b2f1b89b3720f109a9e50ccc2309ac5b5cfcf4d50b91980aa6a03ec5060b43eeff758b5a0e19c6c61816cd534d1266de96f0e291a97888f34464b137907c6841920e9126cf7b19674818318c206d389ac83ef1267c69180405e95ed1a17d7b3957d7b5ee178fd1b1960cafbda46fbdcc8a5990bc52f3d9e42841995ce6acc004462e8708aa5c633053e5e83ad2939692ad068ebca044bd138caa960bd8fa8361a24c435cc160704065839c7d05a67934e3b469bf8c4ff3861d6e3ea60b319bcdb5837ed8426efcbab04154f90e97cde6c965adf2f023f4fc70edce0b2c5bfec46f875857b122b46a4feb3c1218807ee22e494d90a133d17702a455bdc3d45275c6f3d3709ae7b681a3ff55976bfc057dabe6d1bbfc9ff76ecfb26e49fc6a6a4d183737503766b81c0c72635d132e1ddb769591521e32caf594dc91ad10f700b86460bdcd80f9494ec62b4ca01bffc7fb718f8348f9c19e928b81a3df8ad79789e091a973d8cbb7a5785bd9bf550d653c7dccecb8e1e17b87bc84c70e95b8e373c5cd2a2b83549c894f3b4040d73ed0addcdc7a4067727514b96f5fc10d4a4fc260e88b2021f016f21916af4dd3b44475b081b92c02707f3d71ead0f3e091f2b2fc70cf0aabe5efe9d206ac92b7d8db756ec20cb66f50a624812d7db5a9516c96f37a7f0cae10733c2911ee4337c9d4bd4d4e3d321f73ea0085e98e75c72925566d0506b76b6b97829049315c668ae08cba635c74aa0f2d4483032e4a11fdef8d0d720afe0748ec61b94d3e6197092a2ba828ebace42f411bfac5f2dff9b7740f982e7606ec0780e062bd41a58d0d1ab7ef891ce9cb55fe0b3a1f2108c2d19d75473aabf1f0e9a3aae5fe94ada37591ba30b45fc256d2c153c52e91499fb609ac3733804e1507ed4a7204809bf5b96348e571953c1ec0e6167dc38dbe1a977ae2cae6305caa4853fff9e0db840f296164906689fdff547e4831ed1d57278c78c0dd55ecfd3f4f7cd3ab36047aa28b0293421300b695565c78845090c6d27fc2c22dba558993dbd4d256b9b00b92313181a88f95919520e9409656bcbbbbac3e5f4a5d581d07dcf851da883c2d28f21bb81349d3bae86f92fd9376bca8da4628ec30b3ce82ce58b51bb49264cbb68b84adf38935ba239c24a6806cb4da8c1bba082ffaa69d07651359d2e64e82e76690ae8005d48487eaaf1eeec79efdcd591e992e8d1329c2eaaade0271b726b88de81af671687dabedee0b8d23aac612d38e2535a686b71d0deef7e26d2c7e5d7131685e28eaec4ee8ae584e5a64fea78423dbb8e40ac83945b6cc2f2457e7cbad91f072808b094a9acc187de7a06fa5014163fa31a21e83b91d7d7fc5c74d5d529d281387391ca76914f0e799c8f39addd4f7c70c5e2c358c403832efcb1df36087e75669c3147e99308a4e70ddc43b3e137a0a01107e303d8f1a2699e8643e6b4d31d45f61eb57a2cf1120e78fadbc58c665d6bb80728034798fd7f5d90053a234c5390f301eb90690fb9195198c5ad54de9682797ad6c8bdf16be0efaa5c007a8473c9c977a73e6565bc1dff0fd7d446a64c323ab6a371990276451c706d50b885def537dae3dbe4bde661b8974240bddb1d0830b6c687262bd17641d51f0c95c11f5769acd08041e830fa1ae05ff109c7ae15e88ff62cff343a6dbbc7619ae2b1ab6f721e6b6c1609e93d20ebacdbc0a2cbef49484d07f5597ba64e79131671bfdc44194dbb7b681b3bc4cd39af1c780598bc1eef9342bd09de205929729338a313a8f67e91986a76afcda99c19fa44d871d81bb432e48a90048e03d936e426db2ec2f2caf9887b5622595eea87c739761c2083c735bf4734ba4a42130f00d24ccdbb535399783256ad852c24164a71f9c7d0d7ec2f8fd734e0e5b0660dd2a56b40dee72d7cbe78b15c7dd5df16b44d059f4583c021f0d553795bd3bca9cc2825d3afbdc3242f31c4eba3e45338bbae2ae4fd09bc2bdc25adbbb81ea58542f88b00dab40cb8f364f308582e02cf2b8b59d7acdee734f5f679656b6bb76f70b433add129f86580ec4d3b0d472317253f2e3c3dcf41a41190dd39efb5947a55e9f643537077e9992b9af502a63e160240714ffad2cf6f1f1e4babdcfacf04ad0a78b5356657832beed3b85f33362e417ad5968911f7e3cd705c476e81ab2b75b121238a628aabb494bb8e16c43abfd5ac9c081f12bfee8480f47f1105a419058c78170b3023279a9d6c21c2de8b093d59aae522935fb8813bd4ebe1194ac4206f0ac14c86581ef4941b1e474c720e76a0eafeb26ef19f180400c13ed881ab05fe9007269b6f32ca032d650b6503274b3ed6e9cfb11db973cfea73850c52aff8fb4e48b05aacee4a0198577eae1d30000b049735e4e2836b3ad8ab9526d96b42af57ce649763b9051f4e9598ef7660af15d4e0d59714540e2f2f32c39226a13914dab22b1694b8b67c13daca46e8228e960d50376a5d89f233fed9a95059dc617571a0083ef1700be014accac7a1117942f07e7316125ada45f2f3e1ccf49e5062f7d9774678ee747ee92c5eb6252b98271af0affc1c1b98bb3aad6f52db0f06d3cfc8255a91670d98d62877feb169e1a37c211e429edbc9596e6e838a219da33236c7b22fc55bc45306b067d70f692ddcb7788c4d28118de7f62f28a65b23e3cea7d189b54db942abbfe70224c1cef23e4d3d4bf5cc61ba192ba1c58c606bfde46ba7deaae8e72218d2b3455755ec8e1cea711eaa737d22793addcb15e55e23dcd19c774607b35f0dd96331f2d5a4d04e6f05897b2f5ea7340d57ca8e62acfa222b6c60c3c1e53847b7c33aadd92be19a7f332cf164acfe28db1d85d663918d9c6bda279e752ab7fb1948cdf091d182fdcbfaf7e1e0aa5cbec9d9b92e693344d0638617173c7d37d307bdf9ea9ae856bfcc654cd993f63f0a7b2a0c00db34b54dfd399668d68c294eaab2bbc99bb409b3838c03448a2dcf5100a356149e6806fab71b36e33dbd388482ca4c62d4b4504f83f3b69215844cc37fb74c1519266f94fab525a768ba0d3540ac83be0d202dbd8cf20c0587a8b62d024e90a2a79be2da695112f209e6459c8ece3f54b273a28394e81b4d13d15a1b8e74a5e032c3e170c806d8c7544d30e22ac798a5b25173fe063c22e020ab000e86d4c43f1ca34d545840f030d6bff692477f26a69286ed00eea87fe2193bf2e04a783ab6ab3ec39f04db2f375a9d0d020f34a5bf98d5c2954a4c0f81528ee9ff633afa74621f3a6210ad5c72d17170cd135b957209c728abb7acd33bd15038c61ac3751ddacd9659601a89c982c37a76aa8aac5b5421235b1e71e9f5a1ccd3f15a909a6be488d09e66a8337364a0ffec3b0f843af0db74a1f2cf7c430c668b3db311fa0d1bf3d00b45f057256741401bd13155b6ac2913c1ff223cf87029e0d05dbd6def08032aed5849f90c1bd924df925a0c40aa5695f39474aeadebeb26d4d48b26a2e082a13a7d56f5ed520ae0827b42d1092d01da03cb739f284ebc4093b81e7b64b56f50625c4f8bf5764bb9afcb2ade0c00081ec25325ff02169a9f4bb1255c485de8cc12a92fc9fed311df1a9fcf1fddd872e72d3366dd8db5d618c72d03d8f4c9f70de9c71d89f068a2f62343a2aff7d2f08d06c49a93b112d75bac896d52965f3cfa3fb485a9f6e48ac77bfb9b0fcf7eaf20778e57447374d5289c37f08eb1d139ab96ca6f2a20079c4bceb0ec506fc2bc26e6d0376ffdcb1cc64fd69313b3c20d4637f8b870eaa77bae3d2e8adf7bb70133fa051d1e0e7316ed52c8253a24f0e281</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 FTQ</title>
      <link href="/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/"/>
      <url>/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在管理员账户下的 Windows 10 中有效</strong></p><p><strong>本文章可能包含敏感内容，请谨慎阅读</strong></p><h3 id="前言">前言</h3><p>标题中的 FTQ 全称是 fotiaoqiang（佛跳墙，<s>即一种名菜</s>）。</p><p>那么个软件的用途是什么呢，在 OI 界，这个软件是我们众所周知的 <strong>VPN</strong>。</p><p>用了这个软件，就可以访问类似 谷歌、推特、油管 的网站了。<img src="https://xn--wcs.tk/5" alt=""></p><p><s>以下纯属扯淡</s>：</p><p><s>你听过佛跳墙吗？只有1%的人答得上来！大家都知道，佛跳墙最近很火，究竟是为什么很火呢？佛跳墙到底是什么梗？相信大家对佛跳墙都很熟悉，佛跳墙就是我们每天都会经常遇到的，但是佛跳墙是怎么回事呢？今天小编就带大家来看看究竟是怎么一回事。佛跳墙最近很火，其实就是因为佛跳墙在网上火了起来。大家可能会感到很惊讶，佛跳墙为什么是这样的？佛跳墙究竟为什么火起来了呢？但事实就是这样，小编也感到非常惊讶。以上就是小编为大家带来的的关于佛跳墙是什么意思，佛跳墙是什么梗的内容。关于佛跳墙大家还有什么想说的吗？欢迎在评论区留言哦</s>~</p><h3 id="下载">下载</h3><p><a href="https://xn--x8888com-ih6mv89w/#%E7%94%B1%E4%BA%8E%E6%95%8F%E6%84%9F%E8%AF%B7%E8%BD%AC%E6%8D%A2%E4%B8%AD%E6%96%87">官网</a></p><p><a href="https://ren-yc.github.io/assets/FTQ/fotiaoqiang-2.7.6-1.zip">本站下载（不保证最新）</a></p><h3 id="安装">安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行。</p><p>启动时由于需要设置代理，所以需要管理员权限。</p><h3 id="使用">使用</h3><p>双击桌面上 $/$ 单击开始菜单上 的 fotiaoqiang，提示需要管理员权限，点击 “是”，然后在默认浏览器里会自动打开一个类似 <code>http://localhost:端口号/一些字符/connect</code> 的新标签页：</p><p><img src="https://ren-yc.github.io/assets/FTQ/final.PNG" alt=""></p><p>点击 “点击连接”，就可以愉快地使用 VPN 辣！！1<img src="https://xn--9zr.tk/gx" alt=""></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/">https://ren-yc.github.io/2021/08/26/TLS-如何使用-FTQ/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』LG - UVA13012 Identifying tea</title>
      <link href="/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/"/>
      <url>/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>太淼了</s>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int t, a, b, c, d, e;while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）int ans = 0;//计数器if (a == t) ans++;//判断if (b == t) ans++;//同上if (c == t) ans++;//同上if (d == t) ans++;//同上if (e == t) ans++;//同上（草）cout &lt;&lt; ans &lt;&lt; endl;&#125;return 0;//完结撒花&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/">https://ren-yc.github.io/2021/08/23/『题解』LG-UVA13012-Identifying-tea/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 愚公移山 - 题解</title>
      <link href="/2021/08/23/LG-%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/23/LG-%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="dd7915d3d2e1fa03939f5f91bf8902011094163b6c33d91aa6d27b1ab382776a">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccde8e7bf39cf21058937676cda16fa723b0b4eb38a7fb1846cc94a68a94069eefe834a9452b7de6ec3ee553fafd36141d7979976d973159aa889cdb2010bf7e4bb7446a986fc4e29d30a0460e9a122e8f7e08b69d883319a6d6f6aa2804362ad9177acf1e4f35f489539fb9b93e407c02ed22470d5fdd5775f01587da6cca46420317d2a10424efc74172838b0112f0c87c9c7844bba0fb6da0981dd8b77c4e4bee702de250ee85daee22a2dfd8a427c9a3e46ab3fdf83cf22221c9f18e20343825f916a020dd7ec0784d72605f65db1eb93159f3c01ab79e00ee16f0b36d3be30a7f25e4b7e96fbfdc3299104c05b6e4c332b6da97fcea0d98dda4cef9eb3e0dc2c8fad3fbca16c9051dd5712f95fb57519af770be44a65c6368a28f03f2ccebc1a02bf581e9f1a4b739c90839f7c94a5bc6bb9713d702681945e5d0ccf2482166e8c05c25885abb035c0c95487573794132ceb8384760ed472433f507628b213e570ad93f089d77e1db87d43f73a680762336dab33f6888814ebb63858a38ff9c626a14ae1b3645ac533caa16efd0df93e645f834a7b182d6749e3549bfa3d0e06a3826628519d809fc24136480460fd372dfdf6d53039d5d032b137513d4db5d440df6a821bf4c74739cb9467097d2f649aa7d7f0211289011a22d01e61e37af890c5f380f2df4f89cc3a5c252b7c228cd9ed9c7d5170a6709cc253f64ea913adf6ca16b583cd41be1a6d44bb0c807ee21aaa56f9b54c40ac25aca07cf9d238bd2a9ccc2c3b43ca1a34a22be1077fe5926db61d4ad6fb596e0aad32a030b35663b099745814f2059564d19e43790a0a18d5e1e8b6c78a91a218aaa5b1bb4b4d43ee4edd971bd88fd6baee200c73749c90df4a932deb15cd03e513a8c4ca20e37679d8e7bc33fd43f1c17e427bc243b596c5d57c3e2cd2485769738772c2e22fa2d0116831ce07a458049015320f31a993d30981dcae5851747bccf18790d11574a80cad1a999272ab1ad246e58dd795fac384f71c5f12d17aea0e6672af0f868bae3f3189beeb61fd3b3757b01b2ed215593dcb18f34e677b3d43fa1ff43654de6fa46d21ba0302117b236e26c256b1f1bf5d4b308269a8190badc0c9e1ca9d2147506a68f754385eb4a275c429b2ab44a1cc317c462686c1e61d7bcbbf1c4ce83c7059f53f525a247387f01dedb66900a616651e4cdfa24b8ee8150178fe17bb640b2ded9631c0cdb5c6dd61430164d1047bda69fcb1bc5f8ab544afbcad658d4a7468ba4d805e4222d32a83bdf7a5e564e376617fb5bdc06cc3b7f7c366e2f9cd1f59dc979b9a507df78ca2bcad4f75c490033af95cedc80063c088a82946cd3a141244e8f2fb21b05045273cc4f943812fd2711ba480b7f610c9957cb2d66b2235c0a4fb056a68ac093bb44393f4f0390e1227f74db150c0bf786cb924954eb27dcbae0c66c218b9970dc99be404ec0d299421524722dbc5bb79eedfad1c5abe42103aa42f482acd8eeec0b77e227a79b1f84bc8ffc746652167c9ef1ff81d962b38bcdfbe5feace68f9aacf0caecac34ac9cb9e8fb7f926f11e2955273284a53823ae72d126874ab4819014195dedf4464c234f716592381ab77ff403256e2467699e76124b87e418234ffa4615bf8604618196f53cd6a0645174fc224ce7efe6f1642bc14f8537bb2bb42cd93617ae4fbc0c204a0f73198d5ac69457020c0c87c28ad6c067c66a0be76ff55a6a288293f4ae45ee995fe733a95236eb7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 听取 WA 声一片 - 题解</title>
      <link href="/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>膜你</s>模拟题，要判断每次枚举需要充的最大值，最后输出的时候一定要加 $1$，<s>又不能跳 $0$ 格。</s></p><h3 id="代码分析">代码分析</h3><p>双重循环<s>膜你</s>模拟就行了。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, sum = 0, maxn = 0;string s;cin &gt;&gt; n;while (n--) &#123;cin &gt;&gt; s;for (int j = 0; j &lt; s.size(); j++) &#123;if (s[j] == 'L') &#123;sum++;for (int k = j + 1; k &lt; s.size(); k++) &#123;if (s[k] == 'L') sum++;else break;&#125;maxn = max(maxn, sum);sum = 0;&#125;&#125;cout &lt;&lt; maxn + 1 &lt;&lt; endl;maxn = 0;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/21/LG-听取-WA-声一片-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Killer Queen - 题解</title>
      <link href="/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>深度优先搜索题（<strong>DFS</strong>），在上下左右都搜一遍就好了。</p><h3 id="代码分析">代码分析</h3><p>先全部读入然后标记二维数组。</p><p>然后上下左右搜索，如果两个棋子重合，即 $a_{tx,ty} = 2$，则输出 <code>YES</code>，反之输出 <code>NO</code>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int t, n, qx, qy, kx, ky, tx, ty, a[1001][1001];void dfs(int p, int q) &#123;int k1[8] = &#123;0, 0, 1, -1, 1, -1, -1, 1&#125;;int k2[8] = &#123;1, -1, 0, 0, 1, -1, 1, -1&#125;;a[p][q] = 2;for (int i = 0; i &lt; 8; i++) &#123;int xx = p + k1[i], yy = q + k2[i];if (xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; a[xx][yy] == 0) &#123;f(xx, yy);&#125;&#125;&#125;int main() &#123;cin &gt;&gt; t;while (t--) &#123;cin &gt;&gt; n &gt;&gt; qx &gt;&gt; qy &gt;&gt; kx &gt;&gt; ky &gt;&gt; tx &gt;&gt; ty;for (int j = n; j &gt;= 1; j--) &#123;a[j][qy] = 1;a[qx][j] = 1;&#125;int k = qx, l = qy;while (k &gt;= 1 &amp;&amp; l &gt;= 1) &#123;a[k][l] = 1;k--;l--;&#125;k = qx;l = qy;while (k &lt;= n &amp;&amp; l &lt;= n) &#123;a[k][l] = 1;k++;l++;&#125;k = qx;l = qy;while (k &lt;= n &amp;&amp; l &gt;= 1) &#123;a[k][l] = 1;k++;l--;&#125;k = qx;l = qy;while (k &gt;= 1 &amp;&amp; l &lt;= n) &#123;a[k][l] = 1;k--;l++;&#125;dfs(kx, ky);if (a[tx][ty] == 2) &#123;cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;&#125;memset(a, 0, sizeof(a));&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/21/LG-Killer-Queen-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 李白的酒 - 题解</title>
      <link href="/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="1732d01fba6bb970cc72da49331a7093dfb46c6184aa790b36230336ef31eb7d">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccaa6885f8ac6b9c2096f2c5720d5e1865029b59918e662b9c9e69486b6a57a36beb17c3547dca7b8249f343835aad2a0ecbb5f0dcde69fa04353f23ade5e013efdd8d3526ff60268dc4e2fdbc0607f59521d76f4d057c1ea7d5028393c81ec4288f8728ac16b5ecd974c02afde78d9aab6eafbab735f3b91b735ece1e0766fb4d2c87f56ea35898d1a7ff3d140cce75ca1347039a32b1b1e95e8867d09cd250353afc4a2ce9a9799acae1a359c614a539047d7d0e7e5ca7008ad6d7f3c83fc4d373c224a42c109f9d1e1f00b4d74bd6f91674738215b0adc138f6fda6c86e4eac9296d049b06b238990701721f22b2cc1d5c8e0cb8e4ac07bfd4f4f3e4dac577ed52671e9047bfd6e7c2b6a36f5a3c23be096db18459b9a759c69f135e68c51ebad025d42958d24b38b8707f6c8e125faf0277038ff58458e39edc1707248dfabe3984ecd821f430a629fdf2d4cb006425fcabf1999f322e757edbcb023b291632bc0d9400e218aee4b7700b1d3f4db92dcf4b6f53a61f4ab6e0213b0aae3266a0e2a0eecb40cb07aee2d8769f4eb29573d0bbaf7c6d97db61d5aea9a49b8c0135e9e1c9ee0843f9c3402c8d6690a7aa6e90d1673acf6f37f935455a57547f86c072b8efff5d8b805369ffacd8fb906b3a10a068f4c3f46dc80ef89cc9f08282df0782da5a0e4ffae29208e4b0374aca7167869516da14e8f33d038189401fa06bf19a4b53efa76746ba8fd83b1110408f5b406ce94f6fde8d65d4a1dcd9bccb98e4a95f08d4b24d2aab70ceefdaee2cae36dcbeb30ce73998225c067b9b354ee1b864c83c3bb5476223e5950b059db57cd5b6ffefa833598175a41370ae73b7e7120f80fd02fb50ca54b9f0eab0c8bc821b7a89c594124d769966c459ee5ac62e10794cc2d88c4254a9635f223b76fbf4850733f6e015dc39f39849a1910d65ca7833110bac363859e29817ddc54407e3472a946f719ec19e93153c9d31df2d0109d5bc7686788903f61b69124028d8aac206249a8ffde56a34d412841915e2bd799afefabfd434a949ca5d111f993a6020e20ee7aa6e11355efde68ccfb2e55d125c7bee8e2388ec67366a708b2f066d3053ba72215f9a49c153e2c16e0331100d7a1fb90d51807ca81bb29e8ca1564bd1089ce5dc5e237a66a324662a521146ba22b6b93e7ad3bfc114c952be23f72d9c618e8de5886766c2884174d51e388571579e96f98582fe9fd6bda19192bf59d6dd3ea2ffad2eac1e23fa080de53d5b2b484e6dfdd05d36836d57266a47770d32e9e9f4f259516255e8daacda45171b1066da1e0d4563cbe8d7fd16a542c0b38766db7c4eaa4512fc4b9620a7b04a705e053037010ce8f6699953b9dcb446f1d5eb7ee9c392fb5615d6852cafd7c8af4a473a3f8e7abd2cadffdd51863b64f05cc949c53da5b81390f51ca42b801dd2861b90e203916e03f0116be58aff9d81054d990a668d156577b9efbed93d4857a8c5ddd60da3c30f8bf651b5b69e2051d10bcbc70a194b758a68d0a67d5e70a434aef991b93d57a775b537f0bd9b342a674fab4ad074263c8bbd9f87011c422896eb29b481c1f858a6d94c214f0286826645ab273bac9095d51da156a540ed038cba07b2988534cb25601775d138c79c9f60df5f998b3091ab70a83d8b2baa61af00aae09870d9c82eaad9e861339ae61d9a497183fcc1e4f769fd955102f7372cbb668549fd65f1d13494b1bcecb28</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 满二叉树 - 题解</title>
      <link href="/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>满二叉树板子题。</p><h3 id="代码分析">代码分析</h3><p>三个 <code>for</code> 循环，</p><p>第一个用于计算节点的数量，</p><p>第二个用于初始化树数组，</p><p>第三个用于模拟。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int k, q, a[10001] = &#123;0&#125;, p = 1;char s[101];cin &gt;&gt; k &gt;&gt; q;for (int i = 1; i &lt;= k; i++) &#123;p *= 2;&#125;for (int i = 1; i &lt;= p - 1; i++) &#123;a[i] = i;&#125;for (int i = 1; i &lt;= q; i++) &#123;cin &gt;&gt; s;int o = 1;for (int j = 0; s[j] != '\0'; j++) &#123;if (s[j] == 'L') &#123;o *= 2;&#125; else &#123;o *= 2;o++;&#125;&#125;cout &lt;&lt; o &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/14/LG-满二叉树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 IDM</title>
      <link href="/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/"/>
      <url>/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言">前言</h3><p><s>众所周知</s>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><s><em>我很严肃</em>：</s></p><p><s><em>IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</em></s></p><h3 id="下载">下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装">安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解">破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 主目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p>方法同上。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” – “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://xn--9zr.tk/gx" alt=""></p><h6 id="若破解失败，记得在评论区留言告诉我小编哦">若破解失败，记得在评论区留言告诉我<s>小编</s>哦</h6><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/">https://ren-yc.github.io/2021/08/12/TLS-如何使用-IDM/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四篇关于 chen_zhe 的美文</title>
      <link href="/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/"/>
      <url>/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="壹-chen-zhe人">壹 chen_zhe人</h2><p>那是谁 是谁 是谁</p><p>那就是 chen_zhe</p><p>chen_zhe 人 chen_zhe 人</p><p>背负着暴政之名</p><p>抛弃了一切（指民心）而战斗（指禁言）的男人</p><p>chen_zhe 代码是超音波（形容很会卡常）</p><p>chen_zhe 之眼（指管控 OIer）在洛谷飞翔</p><p>手里掌握着 恶魔之力</p><p>正义的英雄（</p><p>chen_zhe 人 chen_zhe 人</p><p>开始知道暴政的男人</p><p>因那紫名而觉醒的男人</p><p>chen_zhe 禁言是迫害之力</p><p>chen_zhe 之眼透视一切</p><p>chen_zhe 劈砍肋骨可断</p><p>手里掌握着 管理之力</p><p>正义的英雄</p><p>chen_zhe 人 chen_zhe 人</p><h2 id="贰-少年-chen-zhe">贰 少年 chen_zhe</h2><p>明亮的机房中开着一台神秘的电脑，旁边是一个题库，都存着一望无际的 chen_zhe 做的神仙毒瘤题，其间有一个十二三岁的少年，血管里流着网络流，靠着一棵平衡树，向蒟蒻的 lhy930 尽力地踩去，lhy930 被爆踩了好久后却将身一扭，反从他的胯下跳进他家的内存池了。</p><p>这少年便是 chen_zhe。我被他爆踩时，也不过十多岁，离现在将有几年了；那时我还没开始学 OI，也很 LJ，我正是一个蒟蒻。那一年，我家是一件大比赛的值年。这比赛，说是三十多年才能轮到一回，所以很毒瘤；正月里做神仙毒瘤题，题目很多，数据很讲究，做的人也很多，数据也很要防偷去。我家只有一个忙月，忙不过来，他便对父亲说，可以叫他的儿子 chen_zhe 来出题配数据的。</p><p>我的父亲允许了；我也很高兴，因为我早听到 chen_zhe 这名字，而且知道他和我仿佛年纪，是个神犇巨佬，会做和出神仙毒瘤题，所以我们叫他巨佬。他是能 AK 所有比赛的。</p><p>我于是日日盼望新年，新年到，chen_zhe 也就到了。好容易到了年末，有一日，母亲告诉我，chen_zhe 来了，我便飞跑的去看。他正在机房里，红色的圆脸，头戴一顶小绿帽，看上去明显就是一个光头。他见人很喜欢嘲讽，唯独嘲讽我嘲讽得最过分，没有旁人的时候，来嘲讽我，于是不到半日，我便被爆踩了。</p><p>我们那时候不知道谈些什么，只记得 chen_zhe 很高兴，说是上洛谷之后，做了没有其他人会做的毒瘤题。</p><p>第二日，我便要他做题。他说：“这不能。须有神仙毒瘤题了才好。我们电脑上，有了题，我开出一块内存池来，用预处理所有的几亿个数据，打好表，看输入来了时，我立刻地将我预处理好的答案，只一输出，那正确答案 $0$ $ms$ 就输出来了。数据结构、字符串、图论、DP 什么的都是 LJ 玩意儿……”</p><p>我于是又很盼望有题。</p><p>chen_zhe 又对我说：“现在这些题太水了，你夏天到我们这里来。我们日里去网上虐人，lhy930 也有，kkk 也有，tourist 也有。晚上我和爹虐全场去，你也去。”</p><p>“要加文件输入输出吗？”</p><p>“不用。我的程序可是非常大佬的，可以自动判断要不要文件输入输出。要管的是卡时间、卡空间、卡算法。洛谷上面，你看，月赛开始了，我要 AK 了。你便写好膜拜之语，在犇犇里发出去……”</p><p>我那时并不知道这所谓月赛的是怎么一件东西——便是现在也没有知道——只是无端的觉得这肯定是神犇巨佬才能参加的比赛。</p><p>“比赛很水么？”</p><p>“有我呢。开始了，看见题了，我便 AK 了。这些题目很毒瘤，要用主席树，还要用模拟退火。但是对我来说都是不是一点的水……”</p><p>我素不知道天下有这许多新鲜事：竟然有比 A+B Problem 毒瘤的题目，而且竟然有人能够 <code>AC</code>，我先前单知道我连 A+B Problem 都过不了罢了。</p><p>“我们 CF 上，题目要来的时候，就有许多人喊着要 AK，但最后都被我给 Hack 掉了……”</p><p>阿！chen_zhe 的心里有无穷无尽的稀奇的算法，都是我往常的朋友所不知道的。他们不知道一些事，chen_zhe 在 AK 虐场时，他们都和我一样还在颓 A+B Problem。</p><p>可惜正月过去了，chen_zhe 须回家里去，我急得大哭，他也躲到厨房里，哭着不肯出门，但终于被他父亲带走了。他后来还托他的父亲带给我一堆神仙毒瘤题和它们的 <code>AC</code> 代码，我也曾送他一两道红题，但从此没有再见面。</p><h2 id="叁-chen-乙己">叁 chen 乙己</h2><p>chen_zhe 一上洛谷，所有做题的人便都看着他笑，有的叫道，“chen_zhe，你门前又长出主席树了！”他不回答，对老师说，“开两台电脑，要一堆毒瘤题。”便排出一堆 <code>AC</code> 代码。他们又故意的高声嚷道，“你一定又 AK 了人家的比赛了！”chen_zhe 睁大眼睛说，“你怎么这样凭空污人蒟蒻……”“蒟蒻？什么蒟蒻？我前天亲眼见你虐了 lhy930，吊着打。”chen_zhe 便涨红了脸，额上的青筋条条绽出，争辩道，“AK 不能算 AK……AK！……巨佬的事，能算 AK 么？”接连便是难懂的话，什么“我是神犇”，什么“lhy930 是蒟蒻”之类，引得众人都哄笑起来：机房内外充满了快活的空气。</p><p>听人家背地里谈论，chen_zhe 原来也做 IOI 的题，但终于不屑于再做，又不会出这种对他来说特别水的题目；于是做的题愈做愈难，难到我一看就吓晕了。幸而做得所有题目，便替人家做水题，换一道神仙毒瘤题做。可惜他又有一样坏脾气，便是不屑于做。做不到几天，便连人和电脑程序代码，一齐失踪。如是几次，叫他做水题的人也没有了。chen_zhe 没有法，便免不了偶然做些 AK 神仙毒瘤比赛的事。但他在洛谷里，品行却比别人都好，就是从不拖欠；虽然间或不屑于做洛谷的题，暂时记在任务计划上，但不出一小时，定然全 A，从任务计划上拭去了这些题目的名字。</p><p>chen_zhe 做过几道神仙毒瘤题，涨红的脸色渐渐复了原，旁人便又问道，“chen_zhe，你当真能 AK IOI 么？”chen_zhe 看着问他的人，显出不屑、鄙视的神气。他们便接着说道，“你怎的连洛谷的题目也不刷光呢？”chen_zhe 立刻显出藐视嘲讽模样，脸上笼上了一层红色，嘴里说些话；这回可是全是“全是水题”之类，一些不懂了。在这时候，众人也都哄笑起来：机房内外充满了快活的空气。</p><p>在这些时候，我可以附和着笑，老师是决不责备的。而且老师见了 chen_zhe，也每每这样问他，引人发笑。chen_zhe 自己知道不能和他们谈天，便只好向蒟蒻说话。有一回对我说道，“你会做 A+B Problem 么？”我略略摇一摇头。他说，“不会做，……我便考你一考。洛谷的深蓝题，怎样做的？”我想，这么大佬的人，也能考我么？便回过脸去，不再理会。chen_zhe 等了许久，很恳切的说道，“不会做罢？……我教给你，记着！这些题应该记着。将来打我出的比赛的时候，做题要用。”我暗想我和他的等级还很远呢，而且我也从不敢打他出的神仙毒瘤比赛；又好笑，又不耐烦，懒懒的答他道，“谁要你教，不是只有你才会做的题目么？”chen_zhe 显出极不高兴的样子，将两个指头的长指甲敲着键盘，点头说，“错啦错啦！……这些题目都是超级水的红题，你知道么？”我愈不耐烦了，努着嘴走远。chen_zhe 刚打了一堆毒瘤算法以及宏函数，想在 IOI 官网上 AK，见我毫不热心，便又叹一口气，显出极惋惜的样子。</p><p>有几回，邻居 main 包和 ltt 听得笑声，也赶热闹，拦住了 chen_zhe。他便给他们神仙毒瘤题，一人几十道。他们做完题，仍然不散，眼睛都望着他的个人题库。chen_zhe 着了慌，退出题目将屏幕锁住，弯腰下去说道，“太简单了了，这都太简单了。”直起身又看一看题目，自己摇头说，“简单简单！难乎哉？不难也。”于是这一群神犇巨佬都在笑声里走散了。</p><p>chen_zhe 是这样的使人快活，可是没有他，别人也便这么过。</p><p>有一天，大约是 ACM World Final 后的两三天，正在慢慢的算 <code>AC</code> 题目，取下粉板，忽然说，“chen_zhe 长久没有打洛谷的题了。任务计划里还有十九道题呢！”我才也觉得他的确长久没有打我们的题了。一个蒟蒻的 lhy930 说道，“他怎么会打我们这些水题？……他打神仙毒瘤题去了。”老师说，“哦！”“他总仍旧是 AK。这一回，是自己太强，竟 AK 到 IOI 里去了。IOI 的神仙毒瘤题，AK 得的么？”“后来怎么样？”“怎么样？先拉他去了 ACM World Final 比赛现场，后来是做题，做了几分钟，就直接 AK 了。”“后来呢？”“后来他 <code>AC</code> 完所有的神仙毒瘤题了。”“刷完了怎样呢？”“怎样？……谁晓得？许是去出神仙毒瘤题然后自己 <code>AC</code> 了。”老师也不再问，仍然不住地感叹 chen_zhe 是历史上最强的神犇大佬。</p><h2 id="肆-chen-zhe-先生">肆 chen_zhe 先生</h2><p>浙江也无非是这样。NOIP 爆 $0$ 的时节，望去确也象绯红的轻云，但 <code>WA</code> 下也缺不了成群结队的 “天朝 OIer” 的速成班，头顶上盘着大辫子，顶得绿帽的顶上高高耸起，形成一棵主席树。也有解散辫子，盘得平的，除下帽来，油光可鉴，宛如小蒟蒻的算法一般，还要将脖子扭几扭。实在标致极了。</p><p>天朝 OIer 会馆的门房里有几本《算法导论》买，有时还值得去一转；倘在上午，里面的几间洋房里倒也还可以坐坐的。但到傍晚，有一间的地板便常不免要咚咚咚地响得震天，兼以满房烟尘斗乱；问问精通时事的人，答道，“那是在学 DP。”</p><p>到别的地方去看看，如何呢？</p><p>我就往上海的 OI 专门机房去。从长沙出发，不久便到一处驿站，写道：新♂日♂暮♂里。不知怎地，我到现在还记得这名目。其次却只记得温州了，这是江南皮革厂的老板黄鹤王八蛋欠钱的地方。上海是一个强市，并不大；夏天热得利害；还没有浙江的 OIer。</p><p>大概是物以希为贵罢。北京的白菜运往浙江，便用红头绳系住菜根，倒挂在水果店头，尊为“胶菜”；福建野生着的芦荟，一到北京就请进温室，且美其名曰“龙舌兰”。我到上海也颇受了这样的优待，不但机房不收学费，几个教练还为我的食宿操心。我先是住在小黑屋旁边一个客店里的，初夏已经颇热，蚊子还多，后来用被盖了全身，用衣服包了头脸，只留两个鼻孔出气。在这呼吸不息的地方，蚊子竟无从插嘴，居然睡安稳了。饭食也不坏。但一位教练却以为这客店也包办棕名的饭食，我住在那里不相宜，几次三番，几次三番地说。我虽然觉得客店兼办棕名的饭食和我不相干，然而好意难却，也只得别寻相宜的住处了。于是搬到别一家，离小黑屋也很远，可惜每天总要喝难以下咽的蒟蒻汤。</p><p>从此就看见许多陌生的 dalao，听到许多新鲜的算法。数据结构是两个 dalao 分任的。最初是二叉树。其时进来的是一个白胖的 dalao，大饼脸，戴着眼镜，挟着一迭大大小小的书。一将书放在讲台上，便用了缓慢而很能嘲讽的声调，向学生介绍自己道：——</p><p>“我就是叫作 chen_zhe 的……。”</p><p>后面有几个人笑起来了。他接着便讲述 OI 在上海发达的历史，那些大大小小的书，便是从最初到现今关于这一门学问的著作。起初有几本是线装的；还有翻刻中国译本的，他们的翻译和研究新的医学，并不比浙江早。</p><p>那坐在后面发笑的是上次 % 你赛爆 $0$ 的留级学生，在机房已经一年，掌故颇为熟悉的了。他们便给新生讲演每个 dalao 的历史。这 chen_zhe dalao，据说是太强了，竟能 AK IOI、吊打集训队；他做的题，都是神仙毒瘤题，有一回参加 IOI，致使出题者的疑心他走后门，硬是叫他爆了 $0$。</p><p>他们的话大概是真的，我就亲见他有一次 AK IOI。</p><p>过了一星期，大约是星期六，他使助手来叫我了。到得机房，见他坐在树状数组和许多单独的线段树中间，——他其时正在研究着线段树，后来有一篇论文在本校的杂志上发表出来。</p><p>“我的代码，你能抄下来么？”他问。</p><p>“可以抄一点。”</p><p>“拿来我看！”</p><p>我交出所抄的代码去，他收下了，第二三天便还我，并且说，此后每一星期要送给他看一回。我拿下来打开看时，很吃了一惊，同时也感到一种不安和感激。原来我的代码已经从头到末，都在注释栏添改过了，不但增加了许多脱漏的地方，连语句的错误，也都一一订正。这样一直继续到教完了他所担任的功课：二叉树、线段树、主席树。</p><p>可惜我那时太不用功，有时也很任性。还记得有一回 chen_zhe dalao 将我叫到他的机房里去，翻出我那代码上的一条语句来，是递归的定义，指着，向我嘲讽的说道：——</p><p>“你看，你将这条语句移了一点位置了。——自然，这样一移，的确比较的快速些，然而代码不是竞速，题意是那么样的，我们没法改换它。现在我给你改好了，以后你要全照着PPT上那样的写。”</p><p>但是我还不服气，口头答应着，心里却想道：——</p><p>“代码还是我写的不错；至于实在的题意，我心里自然记得的。”</p><p>学年试验完毕之后，我便到 slay 颓了一夏天，秋初再回机房，成绩早已发表了，同学一百余人之中，我在中间，不过是没有爆 $0$。这回 chen_zhe dalao 所担任的功课，是 OI 实习和莫队。</p><p>OI 实习了大概一星期，他又叫我去了，很高兴地，仍用了极能嘲讽的声调对我说道：——</p><p>“我因为听说浙江 OIer 是很敬重 main 包的，所以很担心，怕你不肯次 main 包。现在总算放心了，没有这回事。”</p><p>但他也偶有使我很为难的时候。他听说蒟蒻是很菜的，但不知道详细，所以要问我怎么菜，菜到怎样的程度，还叹息道，“总要看一看才知道。究竟是怎么一回事呢？”</p><p>有一天，本级的学生会淦事到我寓里来了，要借我的代码看。我检出来交给他们，却只翻检了一通，并没有带走。但他们一走，洛谷就收到一封很长的私信，拆开看时，第一句是：——</p><p>“警告：刷屏者禁言”</p><p>这是《算法导论》上的句子罢，但经 kkksc03 新近引用过的。其时正值犇犇战争，k 老先生便写了一封给 chen_zhe 联盟和反 chen_zhe 大队的团队主的私信，开首便是这一句。文文新闻上很斥责他的不逊，爱咕青年也愤然，然而暗地里却早受了他的影响了。其次的话，大略是说上年 % 你赛的题目，是 chen_zhe dalao 代码上做了注释，我预先知道的，所以能有这样的成绩。末尾是匿名。</p><p>我这才回忆到前几天的一件事。因为要开同级会，淦事便在黑板上写广告，末一句是“请全数到会勿漏为要”，而且在“漏”字旁边加了一个圈。我当时虽然觉到圈得可笑，但是毫不介意，这回才悟出那字也在讥刺我了，犹言我得了教练漏泄出来的题目。</p><p>我便将这事告知了 chen_zhe dalao；有几个和我熟识的蒟蒻也很不平，一同去诘责淦事托辞检查的无礼，并且要求他们将检查的结果，发表出来。终于这流言消灭了，淦事却又竭力运动，要收回那一封匿名信去。结末是我便将这 kkksc03 式的信退还了他们。</p><p>浙江是弱省，所以浙江 OIer 当然是蒟蒻，分数在 $9$ 分以上，便不是自己的能力了：也无怪他们疑惑。但我接着便有参观封禁浙江 OIer 的命运了。第二年添教高级算法，算法的代码是全用电影来显示的，一段落已完而还没有到下课的时候，便影几片时事的片子，自然都是 chen_zhe 联盟战胜反 chen_zhe 大队的情形。但偏有浙江 OIer 夹在里边：在犇犇里刷屏，被管理员发现，要封禁了，围着看的也是一群浙江 OIer；在讲堂里的还有一个我。</p><p>“Hello World！”他们都拍掌欢呼起来。</p><p>这种欢呼，是每看一片都有的，但在我，这一声却特别听得刺耳。此后回到浙江来，我看见那些闲看禁言 OIer 的人们，他们也何尝不酒醉似的喝彩，——妈耶，无法可想！但在那时那地，我的意见却变化了。</p><p>到第二学年的终结，我便去寻 chen_zhe dalao，告诉他我将不学 OI，并且离开这上海。他的脸色仿佛有些悲哀，似乎想说话，但竟没有说。</p><p>“我想去学游戏设计，dalao 教给我的 C++，也还有用的。”其实我并没有决意要学游戏设计，因为看得他有些凄然，便说了一个慰安他的谎话。</p><p>“为竞赛而教的 C++ 之类，怕于游戏设计也没有什么大帮助。”他叹息说。</p><p>将走的前几天，他叫我到他家里去，交给我一道神仙毒瘤题的 <code>AC</code> 代码，后面写着两个字道：“爆踩”，还说希望将红题也送他。但我这时适值没有红题了；他便叮嘱我将来出了发给他，并且时时私信告诉他此后的状况。</p><p>我离开上海之后，就多年没有写过代码，又因为状况也无聊，说起来无非使他失望，便连信也怕敢写了。经过的年月一多，话更无从说起，所以虽然有时想写信，却又难以下笔，这样的一直到现在，竟没有寄过一封信和一张照片。从他那一面看起来，是一去之后，杳无消息了。</p><p>但不知怎地，我总还时时记起他，在我所认为我 % 的 dalao 的之中，他是最强，最骚的一个。有时我常常想：他的对于我的热心的爆踩，不倦的嘲讽，小而言之，是为浙江，就是希望浙江有新的 OI；大而言之，是为学术，就是希望新的 OI 传到浙江去。他的性格，在我的眼里和心里是伟大的，虽然他的姓名并不为许多人（除 OIer）所知道。</p><p>他所注释的代码，我曾经剪成三个 Word 文档，收藏着的，将作为永久的纪念。不幸 $9$ 年前迁居的时候，中途毁坏了一台笔记本，失去半个 F 盘的数据，恰巧这代码也遗失在内了。责成修电脑的去修复，寂无回信。只有他的神仙毒瘤题的 <code>AC</code> 代码至今还挂在我电脑的桌面上，C++ 旁边。每当夜间疲倦，正想偷懒时，仰面在灯光中瞥见他白胖的面貌，似乎正要说出嘲讽蒟蒻的话来，便使我忽又良心发现，而且增加勇气了，于是喝上一口冰阔落，再继续写些为“dalao”之流所深恶痛疾的文字。</p><p>***文章转自luogu</p><p>此文章转载于 <a href="https://www.cnblogs.com/Attention/p/9781101.html">https://www.cnblogs.com/Attention/p/9781101.html</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/">https://ren-yc.github.io/2021/08/09/四篇关于-chen-zhe-的美文/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 光头强砍树 - 题解</title>
      <link href="/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>很淼，读入后循环判断输出就行了。</p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(n)$</p><p>空间复杂度 $O(n)$</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, k, a[101] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];&#125;cin &gt;&gt; k;for (int i = 0; i &lt; n; i++) &#123;if (a[i] != k) cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/08/LG-光头强砍树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 不存在的 1 + 1 = 1 - 题解</title>
      <link href="/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题目解法：</p><p>$\because$ 观察样例得 $ans = n \times 2 - m$。</p><p>$\therefore$ $output = ans$。</p><p><img src="https://xn--9zr.tk/xyx" alt="/huaji"><s>以上纯属搞笑</s></p><p>这题就这解法了。</p><h3 id="代码分析">代码分析</h3><p>不解释。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;unsigned long long n, m;cin &gt;&gt; n &gt;&gt; m;cout &lt;&lt; n * 2 - m &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/08/LG-不存在的-1-1-1-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 木棍 - 题解</title>
      <link href="/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题目说</p><blockquote><p>Bob 想知道至少他需要去掉多少根。</p></blockquote><p>所以我们可以利用 “三角形两边之和大于第三边” 的性质来做。</p><h3 id="代码分析">代码分析</h3><p>不解释。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long n, tmp, a = 1, b = 2;cin &gt;&gt; n;if (n &lt; 3) &#123;cout &lt;&lt; 0 &lt;&lt; endl;return 0;&#125;for (int i = 2; a + b &lt;= n; i++) &#123;long long c = a + b;a = b;b = c;tmp = i;&#125;cout &lt;&lt; n - tmp - 1 &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-木棍-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 苹果树 - 题解</title>
      <link href="/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>典型的 $Fibonacci$ 数列题，题目居然写出来了…</p><h3 id="代码分析">代码分析</h3><p>板子题。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, i = 0, a, b = 1, s = 2;cin &gt;&gt; n;if (n &gt;= 2) &#123;n -= 2;i += 2;&#125; else &#123;cout &lt;&lt; 1 &lt;&lt; endl;return 0;&#125;while (n &gt; 0) &#123;n -= s;i % 2 == 0 ? a = s : b = s;s = a + b;i++;&#125;cout &lt;&lt; i &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 万恶的试卷 - 题解</title>
      <link href="/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>既然题目说了 $a_i$ 可能很大，就是高精度了，<s>但我懒得写高精</s>，得用个不同的排序方法。</p><h3 id="代码分析">代码分析</h3><p>这题难就难在两个输出循环怎么搞，为了避免溢出，要先输出一半再输出一半。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;string a[1001];bool cmp(string a, string b) &#123;if (a.size() == b.size()) return a &gt; b;return a.size() &gt; b.size();&#125;int main() &#123;long long n;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a + 1, a + n + 1, cmp);for (int i = 1; i &lt;= n; i += 2) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;for (int i = (n / 2) * 2; i &gt;= 1; i -= 2) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 捕食关系 - 题解</title>
      <link href="/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>水题一道，输入后循环查找 $a_i$ $&gt;$ $b_j$。</p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(n + m)$</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, m, s = 0;cin &gt;&gt; n &gt;&gt; m;int a[20001] = &#123;0&#125;, b[20001] = &#123;0&#125;;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;for (int i = 1; i &lt;= m; i++) &#123;cin &gt;&gt; b[i];&#125;for (int i = 1; i &lt;= n; i++) &#123;for (int j = 1; j &lt;= m; j++) &#123;if (a[i] &gt; b[j]) &#123;s++;&#125;&#125;&#125;cout &lt;&lt; s &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 负二进制 - 题解</title>
      <link href="/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>板子题。</p><h3 id="代码分析">代码分析</h3><p><s>打表出奇迹</s></p><p>由于数据出锅，本题题解使用了大佬 @<a href="https://www.luogu.com.cn/user/341650">wangwls</a> 的代码（不要脸）<img src="https://xn--9zr.tk/fad" alt=""></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, p2[50] = &#123;1, -2, 4, -8, 16, -32, 64, -128, 256, -512, 1024, -2048, 4096, -8192, 16384, -32768, 65536, -131072, 262144, -524288&#125;;void fun(int x) &#123;int ws[50], c = 0;while (x) &#123;ws[++c] = x % 2;x /= 2;&#125;for (int i = c; i &gt;= 1; i--) &#123;cout &lt;&lt; ws[i];&#125;cout &lt;&lt; endl;&#125;int main() &#123;cin &gt;&gt; n;for (int k = 0; k &lt; (1 &lt;&lt; 12); k++) &#123;int s = 0;for (int i = 0; i &lt; 12; i++) &#123;if (k &amp; (1 &lt;&lt; i)) &#123;s += p2[i];&#125;&#125;if (s == n) &#123;fun(k);return 0;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-负二进制-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 行程码 - 题解</title>
      <link href="/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这就是个<s>简单的</s>模拟题，细节特别多，我调了半天才 AC <img src="https://xn--9zr.tk/kk" alt="/kk"></p><p><strong><s>毒瘤大模拟</s></strong></p><h3 id="代码分析">代码分析</h3><p>本题要点：</p><p>要俩结构体</p><p>计算月份，由于题目中说</p><blockquote><p>所有时间均在 $2021$ 年。</p></blockquote><p>直接打表</p><p>输入字符串最好不要用 <code>scanf()</code></p><p>注意处理重复的城市</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int month[13] = &#123;-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;struct NODE1 &#123;string name;char state;//状态&#125; a[11];struct NODE2 &#123;int MM, DD, tot;string name;&#125; b[101];int f(int n, int m) &#123;//计算日期int tot = 0;for (int i = 1; i &lt; n; i++) &#123;tot += month[i];&#125;tot += m;return tot;&#125;int main() &#123;int n, m, flag = 0;string name, tmp = &quot;&quot;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i].name &gt;&gt; a[i].state;&#125;cin &gt;&gt; m;for (int i = 0; i &lt; m; i++) &#123;scanf(&quot;%d-%d&quot;, &amp;b[i].MM, &amp;b[i].DD);cin &gt;&gt; b[i].name;b[i].tot = f(b[i].MM, b[i].DD);//统一&#125;int MM, DD, tot;scanf(&quot;%d-%d&quot;, &amp;MM, &amp;DD);tot = f(MM, DD);//同上for (int i = m - 1; i &gt;= 0; i--) &#123;if (tot - b[i].tot &lt;= 14) &#123;if (tmp.find(b[i].name) != string::npos) &#123;//查找goto END;//goto大法&#125; else &#123;tmp += b[i].name;//记录&#125;cout &lt;&lt; b[i].name;for (int j = 0; j &lt; n; j++) &#123;if (a[j].name == b[i].name) &#123;cout &lt;&lt; '(' &lt;&lt; a[j].state &lt;&lt; ')';if (a[j].state == 'M') flag = 1;if (a[j].state == 'H') flag = 2;&#125;&#125;cout &lt;&lt; ',';&#125;END:;&#125;if (flag == 1) cout &lt;&lt; &quot;Yellow&quot; &lt;&lt; endl;else if (flag == 2) cout &lt;&lt; &quot;Red&quot; &lt;&lt; endl;else cout &lt;&lt; &quot;Green&quot; &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-行程码-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 之吃牛肉 - 题解</title>
      <link href="/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="来自验题人的致歉">来自验题人的致歉</h3><p>本题验题人太<strong>垃圾</strong>了，没有注意到题意矛盾，导致标程出错，而样例过于简单，无法查出部分错误。</p><h3 id="题目解析">题目解析</h3><p>这题太淼了，但我做的时候因为玩过 MC，觉得吃饱指的是不能再吃，差半个饱食度也能吃的那种。</p><p>这题就是字符串匹配。</p><p><strong><code>if</code> 出奇迹</strong></p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(1)$</p><p>要点：</p><p>$tot$ 要转换成整型再 $\div$ $3$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, m, cnt = 0;double tot = 0;bool flag = false;string s;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; s &gt;&gt; m;for (int j = 0; j &lt; m; j++) &#123;if (s == &quot;stone&quot;) &#123;tot += 0.1;&#125;if (s == &quot;coal&quot;) &#123;tot += 0.5;&#125;if (s == &quot;iron&quot;) &#123;tot += 1;&#125;if (s == &quot;gold&quot;) &#123;tot += 1.5;&#125;if (s == &quot;diamond&quot;) &#123;tot += 1.75;&#125;if (s == &quot;obsidian&quot;) &#123;tot += 4;&#125;if (s == &quot;zombie&quot;) &#123;tot += 0.5;flag = true;&#125;if (s == &quot;skeleton&quot;) &#123;tot += 1;flag = true;&#125;if (s == &quot;creeper&quot;) &#123;tot += 2;flag = true;&#125;if (flag == true || 20 - tot &lt; 6) &#123;cnt += floor(tot / 3);tot -= floor(tot / 3) * 3;flag = false;&#125;&#125;&#125;cout &lt;&lt; cnt &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/06/LG-MC-之吃牛肉-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 公交车站 - 题解</title>
      <link href="/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题面很长，总体来说，这道题就是让你来判断每个乘客的区间中是否有车停靠。</p><h3 id="代码分析">代码分析</h3><p>本题要点：</p><p>要定义结构体，结构体中要有总时间如 <code>TOT</code></p><p>输入的时候记得用 <code>scanf()</code>，这个函数可以无视中间的 <code>:</code></p><p><code>scanf()</code> 的参数是指针类型</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct NODE &#123;int HH, MM, TOT;&#125; a[1001], s[10001], t[10001];int main() &#123;int n, m, tmp, d[1001] = &#123;0&#125;;cin &gt;&gt; n &gt;&gt; m;tmp = n;for (int i = 0; i &lt; n; i++) &#123;scanf(&quot;%d:%d %d&quot;, &amp;a[i].HH, &amp;a[i].MM, &amp;d[i]);//输入记得带格式a[i].TOT = a[i].HH * 60 + a[i].MM;&#125;for (int i = 0; i &lt; m; i++) &#123;scanf(&quot;%d:%d %d:%d&quot;, &amp;s[i].HH, &amp;s[i].MM, &amp;t[i].HH, &amp;t[i].MM);//同上s[i].TOT = s[i].HH * 60 + s[i].MM;t[i].TOT = t[i].HH * 60 + t[i].MM;for (int j = 0; j &lt; n; j++) &#123;if (s[i].TOT &lt;= a[j].TOT &amp;&amp; t[i].TOT &gt;= a[j].TOT &amp;&amp; d[j] != 0) &#123;cout &lt;&lt; a[j].TOT - s[i].TOT &lt;&lt; endl;d[j]--;goto END;&#125; else if (tmp != 1) &#123;//敲黑板tmp--;&#125; else &#123;cout &lt;&lt; &quot;Leave&quot; &lt;&lt; endl;tmp = n;//记得重置goto END;//goto跳转到结尾，也可以用break&#125;&#125;END:;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/06/LG-公交车站-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Hands - 题解</title>
      <link href="/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这题看上去很难，但分析后就可以一个循环解决。</p><p>每次取牌如果有一个连续的大于 $0$ 的数列，那就全部取出，取到其中的某一个数等于 $0$。</p><h3 id="代码分析">代码分析</h3><p>边输入边累加，记住当 $x - last &lt; 0$ 时，就不要累加。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int ans = 0, n, x, last;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; x;ans += max(0, x - last);last = x;&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/05/LG-Hands-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』WFR - 如何使用 Warfarin</title>
      <link href="/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/"/>
      <url>/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介">简介</h2><p>Warfarin 是一个由 C++ 编写而成的解释型语言。</p><h3 id="特点">特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md">这里</a></p><h2 id="使用">使用</h2><p>Warfarin 目前最新版本：<strong>3.62</strong></p><h3 id="下载-配置">下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-运行">编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code></p></li><li><p>编译运行 <code>.wfr</code> 源文件（请看下文）</p></li></ul><p>Warfarin 的源文件扩展名一般为 <code>.wfr</code>，</p><p>使用 <code>Warfarin.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code>，</p><p>此命令会编译出一个 <code>.ff0</code> 文件，相当于 C++ 的 <code>.exe</code> 文件，<s>但不能双击运行</s>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接">相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip">本站下载链接</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件</a></p><h3 id="发布帖">发布帖</h3><p><a href="https://www.luogu.com.cn/discuss/show/349241">V3.62</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/">https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warfarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 买二送一 - 题解</title>
      <link href="/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><blockquote><p>凡是顾客购买两本书，就可以免费带走第三本书，只要免费书的价格不超过两本付费书各自的价格即可。</p></blockquote><p>可以使用排序来做。</p><h3 id="代码分析">代码分析</h3><p>排序，建议偷懒使用 <code>sort</code> 函数，<strong>But</strong> 是降序排序，所以要写炒鸡简单的 <code>cmp()</code> 函数。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, a[100001], ans = 0;bool cmp(int x, int y) &#123;return x &gt; y;&#125;int main() &#123;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a + 1, a + n + 1, cmp);for (int i = 1; i &lt;= n; i += 3) &#123;ans += a[i] + a[i + 1];&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 方舱医院 - 题解</title>
      <link href="/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="0d1a9f3aca2c8fe4e1cf44cd052c1323375814e2b1dca4f519a3fe1a7d878961">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccc8bc78212f166148a4c68dc108945a7c9fd427aac55495c37ec0395fe2c5ae4788c4458bf2b236d4f3dbf8064d71651a8bf04f3111e87ed96c67c00780f2ef84e590540026e68e3389a15f8bef40ac77c4818e97a7369971a52e4eccff147ad520e9005fbf668056102a1984d40e360585faf27fe3e3d22c3a3d35719402cc73e878a0b3cacbaa7f3786f830f9ade5de54881c7079f706d1e89c5baf739852440aa13aa4adb8ca1dd9676379a64728b90b11617a386e69b12cadaf993dd570e9e94bd6a9b4e2116d3b1a094ac82894abc292b095585a995e5d7e859bc1457645d012dc5bbe62306d9902f4e3ed3c717f5baa21c0f10201cb5fc6b4777db332e8f0fd400630a77166597af53a05f52f66c08555e530a0d5a2e4b7182e4e354954f8422502c980ee74393503cf5b3ac6b4c8822e16a6967ffd7735fed8f6a8bc7fcbdb8a3b6f6a5d4662a627c1b06dd3f0140518425a4e96083b91d1062910271f8cba5a6684d20d99513091b45cfd9e8c85abecbf3a7f144d170510721898dc125d026896e0e5d6cb05e63af7e7f6d952efbf5d4417853bf431b5de8c39169c195bbb92be1277b0edce334be75c2acdc500086f1f4d27aad81cbefb5b809403f688cceb099607456bc4fe9e33e9f51b8bf83f1b74745de6ece9f7a6cb26d17861788fb64c3cbaf95483fe5d5c1be18cdab769c01592f9ad20995aff095f96e8f20571524177717700e6337a3dc4831f316bf1047bf897a53d6ff187b636c476a1a96d366592ea35514a32ace2552426e6d7c9e1544a5e8ff68e38ae91131c0ff086f134dade5a5e54dd8d3e2fa139fbb1458185093acc43256bc507016484414481004dcfd633b66e52f6d799c2d3f24637bb3117235228de42615a49be5bc43b5132275aec66e0572d0945d6ba149eaf1f9888bf4a930fd81de32dc0cb4775ecb90dc9f1bf6ce386d90b11a132e5f15cc8010e0aeb25fc127a2c7b92c9c76a264fb2e04f7673338d986b92089d0aa8c9f0e618b682c2ba53d954bc9e1a4942c33c72da764c87b00621cb4979d2fa50fdeacf3d19cdd19a662af893b0f99f61781a508b6251e7974b89e4a9c665f5564b6eb7da693251407cbe5cda6c4fa7c072e631fbf3ac12500f51afcf18d16548f4fea391fc7e62d6bd11cd2b10e520abf216697046ff2ad89b738dd0f20e8ee5dcd2663b0942ebf47980c7d5bc4e5026431bea0312e9b28a6731b31d54cc67c3dae76be1fb316f641e13902de05861cd4c4e76e1aeefd5ed77c9d671e6ebabb95d7ea0296e90cf32ad66876ed017089c30bf840a7a1e51fbac9025d8f0038e9ed4ef8a487daff17fb1cea909b633ad5d328d9efc2986b5ef37addc59403dd17c1b0ff1567103a1736fd92fd96b3d0ee06937be9c3374806365bfdb63a8b4f0e4ecf1eac755d642d8180b93ef9487bd301144aea7f16922f43a23f0840194332e209f8f0c62cadd3717e077f33efed3b3462a434d908eed8e40767bca75005c470ce2829c025bdd7d048c1db550a95719df07254435348a4308b3dab6e6caf4a5fab043e08ab4abff1c8e6da2f3f5f1f96f758499851989d3e980b4555c47eeaa7873ec5e9df6420c0a0021d25a2db70a2a5a221287f89947aa43d780f12185d27e293e487160f06d70a8e970a97f686fbfb0a8e6888f01b0bfc86fa4d830f2ec99</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 开关灯 - 题解</title>
      <link href="/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>一个循环搞定。</p><h3 id="代码分析">代码分析</h3><p>一个嵌套循环 + 检查灯的状态的循环。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, x, y, a[10001] = &#123;0&#125;, sum = 0;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; x &gt;&gt; y;for (int j = x; j &lt;= y; j++) &#123;if (a[j] == 1) &#123;a[j] = 0;&#125; else &#123;a[j] = 1;&#125;&#125;&#125;for (int i = 1; i &lt;= 10000; i++) &#123;if (a[i] == 1) &#123;sum++;&#125;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-开关灯-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 古老的 A + B - 题解</title>
      <link href="/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="aa5568fdf8fcd0f6661173673d3d5f296966d1e6f55387daa409dc518db6b9c0">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cc14db3c95bd80164544e733d5d0b786a68ee86f749c626e437718ab72f45e9d3c47b78d43ec4867023c161260bb55798b6b951fc8181de3e08a3dc64c3adbf84ac4dabdfcba2d103b4b5fc2177e03591beb305fd825d08f34ea25f35ffbaab3be04f1090e622a2fbcf102bda9823f344854eaeedab7aa5e47cb23ce7d6330a1e786e0a0a6f4f00989238b6c0bf10cf457cee76560f616c6bb2a3321f0a49080940b5877d17be13e2443ee220c3859ab3970de71114ace09b0887c7ef476569faa63a5465f5ff22729606e9327fc14267dd3b39b2d47d1e488e053ceef09e42f24bbc7b2a23b36485a071d538d0b99165386e22bd0c10bd76db605298fe178b224dc2999ec1be80fb31faebc2772de93be37c611b3a4725a677e251441f73d13deafbb26575b72fb3858d92b0b537b2c2e1ebd5ebbffb8a14190e36e09b339fe7156e34d7217b478186ba279ab4e4a913c9003c76686afe77013d155721b4031621a477c88290f224688b46fbdbf3d5012f07d75453816e29dacd3c5afd729a3821cb819bd0212dbf5327be5abf43ea6f27d9d7db1752df44de434d2f47403a152cf3f8e3c7e050470f57bd25ef619af85aebf4c5d9573f4d6940664d2b19a4024a260f01a9abd416874abcb372c836678b331c027bd054b15df0b1140122e8ed9bcafcf76d61735f7b149b1f89fed2a5f6296a07e4c28fb3cfb00f55bea7529ea085e5cec97c39d59b124a97bf277c1c5cdc4cf9d5791c1bc1d7969d700a506af8ea74b4c959fade37f50d226de549f195ddd43a46293cacbd444696e1ae67d7bd9e9cba02d96c59f69504c392b49b78aea8dd8b51447b8c8f1448cdedae18dc657c5b1f709e74c6231f45b96d8ebd955ddbe759a6ba031982a606ce688c34fa98d6e60e4817e7b21a8ec07a9f2dfec69b9c701709e7e696698428ea0f77221e8369c3312cff5f747ff816f8398063ac2f40997a621c857d9c1b72682c8afe1577fd122ee7f48d1e2079d824ad127721174f24eece953d2ead45723181407bfc136824e39ca92a01d2b2e3bf282fae2b05a625e8d2b5db86e9a38ea23089766a522b4140b592462a4faa7c1280db753666767c9d1f57e421bf0b1427b6c4338f16052fbad6e02a18c59e363ae04bc9ebb405a25b2235cb9de185252342bc2e8518d6810ea3d3d72e3ae063de55337459ea567e876c7f6fa997afbd324a460a2be93537317e5f647b9ca3b1383be6d8f27726acb8e6024aff698116840a8301bb5f77b9ee79cfe869cdbb29250906c17565137169b70414eb38a94946bef286bcf35cb68928a3445594fc31ee5cdabfe5476976c1c456a7c5b325bb8fdd7e341206fc1d82f095e62934166eace5fe7e4c4860be2704f3cc95532d4746e949b4f4bc4126efcc55084d2ae673e9aff74d199a0c62e5053ce1cecc442e2d05fa6592948a58b90464ea66d3a201dfd070da53120bcc7975e5f0349506e50d6e657d9192d2faee9692a15f034f52204ac697f78c1019e570a33a7b2d018d3bce1c58d7fb555dae7e351f1ad25ad14256a7cc939ec6b61eb2ff15d4796ae22074d00d2679952e119c31631dbb026e6df1f0f930c3e637b01aba6c56bbee12c31fe38bcf28c97e39d5f2437ccefa24383ac4f60238663f758c5d828406a1a977611d4fcdb56a8616352e8ed923945a48393405c5ea7d37ff697986f34d0a65cb5f4fcf1b0180b54bdf049842f1fa7702a0920f19c0ef797e1a8982af0dcfc760f6e47a7d4f8fe574d842e0bf6440b9ef1c7d8189cd0084f4bed832dd26527fc812fcbdd4ef23f5ff840711905438688ac23f89f2d23e26acc3224afe4dfc009e0e7403d1353b176657100abe02f49a07729119ab0eea358535dce60ba0294970f3f25070c320786bb7f90e97d178956ecef5709d9ded8adc8c5c1aface5453146fa7febf71c0108cea4860fca9f1acc7770244c580ae95021c2a586342bad599bdf81f635388b483967592e58765e786e8d21e5dabae6dffe1c7154b044871023b1ff0efc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 排序 - 题解</title>
      <link href="/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡淼的 C++ <code>if</code> 语句题（?）。</p><p>太淼了就不解释了</p><h3 id="代码分析">代码分析</h3><p>全读入完来个函数判断就行了。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[6], b[6], cnt1, cnt2, tot1, tot2;int mysort() &#123;if (cnt1 &gt; cnt2) &#123;return 1;&#125; else if (cnt1 == cnt2) &#123;if (tot1 &gt; tot2) &#123;return 1;&#125; else if (tot1 &lt; tot2) &#123;return 2;&#125; else &#123;return 0;&#125;&#125; else &#123;return 2;&#125;&#125;int main() &#123;for (int i = 0; i &lt; 6; i++) &#123;cin &gt;&gt; a[i];cnt1 += a[i];if (a[i] == 50) tot1++;&#125;for (int i = 0; i &lt; 6; i++) &#123;cin &gt;&gt; b[i];cnt2 += b[i];if (b[i] == 50) tot2++;&#125;cout &lt;&lt; mysort() &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-排序-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 生小虫子 - 题解</title>
      <link href="/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这道题其实就在检验 <code>for()</code> 循环的应用。</p><h3 id="代码分析">代码分析</h3><p>读入一切信息后，</p><p>写一个循环 $z$ 次的 <code>for</code> 循环，如果满足条件 <code>k == x</code>，小虫子数量增加，反之 <code>s1 = 0</code>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int k = 0, x, y, z;cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;int s1 = 0, s2 = 0, cc = 1, cl = 0;for (int i = 1; i &lt;= z; i++) &#123;k++;cl += cc;cc = s2;s2 = s1;if (k == x) &#123;s1 = cl * y;k = 0;&#125; else &#123;s1 = 0;&#125;&#125;cout &lt;&lt; cc + cl &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 合成大西瓜 - 题解</title>
      <link href="/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道 C++ 枚举题，只要遍历 $b$ 数组就 $ok$ 了。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$，$b_x = b_x + 1$;</p><p>遍历 $b$ 数组。</p><p>倒着遍历，一旦发现有符合条件的数，直接输出并结束程序。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, b[201];int main() &#123;int x;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; x;b[x]++;&#125;for (int i = 0; i &lt; n; i++) &#123;b[i + 1] += b[i] / 2;&#125;for (int i = n - 1; i &gt;= 0; i--) &#123;if (b[i] != 0) &#123;cout &lt;&lt; i + 1 &lt;&lt; endl;break;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 救援争先 - 题解</title>
      <link href="/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡不淼的 C++ 结构体排序题，我卡 <code>cmp</code> 了好久。</p><p>就俩循环读入 &amp; 输出，<code>sort()</code>，还有<strong>万恶</strong>的 <code>cmp</code>。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i . sh, a_i . sm, a_i . dh, a_i . dm$;</p><p>使用 <code>sort()</code> 结构体排序;</p><p>循环输出排序后的 $a_i$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct Node &#123;int sh, sm, st, dh, dm, et, id;&#125; a[1001];bool cmp(Node a, Node b) &#123;return a.et &lt; b.et || a.et == b.et &amp;&amp; a.st &lt; b.st || a.et == b.et &amp;&amp; a.st == b.st &amp;&amp; a.id &lt; b.id;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;scanf(&quot;%d:%d %d:%d&quot;, &amp;a[i].sh, &amp;a[i].sm, &amp;a[i].dh, &amp;a[i].dm);a[i].st = a[i].sh * 60 + a[i].sm;a[i].et = a[i].st + a[i].dh * 60 + a[i].dm;a[i].id = i + 1;&#125;sort(a, a + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; a[i].id &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之武魂融合技 - 题解</title>
      <link href="/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡淼的 C++ 模拟题，也不卡 <code>long long</code>。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$ 和 $y$。</p><p><strong>一边输入一边计算，速度快</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, x, y, z;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; x &gt;&gt; y;z = (x + y) * 2;cout &lt;&lt; z &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 前 n 个偶数位回文数之和 - 题解</title>
      <link href="/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目信息">题目信息</h2><h3 id="题目描述">题目描述</h3><p>输入 $n$</p><p>输出前 $n$ 个偶回文数之和</p><p><strong>偶回文数</strong>：有<strong>偶数个数位</strong>的<strong>回文数</strong>，如：11，22。</p><h3 id="输入格式">输入格式</h3><p>输入一行 $n$。</p><h3 id="输出格式">输出格式</h3><p>输出前 $n$ 个偶回文数之和。</p><h3 id="输入输出样例">输入输出样例</h3><h4 id="输入-1">输入 #1</h4><p><code>3</code></p><h4 id="输出-1">输出 #1</h4><p><code>66</code></p><h3 id="提示说明">提示说明</h3><p>对于 $100%$ 的数据：</p><p>$1$ $\le$ $n$ $\le$ $100$</p><p>Idea：250lht，Solution：任宇宸，Code：任宇宸，Data：任宇宸</p><h3 id="题目难度">题目难度</h3><p>$\textcolor{yellow}{普及/提高-}$</p><h2 id="题目解析">题目解析</h2><p><s>这道题目就不淼了，变成沝了。</s></p><p>写几个函数就不行了。</p><p><s>真 简 单</s></p><p><s>250lht：呜呜呜这是比赛赛题，我保龄。</s></p><h2 id="代码分析">代码分析</h2><p>输入 $n$，写个循环判断从 $1$ 起的每一个数，如果满足函数 <code>weishu</code> 和函数 <code>huiwen</code>，则加到计数器。</p><p>这时有人就会问了，<code>huiwen</code> 函数中的 <code>_itoa_s()</code> 是神马东西，请看<a href="https://blog.csdn.net/smcrystal/article/details/71191335?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base">这里</a>。</p><h2 id="代码">代码</h2><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool huiwen(int g) &#123;int i, j;char b[1001];_itoa_s(g, b, 10);for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>以上代码交到洛谷上会 <strong><a href="https://www.luogu.com.cn/record/54096300">CE</a></strong>，你谷居然无法使用 <code>stdlib.h</code> 的 <code>_itoa_s()</code> ???</p><p><strong>偷懒失败</strong>，只好自己写转换函数。</p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;int i = 0, k, n;char temp;if (m &lt; 0) &#123;s[i] = '-';m = -m;i++;&#125;while (m &gt; 0) &#123;n = m % 10;m /= 10;s[i] = n + '0';i++;&#125;s[i] = '\0';if (s[0] == '-') k = 1;else k = 0;for (int j = k; j &lt; i / 2; j++) &#123;temp = s[j];s[j] = s[i - j - 1 + k];s[i - j - 1 + k] = temp;&#125;&#125;bool huiwen(int g) &#123;int i, j;char b[1001];int_to_string(b, g);for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之魂系辨认 - 题解</title>
      <link href="/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>@250lht 这道题目太淼了！</p><p>不多废话，这道题直接写一连串的 <code>if</code> 语句就行了。</p><blockquote><p><strong>P.S.由于 Windows 操作系统终端使用 GB2312，所以无法正确显示中文，但这不会影响洛谷评测结果</strong></p></blockquote><p>审题人真的良心，写了这个，不说的话我还以为我代码出 BUG 了呢。</p><h3 id="代码分析">代码分析</h3><p>输入 $n$，循环读入 $a_i$，尽量<strong>一边读入一边输出</strong>，<strong>速度快</strong>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void judge(int n) &#123;if (1 &lt;= n &amp;&amp; n &lt;= 4) cout &lt;&lt; &quot;魂土&quot;;if (5 &lt;= n &amp;&amp; n &lt;= 14) cout &lt;&lt; &quot;魂师&quot;;if (15 &lt;= n &amp;&amp; n &lt;= 34) cout &lt;&lt; &quot;大魂师&quot;;if (35 &lt;= n &amp;&amp; n &lt;= 39) cout &lt;&lt; &quot;魂王&quot;;if (40 &lt;= n &amp;&amp; n &lt;= 49) cout &lt;&lt; &quot;魂宗&quot;;if (50 &lt;= n &amp;&amp; n &lt;= 54) cout &lt;&lt; &quot;魂尊&quot;;if (55 &lt;= n &amp;&amp; n &lt;= 59) cout &lt;&lt; &quot;魂帝&quot;;if (60 &lt;= n &amp;&amp; n &lt;= 69) cout &lt;&lt; &quot;赤炎斗罗&quot;;if (70 &lt;= n &amp;&amp; n &lt;= 79) cout &lt;&lt; &quot;巅峰斗罗&quot;;if (80 &lt;= n &amp;&amp; n &lt;= 89) cout &lt;&lt; &quot;封号斗罗&quot;;if (90 &lt;= n &amp;&amp; n &lt;= 100) cout &lt;&lt; &quot;海神&quot;;cout &lt;&lt; endl;&#125;int main() &#123;int n, a[101] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];judge(a[i]);&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 2 - 题解</title>
      <link href="/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这道题目应使用算法库函数 <s>当然自己手写也行</s> 和类型转换。</p><h3 id="代码分析">代码分析</h3><p>先输入 $x$ 和 $y$，直接输出 $\lceil x \div y \rceil$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long。</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long a, b;cin &gt;&gt; a &gt;&gt; b;cout &lt;&lt; ceil((double)a / (double)b) &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - gcd 与 lcm - 题解</title>
      <link href="/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><h3 id="代码分析">代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数。</p><p>（算法库里有 int 的：<code>__gcd</code>，不过本题卡 long long）</p><p><strong>注意本题数据范围 $10^{10}$，卡 long long</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;long long gcd(long long a, long long b) &#123;if (a % b == 0) return b;else return gcd(b, a % b);&#125;long long lcm(long long a, long long b) &#123;return a * b / gcd(a, b);&#125;int main() &#123;long long T, a, b;string mode;cin &gt;&gt; T;while (T--) &#123;cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;if (mode == &quot;gcd&quot;) &#123;cout &lt;&lt; gcd(a, b) &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; lcm(a, b) &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（2） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ <strong>结构体</strong>排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，$a$ 一样的按 $name_0$（字符串首） 的 ASCII 码<strong>从小到大</strong>排序，所以我们还要自己写 <code>cmp</code> 函数，来比较两结构体。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<s>偷懒</s>，写一个 <code>cmp</code>。</p><p><s>出题人 NB！！！不卡我们 long long 了</s></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct node &#123;string name;int a;&#125; wx[101];bool cmp(node a, node b) &#123;if (a.a == b.a) &#123;return a.name[0] &lt; b.name[0];&#125;return a.a &gt; b.a;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; wx[i].name &gt;&gt; wx[i].a;&#125;sort(wx, wx + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; wx[i].name &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（1） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ 排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，所以我们要自己写 <code>cmp</code> 函数，来判断升序。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<s>偷懒</s>，写一个 <code>cmp</code>。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(long long a, long long b) &#123;return a &gt; b;&#125;int main() &#123;int n;int a[1001] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a, a + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 - 题解</title>
      <link href="/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ 语言入门题。</p><h3 id="代码分析">代码分析</h3><p>直接输入正整数 $n$ 再输出 $n \times 10$。</p><p>或者输入字符串 $n$ 再输出 $n + ‘0’$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long（使用方法 2 可无视）</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long x;cin &gt;&gt; x;cout &lt;&lt; x * 10 &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/03/hello-world/"/>
      <url>/2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/06/03/hello-world/">https://ren-yc.github.io/2021/06/03/hello-world/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
