<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LG - 不存在的 1 + 1 = 1 - 题解</title>
      <link href="/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题目解法：</p><p>$\because$ 观察样例得 $ans = n \times 2 - m$。</p><p>$\therefore$ $output = ans$。</p><p><img src="https://xn--9zr.tk/xyx" alt="/huaji"><s>以上纯属搞笑</s></p><p>这题就这解法了。</p><h3 id="代码分析">代码分析</h3><p>不解释。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;unsigned long long n, m;cin &gt;&gt; n &gt;&gt; m;cout &lt;&lt; n * 2 - m &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/08/LG-不存在的-1-1-1-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 木棍 - 题解</title>
      <link href="/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>题目说</p><blockquote><p>Bob 想知道至少他需要去掉多少根。</p></blockquote><p>所以我们可以利用 “三角形两边之和大于第三边” 的性质来做。</p><h3 id="代码分析">代码分析</h3><p>不解释。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long n, tmp, a = 1, b = 2;cin &gt;&gt; n;if (n &lt; 3) &#123;cout &lt;&lt; 0 &lt;&lt; endl;return 0;&#125;for (int i = 2; a + b &lt;= n; i++) &#123;long long c = a + b;a = b;b = c;tmp = i;&#125;cout &lt;&lt; n - tmp - 1 &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-木棍-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 苹果树 - 题解</title>
      <link href="/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>典型的 $Fibonacci$ 数列题，题目居然写出来了…</p><h3 id="代码分析">代码分析</h3><p>板子题。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, i = 0, a, b = 1, s = 2;cin &gt;&gt; n;if (n &gt;= 2) &#123;n -= 2;i += 2;&#125; else &#123;cout &lt;&lt; 1 &lt;&lt; endl;return 0;&#125;while (n &gt; 0) &#123;n -= s;i % 2 == 0 ? a = s : b = s;s = a + b;i++;&#125;cout &lt;&lt; i &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 万恶的试卷 - 题解</title>
      <link href="/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>既然题目说了 $a_i$ 可能很大，就是高精度了，<s>但我懒得写高精</s>，得用个不同的排序方法。</p><h3 id="代码分析">代码分析</h3><p>这题难就难在两个输出循环怎么搞，为了避免溢出，要先输出一半再输出一半。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;string a[1001];bool cmp(string a, string b) &#123;if (a.size() == b.size()) return a &gt; b;return a.size() &gt; b.size();&#125;int main() &#123;long long n;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a + 1, a + n + 1, cmp);for (int i = 1; i &lt;= n; i += 2) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;for (int i = (n / 2) * 2; i &gt;= 1; i -= 2) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 捕食关系 - 题解</title>
      <link href="/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>水题一道，输入后循环查找 $a_i$ $&gt;$ $b_j$。</p><h3 id="代码分析">代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(n + m)$</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, m, s = 0;cin &gt;&gt; n &gt;&gt; m;int a[20001] = &#123;0&#125;, b[20001] = &#123;0&#125;;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;for (int i = 1; i &lt;= m; i++) &#123;cin &gt;&gt; b[i];&#125;for (int i = 1; i &lt;= n; i++) &#123;for (int j = 1; j &lt;= m; j++) &#123;if (a[i] &gt; b[j]) &#123;s++;&#125;&#125;&#125;cout &lt;&lt; s &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 负二进制 - 题解</title>
      <link href="/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="19a18c50d0a6c7b3546f0c7b26b8189e084c3b4135629528ea88d67d53824c26">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cce1cc1f0fbc27e1d52fb73555db5b68ca124bdad7eaba8fbc9bee8bd54ce067cfb63b48a6ed0a33595d2cca444e77366b20e5e2e399f9d03b04de0f3bf234f55244452db823215e377c187a6b8cd5510645567e5734147409e06e7673d0d3d3bb9e34d0c52dc286e5381290b1fda4f2b84baafb3110b78e5aa4a9ec9975c0cb691c7c00f8c6355b206436ccce3e62ced6a59b66d2159dbc7066eb726a0b418bb580bc059fdd83f3016b47f89d6902cebb8b08b2a108e1c7a2bd04bfe5d8d8d1ea4804b572c4607ecf785210b732af480cec655cf98a86b472b8017b8776458bc83423419a60777259df6b5198ab42b0e2ca3a36a0eccc9508f4108c088505faf8547d9c2215895a7a8dbe4d2ef3312f257ff3ed95e90d7e5f52ab0e90a60cc2ff42aab4339da0cf9af01fb52c9f83349a87bdbb68c9090139ec215f4f0562c7aabce74aece2021996f39987459ce98e10f4cd3f3ed209739eab3616c752291ab3b9739519a93457eb00dcdd682befa77863f802246dea8d04edb5b5d84e6c8a5120286eb5d433ab047d640bf4875c16c0604f2c4483061a31206b0a41155d260d6fee14fb13772c1ad7da655b735cf444fd8771a489d3922d1b4a414ab6bcde428e2ac07735bb2bcdfaab4909665217aea89dea7806a5fe5b2d5d90f14dae9f42fe72ca353036f2b4ac320fc5ef34dd4945a7752311a22a9b30079b76321cdb9504657b46e72bc0007049969e145f16aaaa66f38b32401e43207dd8d2eb7ccfc890d040dc13dcf5dd58ee4e633ea771f2810159d960517132ac7e71a7a0abca2d620c5a6db91424871d94d8dc20f745e64cb9247af219afc1773088bead5b16de7c03b887043f042ee0d9bf4bae279d9c35a33d18d7bd2dd8727b3f182c7d44f53f717e472a63fb550a5481c6d4e1c447a80a6e0afd01e7943931b56f7eca9085eaf7ae06f857df1397b7d8e17058f62da94e271a798825b4eaa8b6b6348931f373c12e0c9b103e9d1661ad67429a18b0d1de262a96bb2f5cbe950a7782773fc9b0864b60b9671736e6de3f9ee97b66661257a4499389691f3df13ccbf630fdf18d18017ac3a6acebd13f701c2cba682f221addb216c3125c4a136e038f30421b9ce5c26508dab192f3127a387e0fc54db5e1174c5f201383205efebb3fd22c4baaf51aa1526e86ca986351c64738c364ca53a819bb58ccdbf129de7c0d89853315d17731eb79f7f062efaa8a01a8f75801a4c7a44d9cd116f5a302746ebf69e705ef7c2bb732819fafd74eac472e82a59459a4256e759e4a5d0e86effe24ae26e6e11aa2cf9c28aafe0a7608b0c89b81021af575b738993bed94d98107e7df8c532d5c24766b102cd6cf0ce261750cf119fbb97301355d7642ed8d3f4d112bc0ade96344e0b72d0be8783c20e266d35d2f07b131b0ce6faa90b4520ae0f94852b725a1e88cda8443bb4101e8b42cf9548e06ce4cea9c43e43d5709012627795ed890d8b3d56bf90254e0a575fb00115af4d835b42d7fd5f90a72cbdb2b416a48e1f3412c21d92e84451c76db1e698a4a5657fbdd58a33c4185d1e84a5d8e02e69517d4eb05d4acc38e8a960bc3defef3c56e67bb2c1ddf0003fd651a746b7f8660a4d6dbbc7fef7a76785f68d8cf105e334f442ca2a9d9ada9807d4a8328d5d0e59a0bc0207b4ea555523fbca47531918d2ff797408dc6bdceae1c9326b52bdb59993a6ab8146c2c181b44c27e4ba744</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 行程码 - 题解</title>
      <link href="/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="2cb4ffd11a6d6efe8dba2f1f79f19b9dc532f75d4f78cfbaa976d75706c805a2">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccc8bc78212f166148a4c68dc108945a7c87f953b3c77e49e7e44003b6ef865d9132ac9d4b448e49006032f292c1d7a8d4c3a2f3588346bead18f59a8802b220477ca98a419cab7333cca188a73e5e912a62974f81df9c8f67a80f9db298bc2900eea623364fda50ee8a32aaf85c6ba7a30602b0de587c970e38217fd622309b15e167ca23b0890ea7500eba2049cf3270233688c3c9486832318b18e5ac7ae48496a490d3d193c99d9103377554cf44763d4b511922aa342d18ae0768f11955b1a88c2525a37c949cba939ff021ab2b9733ad633b46dd364c0d83eddf15aad27e32f47710161da79677cea9b5b0fc4d5321e2ccb28499f309b797fb6b3db42c7774b4d4bbcfed9376f2a3892387d084d355d3d7a3ac35ec0f162e56323bbf0463e441a85e5ab8b2b372194a79e497c81d0864693f5ddfa62b8dbfeecb7ca9fdb87b40d212b06b28cf9f44a11dd20a7687ac671b7ebcd03f9a4e820e1d43054ddf1ebfc9ae668b0957c2399b750e343c3b07fce5b8d9918febeee397eb8b5e8ca7a75e57ced8e99545e1e7b477e1a62fb729a832b99bdc67f85ffbab6a7278262bd15b4af24ae1508393054f48478c6271dc93e4041af905e26e7db6942e4c15c90f8096c47b85f5e89f0af1a28b4df7c091cf7a9abdbedcb4b3d1dc4e7adc6520b8c80fb0c1f5012d71cde098420efebeea615bef56788740c4f10294ca8876fb8b6bce8b2e996f1978fa2542c6273485dfbf8142bfa58d45e7a0c7099f4cb4c2ffea2211c043cdbbd5f7f3a3bbffff900aed90b8386a46de80c18e1c9e52e801e143f5fdedc71ee63b6e6fa08ca37e831370043a8e62788c523816e0bed31446bc7cd77cb8a160e9345366a751bfb6e23a0104e4459ed410cff28621194fbc2e3173f7daaca6f8cc7cb1d7b2b6c616cbcdc3e1cd3d006ebf391992c875c688d12ce4bedc2f1a487a05461f58145a00a06da3f0a0535fda7f5a6abe50eb699afabed189ecd3023a0cf184b11a43f05208f1ce45f05c7733b197652f2b4db7d55319567f12fc09e89c69ec6d0776a0917e11f6acebfb30d9595bbd154354de4cf9d3efb108fd13550dbf5fbfd5989b472a350e9c1759e8682b7a84f7401df2119bdadc766d09eb718a36f0d51c932803bc33c35578d4e7ae143dd4a69bd0bdbe274d6063cee16b4d03cc494e7e9ee6f3bae90c03b4f2adbf664447be1381f92710813b30b4c2c3366d8bfd2bdc02b1a831507fe84103e0630e26b541d8382a0fdca5ef58d8f4c19b28829c3da5dc45fe26765b8229fa65414e1e2ac362b65021481293eeec39462a1d3570542db7c6c78b82188185a651f47d2f0bceb4d9a611ec567c7cc6c4fff4d90abdb43b040a02922d0f90fa6f78ff3f466faeb33e5ec83d55a7dd878a4a3a04794fa823b940535358e80975424c5081268752bcdf4849b926a7007aa4c03a981b7d502e833317fbc77ec5ca89f942dae288ed5ab3380ef7946e1a44b3980a42283b04b0a5a5b7cbc2a736835e843bd9c881d7e7a69294e50ed0cea7242822ab6e099b2ce3e3e4862bcf335c84063b1bec21adb7c9862f1c55afda871d9c85bb00917546ddeb432ea551634ccf4f98143f0e46954b10e01cc707a4c6fb6a256272cc6dc5c32664852f7b2908df11a1a96154ed45f9374e3b4408337d9769679a0071d97d85110e60a7b6c619209c6f2e7a880ab4c768a49187dc368b00fb85d40e5fea2dad12104a4bd43c0b20ebbf1237ba45e358a906a754c5df527ccdb3e52f463902ea96606c88f58a799de1edf93ff561ee8fdd4e9251ccb594a42cfadfcc915d5e23aaf014cecded7798954c7245de76720df7d725b09e9179e91355c4dfa4f268d42da95fbf8b18b3268f41fcee9a13708e645365a460cf67d2f87bc641d9bdbefd159f1ec3b9df37c91f0eb1d0d869f87dcdebd8b5ab0d9660d618a8cce2185d639cf0b36a355aa0b79d7feabc42880d0b5f0b44d239e87f34b7cab25a21f7bd577623b499bdc56f472c375e15de33cf35d58810bdf2ef94c195f9055edd17630ad85600c4cfad933fde750f4a532859c33a07b9770ae8e3e5d5c560cd7b40e7ff430f9031af495c293f60fdfe6cd4aa827adba2f3f4ec88964f4c0e3ac6708417a53cafed3c0e8c3194b25123d395ba79e30338b0551bdfc94736f279e658dc77e7496a468fe35000958eed3bf937b36d05313f0e49aea0b5a101ab7e897349741ca9a32609a3bdae0320a520b7baceb70fae4a07743f9e8c9c17c1b6e11e24f83a44ec92d9c14d14f3eed0b5497a36f4a6f5cf3734d52768201dcadb6ee513c39dbb5c5fc04b797405ba7d3fae6b7f2e1b9b261d1745501d832697886a3ef9d385f14dfedf268a14aad659dea7527cf9a386a8bd7f9f55b8716ec0e9920ca3b3e95b1f264438bc5ca18c3d16adf484a6086e42827f020ccdb087a0f8a1219a9d4275e77a1c414249b6574af9fd29d7157aa7f194c0e66c9acb4d51db0ff5c2265ed5a8ec52f4bb4b3b4a5e86afb0cf8d2f361b11b54ec89967ef68c993fea17cf5e692904d131e123444374a43a0ca5b499e9f16949da5e7802fc211e50082d1af51131dae2104e5b307e036371a74f9845edb0a914978d0305128db4e719f6665c36bbfca929dc41a19eefd2390325abb11b841f544855045379d678bd4e5cb6b99fbbbac8bbece4e66cab8e0f4f62de514826b4b1448281e4597033ca1a16da9bb7d228692d1f25a9eb22500fa5c3948db8ffe01713a351414505cd100488375137f4a230205cd34ee4dc28cb7c758a911f32a3b93b9fae68a66932e964bac360c33228093ee7d05b594c792a0676d1415f8087c455ccb0b60702d579911a70010301ee08dd08a40941b9e77de1e99daa3fcfbca4424c84b620d43bc2cf09188f2e038f7d5f6b13d97d169093e77ae40e9752bab6058231ed29153d30a09d93c1f421ee2f49079ff85c440a939f034c7d8b93e5732bad1be0ceb33638ecda17d97dafb705de14013f819c90681c895ab8b9d33d030e74c35d656107d4b42813addc10eb2d3c01507f435c3e9a1669c589f22dc7212300f54c1fafe033d2970315ff041a4561915bf22f349b0c071aff68d00bfc38c93eb951fff43b0a4571389c389c39e64953643922e62757d1e82b92d4e435c1297792bf66782d5e837991103bccbd5782b41f6e13324610a5508f9105dd49f5581a6afefbf8ec3dad626ed2c1e2345d8e2f656382498e4350438476c58a431ddf79ac9e104e9d16ff7580228159a39624a8203c8299fa12519752d9056d6d6d8612079ec1188e3c174d9bad94817c065f7ea958428902ff9e29753d660e97871bf70eed33626aa2eb426d4b4bfc7a98b3801e0ea39319feb890bef67d711beb62421d6748bea07e8eebc4ccb40acb6a1c532f88a1d6b799db81f878088ebe477ff5a25b18e51a71365dcb34426c68b5267a488592aac74f1e63096d3f5c87484ceb0ffd27b8856f8883399cece5c770268ef73a559817e65a247155a47c4b401db61119efc0122f66bfe376944c7dae786b2ee2145e3c71adbd4caf87382ca1ca6eeec501db288fb2c3849ae45dddff4b2805aaf6a8aba521cb8dda459873e6598c57751c59241f6b3183032cf517b6d5474e5c608953b4cd0247e88d6b77536330d9c98a6cbd40686cc992a31e44496a9d8348956cada88627d1dcb3984567de697fd48e23fe759e9f7e1aeaf652f887b31e1522ad01afd77aa7b77591367e4c603c0f9e494088afde49a6d3fc430df5b03cd14f067ced56a52265f4f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 之吃牛肉 - 题解</title>
      <link href="/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="bc5382a392d3f0a9bb6fcdeb46bc4130c52a4ceb1186617a2f6e3e29bd88e3ec">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccc8bc78212f166148a4c68dc108945a7ce805e7f1284c74605656ae151a7e99ccc13bba264cc0adda75197cf032c1ae90e48193c3b72b9f1225aee60fb142329037b6d959ff543246dbb6f0530c43a4c94af0360aec143c12d6215d0306d2c69301a4ed69403cd70e2a812f2bbbbc100f1c94ef5ea0bf796a08448d99fcd1e41bb89581b18701ba643b5b55e9c0ed977234c4cb3ed3d31e5d9692ed2efdfffe4ab3e1f211a29760182d034f269855325a438f9761c78c4f4935730749f70525144438a9a8d64bb68121642cd9d3670b281f8c34235e64cd3cc00387044eca7f2531250bb508bf9dd77987b558014d2103dc62ea6c3d995b91075e56db7fd775db1ca9b5dabdf16ba3f081136d1dd08e21bdb2c67026120109bafb848891017e97af2193a4186feda3e85191882ed17855bc49e2f624d0b2ce9bca8b4ddcb084b79ac415809f2fdb363f30ba73028ea058f9efac7e798cf84e106b618c8f905a4f772ccc2b1e8cf7e4cbf36527713d7feb8a94fde9cc78ee9452b60acf093d36ca1d60ae199a29b650ec68ebf78c82cee95125ff0c80f4ad0af88a959b0660f681da4f791dbfed1bfb574a0f7d887ebdd20621f353f4ab6bd743505de4404a7eceba0bb81f3182814c14ced3e79b3663234d68ee7ebfb483d557947008e52d87a5dbcc8580c86479aac428ab57399fc6ff72f248ca2729df1a52f169f878b8f0e7b3a247c626de6f56197bfc5ff927661f50c006606f48e1dc8e908b93f475a0350bf2e9d8f3ef78c8fc75fa347801e4ce132354fb9de818b1998ffbbd365234b0f6e8b319ebf0030ff56cad96f63d7a3792f6cfb9f46aad799bc77f21c34b05a6bd5b922b1329e47d37bcb7899457f46f9d488cdc215a75a5ca3250020023c3b89ca09901aa3f9fd6a31b8b9fc0f646ab18a5cd693be67ad4e334a6552204bd85513d21e47de2957b8b905a2210efbee8f239063baf15547aa36f8d7ff62666c512e5e98ca4451e935abce92e6cd936bffa0bde1910e385e5e0d72fafcee9e4aee9b9926ef04b9c8a40536e9ee92956c38f259fc6c3ac06b213fc2d5ee586e96e039d751fc2b0a2ffcbdfa63b7b8c97e38000b995f5eef6e480b872398511106155c998785c97571174ada40de0f3dcd6a239938b055c5acbcec9d24d29a7614d25130a1b1ced04f8cf27460fe847f5d46b74dbff4d3c9c4120d1a7a77bbe6e74af971f80a9bf99e845e69aaffdc01242d71118ed20bf54a6ba6bd3e859c53b8a3d41efd45ba189cdd2ce13159966968cb1f535465288746253b2cde1e1b266bea40aefada8c66eda9035c46e1f685e42542c6d16c674ad31f37486b3f6bf3d389e23f9efca92d4224b72c750f6f60f4f698864fefa2a1f21ea941bae9f9161c1164d6b82622876ebc436260e49e8705c6a58cfafca5de76c068c1c48e74a06869045d1e19b04eb7e5687bfa0a23f2bca2d2bba2700a2042771e8f764edbe3972ec819bb9b55258f2ede414c0d0a78a8ae4b20c3707877b20ba7d68c44dafdf97a3ab19a45d329ec40ca32dc277a8b8347089b21ab1d964d4b5b992a0c2dc3b59900bb0f8aaeb3d6c4fecb2542aab167554e7f673fbea0fa4d5667f0daa29d50b8d043398b26216587c48466f72b0609eac53ea338940daff2ed6818d435c71bf08c4a9aa53788d7639ba94983a285e0e54582e45d34159f0a73dc41c24d88fdea9685016d4b5ceb1d0d8e6fc7331b8c7971ddbb70db7ea33d38ea83a4d5badffb26d6178a2f063a47df743141a7a52bd98f1b4df791da1df034b8e8e7bcb8a3980ffbfd980ca7332afa75ff6d21439b8557b8b3cf49289b83a01b303a575090ca41fcdbce424fdab554c738981c0df59dcd40869f1e9d387b312a344ad14a400bc228e5eb666b59e67c7f79015ce3ba4bab29c01750101e0523731c63989aa8d68c36dd870504d950f8cd0aa52d029f687c5f89b22368a0d632d96794c4b6d0bed381bf47720983587b9e1e8d461217b16aadacfd8453e22560f9fbfa7566b87d2d544444a601b56f56e4357f0a69055fd88c6391b3a8f38304624795bf37f97cf1d660b33a203b1cb7a83f7ff23802af5a70b7dc3e9f118eaa27ffa45a30d4dcb9fa418205ed0cc239c18b44699433e003122128ad08a42b544da0f19fb09fff926cd8d18916b64fc007a41a83260580f8ec500175a18ca567128c84aeba3fa31814fa162dc5108945bc39b5970f7e8f937979b9f0fbe130067965e4fbbd6b70f8c1619d53e2d92525d61f220c433db7ada68a244c5fc7ace94949e4cbe1c12ec9420d739e87dfdcb1d7b8d74c7de6bcebfb7e8a48a810e527a7d26dedf36f4a1e57742fffb5ec4c1a4d29686044032d45d57d00133cacb44067b88792b8492ed51015269b88c4cd34fbe212bb90c39e9cc31be4c27bd626fe2400b94567ecb1610464234b2d5f05d72d6bc270dfcff56bde15c8b2bd65d272c947a852a1fb5b70623e1f58fb61287cdf330e8d19a16f57b01d00433ffbbbae39154ff75495786a9e3fd4dd7e5eb17355f2729329b7c33f9d8b1f2b40b165e46d7c1ed0a7871a481d5d06c26d2bdc4c45f75c9bc46fcaf3e62705034da36be8bb1a9ed033e4a429e5480adccd064650da45ffe099d60ad5a8bbe4694bf153ba073de971a80fc47d3e38eb044ad159351754c00460207522c3f86213c2c060f22ece4b236b65e3f1662debd3f639a4bdf5ffe17910374728f4c6b63096e93e3c7c401a051e181da9a338e6dad38075b372bba678b861699d8a91b61aacf9739a4c5b0367d72cd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 公交车站 - 题解</title>
      <link href="/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="b680a26254fd7784924d535b478f6b75d690bdfd06f1cbfa55d3d01863a02aa5">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58cc3bd371f049ef504a3c48130505d3f692d241d7fcd45db58d6d2f131d4d17a99d732dad59161cb1c9bd1d571afdef6e6a6f9b421b6554029c4e3fdce1ca6556ec3c93a9bd1e558ec2eacbb417b8d73e8dd6bcec263181b9903bde5cced9289c21e41baa3ae5fa595ca4cdfb56dff44c56d7d56e411350d7139ea3d00bf7c1663e2a68c0943d4d100415f6fe2e3b5e38b31d3c31a08f79127d964a8cdca20e1e4b862fe7ea67ea2bcbec7b4c9c40e2bec5d96c662104258c95f7673f05ef6365f39c651013922ee4ece0bbaf26c2985c214041c97b7942c8c6bb7c2250957ffc7c4c4a4ea81a5d577741e96115bb36d728c3bfb0b27379b17c5f23f3d6ade6a7112e056c1f1f1093328ca0e58c6e4d38181deae0aabe34dfb8bddb6207a74853a3013794b10828d08fbdb5e9ffaced2a5b842bc4561fd2f4fe7c52ad56b3b1fa29bc7012d8dc4c8813d7aec3bcf6ca4467d0eb52f9e4b2ba9b52025d920401172279528ba1f10712f8bcf80eb4b945b1e3ae402d0c7afb59e19e59bbac24be72a984bfe7ee74a1bc63fbd889e87e1cee607ee91f44f2d090b99e7c91b7bbc390572927d2c87580389f0063b2c5e3adbbfddc762027f4bc60bc39fa98746e08d9b5eca5190699c97d5a3796e936ca0f894a39c7a75ca4679828913366c98bdc18cde8e41ff0d7b778987d2cdd67f5051d726bd720a0a135e4e222c8ff57851cfa2133f7a3256940c1c0e21f855a0738732368124f1f2b3494e746371f55ade9ae98b82a61d8439675b91dd6764c427bc262b9b1db24593f9a56a14b5831ab4274f0b9349091f54c3aa8b71a3c56cc190fed05943d0f068bc11eb375fb681390421ebce6db004a623bb2e0708de794f753e84a185417b45a14c9e058a9fc157851e5ec16f9f7f2f5fc4482fd59b4e7f4129433e6b276c04c7fc2506fb5a2baaa005807d9076f57dae41b6543e4949ad8f0cd739f16ad9f6a8c9689789e75e21db6b3756a9550ac6ab1ebfbf2596443fa8354f944a32a438fdf46fcb055130150e7a73fb7880aed50acef5f3b13070e253234bbf42ce27dc3d222412ac83906a77edfbd7f1515380e4b1882ef7ed65d68610890fa05a67bbd6ded9fe4913cb6e2a3b38c90580f8dcc04481ed6219985d014357a3a1e6882e324fdf8b746236573fa1f9d58f77fd78b9ba86b111fdbecc62ae81a985db7961fba1056f1c771cb990cb0d7455a23f128449c78d7264ca4fe2fa19e79600c66c935ae6bab724fecaf44f91718c3d2e319fe7e7f5fc25cdedf0e2f5c858af103e46f971f511e8aaceee273181acc003d30d45977606d835b2f5a51d73210393dc12627f7e3379e60d49fd3a54e5b04c573912c311aee5bfbd8e34929764f0493c43bc879253f24ff85c2cdf654501160443e39e4d4bb0c9c5872fc47bc7971f754d90a34ca1f253509313ff892238b0d12cd511e55cc3c7615eb480ad96887a5ac717593be8f62e2f48e6bfc3a55edc71d840fe45a725b7c529ae147b021548a060b56fc6df0455689923514164ecb669af03e7a0fdadb258f788f20380ab285296d64362778a8f152755d2079d8854ad218cebc2dc8f0cc45d0ceb8bb0ee141a17978f7d4a6d3e658b54c6cef13a33ea01b2629278097632c03cd244c52994da3d7e997e1bfdf216740ad8897748e4ff0427f7683593fee15376d327ca6caa60adef81c2cc7d94faf92632d9422d7a63332d43e24e729e00761b0f37f3e34bd6779dc61e0d7a4bd40968afe087544693af2433fb30af1d6bce555adf82e46c272c68a526024091435e2737746fc4b4684924fd9de09175f94046f4ad1dbecbc5c7e1708b5ec8714c6eb16d0678bbbc39ec0bacf8479f9df6391613ebe7f7b39d0654ce01593b15f6902b79730684ba261fe2c19c6980fb68723ab662c0fcaf2bb945048de6e7f867caea056fc6f4b888cc778ca1bd460156bbad81f42e988f84a1c459d6fb2fb24f5a8cc725ddaf2dcb169f4644964c750ee091ba86a81fcbfe945b79f399f8a8e3805134f53ccdf1327b6f82c9bf5c84e7b8a27a9cd2d4f7e6e9ccc4fc072a154fd11105e9a54ac2156e6683a5506bf5a2671f114bfa1a5102079d09068efc3539bdda1a3cd581423dbc1fc8c2cf5f0a44bf8dcc454c1c20bec959ce24dcfe37a90f0e5e2a3a6cafb3c8d8ab80c9f0960c7fe42303289e2859139bd093d84eb15c472db802ca56aa68d0c5e2bb81194f168ddeb55fae67b3939c45326272a59afdd2df73e24aa9491bfb5df1c851164295e32201144d1f7108af5d9f7a1fb7e2b5906a41b3006f0113f18bc2c1db6cb662713cca150afc631f17268134668ddee7f61c9ae73e08424d79064ceae63e625965695482f46eabf8a961b502e9149d47ad31044520ecba7d3999d9ba2d247e111d91e2e223692166056031911ab3ca91399c22bd8722dc9b5d07b8ee69aa6267a52281bd0497a0c0955abec3942afce4caf68680137df28ee326f99e786f8372e5cd929d549966db46f012fa55cdc733d95c8dc9a5c1c34de569f7fdab2a880128bda10dbb6b11ca02832cfd691bb391dbb073986a44f2ba3c8df82831ea4e09c273fadbd3135e793ee2296825f6a6b2f54e1241ae71c69ec9ccd2279395dda1d2f1812f7634a433ef2f6e61091ae221b75b6d8a4dac51090968ce0d15fe146e5861b6ed0f314517b14185cdd62fa0d9cbb39dec23348dd17e809ebf45de6511c3c7038f1cffe185af053d7f35fb7ac22da19f836eaf87c25f3f6714ff83142ea5b364158548960ff820767d035a1bdaca570fb8380df01fd67de34d3d0e805206384a118fae0916ab88a07ccd13b5b1cfbf5e363e47a2427ef49a11f6820568764719718437c01e0bb70e9bdb19a3c2bc2a08e9531dbee2a11e174a11c453d353ac8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Hands - 题解</title>
      <link href="/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这题看上去很难，但分析后就可以一个循环解决。</p><p>每次取牌如果有一个连续的大于 $0$ 的数列，那就全部取出，取到其中的某一个数等于 $0$。</p><h3 id="代码分析">代码分析</h3><p>边输入边累加，记住当 $x - last &lt; 0$ 时，就不要累加。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int ans = 0, n, x, last;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; x;ans += max(0, x - last);last = x;&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/08/05/LG-Hands-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WFR - 如何使用 Warfarin</title>
      <link href="/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/"/>
      <url>/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-Warfarin">什么是 Warfarin</h2><p>Warfarin 是一个由 C++ 编写而成的解释型语言。</p><h3 id="Warfarin-的特点">Warfarin 的特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li></ul><p>具体信息请看<a href="https://www.luogu.com.cn/discuss/show/334473">这里</a></p><h2 id="如何使用-Warfarin">如何使用 Warfarin</h2><p>Warfarin 最新版本：<strong>3.17</strong></p><h3 id="下载-配置">下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-运行">编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code></p></li><li><p>编译运行 <code>.wfr</code> 源文件（请看下文）</p></li></ul><p>Warfarin 的源文件扩展名一般为 <code>.wfr</code>，</p><p>使用 <code>Warfarin.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code>，</p><p>此命令会编译出一个 <code>.ff0</code> 文件，相当于 C++ 的 <code>.exe</code> 文件，<s>但不能双击运行</s>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接">相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip">本站下载链接（自带 exe）</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://www.luogu.com.cn/discuss/show/334473">作者发布帖</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件</a></p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/">https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warfarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 买二送一 - 题解</title>
      <link href="/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><blockquote><p>凡是顾客购买两本书，就可以免费带走第三本书，只要免费书的价格不超过两本付费书各自的价格即可。</p></blockquote><p>可以使用排序来做。</p><h3 id="代码分析">代码分析</h3><p>排序，建议偷懒使用 <code>sort</code> 函数，<strong>But</strong> 是降序排序，所以要写炒鸡简单的 <code>cmp()</code> 函数。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, a[100001], ans = 0;bool cmp(int x, int y) &#123;return x &gt; y;&#125;int main() &#123;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a + 1, a + n + 1, cmp);for (int i = 1; i &lt;= n; i += 3) &#123;ans += a[i] + a[i + 1];&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 方舱医院 - 题解</title>
      <link href="/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是炒鸡淼的小学一年级数学应用题（（（</p><h3 id="代码分析">代码分析</h3><p><s>由于本题过于淼所以不分析。</s></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int a, b, c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;cout &lt;&lt; (a / c) * (b / c) &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/31/LG-方舱医院-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 开关灯 - 题解</title>
      <link href="/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="d41c2769d4a45772b103a8d3524dbc2b84bd06160a7117b3fa81bf148241c419">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c2f13af0f31a29ab62941722a1d1e58ccdcde5378717cb9e635f4b903034ab6b97ee1d8396c7e033c70553612e64bd83959c3f528830d853da86e090337d55d540a8d4b9ff39d51a5c873d9e6e35263652f47abe95affe39677987353e6a205ad00f1811ca82bcb4caa94ce6a7a79ef35af902be7ca14003a511302b6f3b9dd88c34466f7d0b153ce9ecf833b5d987f78b8c83862085afcf4a04f168a0ca2015643981778c9c09cca5323df8b8480d0aff94fff3b14dbb8bc5f5b4b5446e38295c014e2ca3372d2087cdc12bd30818702380f41e47e14285b2446e36c9412feb6cdb50145773c2d304ac881419e953c4dc77b1cc6e67a568891310b4ec9c3aa6363d995f24cd473ab13cabb763db3b59fba29952a19aa7df9d35876e9466d52c2a6a0984927f3f6719c28525cea1a6d99742ad83d5537c3602d033d2137527d56b3e945a25ecc464ff985b0126ffcd62a71edabe64683640c82c7f57faf3ded2b1bf26e50be1dec7684c44f2e0a686b12883d00001251b7aa3cf722ffe068b223078cd997a6f49d99ca0346c21ba5a7964c15507bb16706cd098c896f6f42823cab038ab67e9801fd5a48c9aef64b1d9a3eeb7fbf09ef1da0b03699e6ae1ed4e7dac0ff87cfcad561f86eff5636461a1005cedbade39f2d02ee719842c444799e97aa6fb816a3dd44dcf7c7864bd65bdd87ab705b6113e82dc731c6b9b7bbfe890136ecd0b46ca816305f3f3179b97767e76e93c0caa6e3189b54e1c469f4c5ed076b293a3875f076e5f4ab39e47288998e98be4c9fce23e6bebf5fc9f48d1a42c7966611f5d8f23006adcc608e2d47fe346cbae47b601c36398db4f0cbc79066b94e7905c78e122011dd8387c545ad567c80fb3b8b56b33196a2def76ac38f6acbf7f8005623f6fba9df790183656eaf385708d2718d127552975cce8788ebcfd75a715c0a92b6a8c1e3543bdbfd63dc775bf67d479a9c20c03ea43754b07e3d187d0c5f227b1eef3caa657978cbb97a6c39d557d1036c47c7a98c9b806dc8eb7e80ce62acf299b075782dc71bcd1ba8127ef28264d720a37adb48fd26cba01a6b2f8a1ad550be75539bc90873ac60eeb57c6ef083f3f3500b57ceeb83843a0170c43a660d3827e046ebdb18f2e64d70873d45b1e6082b7d5b58ae2b8dc0ec048f532314bc2ab2cb4d48aa70a889b80f770fe54b441d43aba586af9fa3cd4892d890dbeeaa80f3c8f039f70566754224a901c78eb2d0d4d406c4ac4fd8f1cbe78efc05f078efe20f8a30f441d9049ca357f78dda14d06ba5bcb7bb40b7b866ad8930ea4f5c6b50de1ba03788c664c19ef3482371149a4a8e0d3652977c7f3208ae46eb13c8c7f98a2834404c41bdf8646b527e3523576cf37ae605f19b1c50b8ae72d243688db53e5e08d13f683e6cffc1efe69e409a23f41b4f6130b61410c468947c027db54f832c451af9d610b7807a441055c312133af41d9014b9d8d49565358819ce7ad7ce4041e9e97164cff12ab495b92daf0d9d57550675c6f026cbcc5457762b439e5a2e81aeab16ebaa9eab11406375424f4b0e22c924b0cabafe53995a44c85c3f8d0aec85cbfbc01855d4d9079a6621cb8a7433a56620c17cd07767e81f13bef3cfd1b6efa61e3b3918905ace7a07084ef8cebb3302abb0e9bd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 古老的 A + B - 题解</title>
      <link href="/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>This is the waterest problem I had ever seen.</s></p><p>好吧 A + B 最 water。</p><p>没啥好讲的，就一个循环。</p><h3 id="代码分析">代码分析</h3><p>直接读入然后来个循环，注意输出格式。</p><p>时间复杂度 $O©$，空间复杂度 $O(1)$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int a, b, c;cin &gt;&gt; c;for (int i = 0; i &lt;= c; i++) &#123;a = i;b = c - i;cout &lt;&lt; a &lt;&lt; &quot;*&quot; &lt;&lt; b &lt;&lt; &quot;=&quot; &lt;&lt; a * b &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-古老的-A-B-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 排序 - 题解</title>
      <link href="/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡淼的 C++ <code>if</code> 语句题（?）。</p><p>太淼了就不解释了</p><h3 id="代码分析">代码分析</h3><p>全读入完来个函数判断就行了。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[6], b[6], cnt1, cnt2, tot1, tot2;int mysort() &#123;if (cnt1 &gt; cnt2) &#123;return 1;&#125; else if (cnt1 == cnt2) &#123;if (tot1 &gt; tot2) &#123;return 1;&#125; else if (tot1 &lt; tot2) &#123;return 2;&#125; else &#123;return 0;&#125;&#125; else &#123;return 2;&#125;&#125;int main() &#123;for (int i = 0; i &lt; 6; i++) &#123;cin &gt;&gt; a[i];cnt1 += a[i];if (a[i] == 50) tot1++;&#125;for (int i = 0; i &lt; 6; i++) &#123;cin &gt;&gt; b[i];cnt2 += b[i];if (b[i] == 50) tot2++;&#125;cout &lt;&lt; mysort() &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/26/LG-排序-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 生小虫子 - 题解</title>
      <link href="/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这道题其实就在检验 <code>for()</code> 循环的应用。</p><h3 id="代码分析">代码分析</h3><p>读入一切信息后，</p><p>写一个循环 $z$ 次的 <code>for</code> 循环，如果满足条件 <code>k == x</code>，小虫子数量增加，反之 <code>s1 = 0</code>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int k = 0, x, y, z;cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;int s1 = 0, s2 = 0, cc = 1, cl = 0;for (int i = 1; i &lt;= z; i++) &#123;k++;cl += cc;cc = s2;s2 = s1;if (k == x) &#123;s1 = cl * y;k = 0;&#125; else &#123;s1 = 0;&#125;&#125;cout &lt;&lt; cc + cl &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 合成大西瓜 - 题解</title>
      <link href="/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道 C++ 枚举题，只要遍历 $b$ 数组就 $ok$ 了。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$，$b_x = b_x + 1$;</p><p>遍历 $b$ 数组。</p><p>倒着遍历，一旦发现有符合条件的数，直接输出并结束程序。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, b[201];int main() &#123;int x;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; x;b[x]++;&#125;for (int i = 0; i &lt; n; i++) &#123;b[i + 1] += b[i] / 2;&#125;for (int i = n - 1; i &gt;= 0; i--) &#123;if (b[i] != 0) &#123;cout &lt;&lt; i + 1 &lt;&lt; endl;break;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 救援争先 - 题解</title>
      <link href="/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡不淼的 C++ 结构体排序题，我卡 <code>cmp</code> 了好久。</p><p>就俩循环读入 &amp; 输出，<code>sort()</code>，还有<strong>万恶</strong>的 <code>cmp</code>。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i . sh, a_i . sm, a_i . dh, a_i . dm$;</p><p>使用 <code>sort()</code> 结构体排序;</p><p>循环输出排序后的 $a_i$。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct Node &#123;int sh, sm, st, dh, dm, et, id;&#125; a[1001];bool cmp(Node a, Node b) &#123;return a.et &lt; b.et || a.et == b.et &amp;&amp; a.st &lt; b.st || a.et == b.et &amp;&amp; a.st == b.st &amp;&amp; a.id &lt; b.id;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;scanf(&quot;%d:%d %d:%d&quot;, &amp;a[i].sh, &amp;a[i].sm, &amp;a[i].dh, &amp;a[i].dm);a[i].st = a[i].sh * 60 + a[i].sm;a[i].et = a[i].st + a[i].dh * 60 + a[i].dm;a[i].id = i + 1;&#125;sort(a, a + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; a[i].id &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之武魂融合技 - 题解</title>
      <link href="/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道炒鸡淼的 C++ 模拟题，也不卡 <code>long long</code>。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$ 和 $y$。</p><p><strong>一边输入一边计算，速度快</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, x, y, z;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; x &gt;&gt; y;z = (x + y) * 2;cout &lt;&lt; z &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 前 n 个偶数位回文数之和 - 题解</title>
      <link href="/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>这道题目就不淼了，变成沝了。</s></p><p>写几个函数就不行了。</p><p><s>真 简 单</s></p><p><s>250lht：呜呜呜这是比赛赛题，我保龄。</s></p><h3 id="代码分析">代码分析</h3><p>输入 $n$，写个循环判断从 $1$ 起的每一个数，如果满足函数 <code>weishu</code> 和函数 <code>huiwen</code>，则加到计数器。</p><p>这时有人就会问了，<code>huiwen</code> 函数中的 <code>_itoa_s()</code> 是神马东西，请看<a href="https://blog.csdn.net/smcrystal/article/details/71191335?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base">这里</a>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool huiwen(int g) &#123;int i, j;char b[1001];_itoa_s(g, b, 10);for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>以上代码交到洛谷上会 <strong><a href="https://www.luogu.com.cn/record/54096300">CE</a></strong>，你谷居然无法使用 <code>stdlib.h</code> 的 <code>_itoa_s()</code> ???</p><p><strong>偷懒失败</strong>，只好自己写转换函数。</p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;int i = 0, k, n;char temp;if (m &lt; 0) &#123;s[i] = '-';m = -m;i++;&#125;while (m &gt; 0) &#123;n = m % 10;m /= 10;s[i] = n + '0';i++;&#125;s[i] = '\0';if (s[0] == '-') k = 1;else k = 0;for (int j = k; j &lt; i / 2; j++) &#123;temp = s[j];s[j] = s[i - j - 1 + k];s[i - j - 1 + k] = temp;&#125;&#125;bool huiwen(int g) &#123;int i, j;char b[1001];int_to_string(b, g);for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之魂系辨认 - 题解</title>
      <link href="/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>@250lht 这道题目太淼了！</p><p>不多废话，这道题直接写一连串的 <code>if</code> 语句就行了。</p><blockquote><p><strong>P.S.由于 Windows 操作系统终端使用 GB2312，所以无法正确显示中文，但这不会影响洛谷评测结果</strong></p></blockquote><p>审题人真的良心，写了这个，不说的话我还以为我代码出 BUG 了呢。</p><h3 id="代码分析">代码分析</h3><p>输入 $n$，循环读入 $a_i$，尽量<strong>一边读入一边输出</strong>，<strong>速度快</strong>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void judge(int n) &#123;if (1 &lt;= n &amp;&amp; n &lt;= 4) cout &lt;&lt; &quot;魂土&quot;;if (5 &lt;= n &amp;&amp; n &lt;= 14) cout &lt;&lt; &quot;魂师&quot;;if (15 &lt;= n &amp;&amp; n &lt;= 34) cout &lt;&lt; &quot;大魂师&quot;;if (35 &lt;= n &amp;&amp; n &lt;= 39) cout &lt;&lt; &quot;魂王&quot;;if (40 &lt;= n &amp;&amp; n &lt;= 49) cout &lt;&lt; &quot;魂宗&quot;;if (50 &lt;= n &amp;&amp; n &lt;= 54) cout &lt;&lt; &quot;魂尊&quot;;if (55 &lt;= n &amp;&amp; n &lt;= 59) cout &lt;&lt; &quot;魂帝&quot;;if (60 &lt;= n &amp;&amp; n &lt;= 69) cout &lt;&lt; &quot;赤炎斗罗&quot;;if (70 &lt;= n &amp;&amp; n &lt;= 79) cout &lt;&lt; &quot;巅峰斗罗&quot;;if (80 &lt;= n &amp;&amp; n &lt;= 89) cout &lt;&lt; &quot;封号斗罗&quot;;if (90 &lt;= n &amp;&amp; n &lt;= 100) cout &lt;&lt; &quot;海神&quot;;cout &lt;&lt; endl;&#125;int main() &#123;int n, a[101] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];judge(a[i]);&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 2 - 题解</title>
      <link href="/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这道题目应使用算法库函数 <s>当然自己手写也行</s> 和类型转换。</p><h3 id="代码分析">代码分析</h3><p>先输入 $x$ 和 $y$，直接输出 $\lceil x \div y \rceil$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long。</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long a, b;cin &gt;&gt; a &gt;&gt; b;cout &lt;&lt; ceil((double)a / (double)b) &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - gcd 与 lcm - 题解</title>
      <link href="/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><h3 id="代码分析">代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数。</p><p>（算法库里有 int 的：<code>__gcd</code>，不过本题卡 long long）</p><p><strong>注意本题数据范围 $10^{10}$，卡 long long</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;long long gcd(long long a, long long b) &#123;if (a % b == 0) return b;else return gcd(b, a % b);&#125;long long lcm(long long a, long long b) &#123;return a * b / gcd(a, b);&#125;int main() &#123;long long T, a, b;string mode;cin &gt;&gt; T;while (T--) &#123;cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;if (mode == &quot;gcd&quot;) &#123;cout &lt;&lt; gcd(a, b) &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; lcm(a, b) &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（2） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ <strong>结构体</strong>排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，$a$ 一样的按 $name_0$（字符串首） 的 ASCII 码<strong>从小到大</strong>排序，所以我们还要自己写 <code>cmp</code> 函数，来比较两结构体。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<s>偷懒</s>，写一个 <code>cmp</code>。</p><p><s>出题人 NB！！！不卡我们 long long 了</s></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct node &#123;string name;int a;&#125; wx[101];bool cmp(node a, node b) &#123;if (a.a == b.a) &#123;return a.name[0] &lt; b.name[0];&#125;return a.a &gt; b.a;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; wx[i].name &gt;&gt; wx[i].a;&#125;sort(wx, wx + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; wx[i].name &lt;&lt; endl;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（1） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ 排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，所以我们要自己写 <code>cmp</code> 函数，来判断升序。</p><h3 id="代码分析">代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<s>偷懒</s>，写一个 <code>cmp</code>。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(long long a, long long b) &#123;return a &gt; b;&#125;int main() &#123;int n;int a[1001] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];&#125;sort(a, a + n, cmp);for (int i = 0; i &lt; n; i++) &#123;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 - 题解</title>
      <link href="/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p>这是一道典型的 C++ 语言入门题。</p><h3 id="代码分析">代码分析</h3><p>直接输入正整数 $n$ 再输出 $n \times 10$。</p><p>或者输入字符串 $n$ 再输出 $n + ‘0’$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long（使用方法 2 可无视）</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long x;cin &gt;&gt; x;cout &lt;&lt; x * 10 &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p>本文链接 <a href="https://ren-yc.github.io/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/">https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/03/hello-world/"/>
      <url>/2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>本文链接 <a href="https://ren-yc.github.io/2021/06/03/hello-world/">https://ren-yc.github.io/2021/06/03/hello-world/</a> 文章转载需注明出处</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
