<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『题解』Luogu - UVA10041 Vito&#39;s Family</title>
      <link href="/blog/2022/01/11/uva10041-solution/"/>
      <url>/blog/2022/01/11/uva10041-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10041" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10041" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><a href="https://www.runoob.com/python/python-lists.html">Python 中列表（数组）的基本使用</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定每个点所在的位置，求任意一个点到其他点的最短路程和。（点都在一条直线上）</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>$\because$ 多个点直接中位数点距离各个点的距离和最短</p><p>$\therefore$ 编写代码求中位数即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>献上<del>简洁的</del> Python 3 代码：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">n = int(input())#记得强转for _ in range(n):#可以变成 while n &gt; 0:...n -= 1    b = list(map(int, input().split()))#Python 的独特输入方式    del b[0]#对于 Python 来说第一个数据没用    b.sort()#排序    s = 0#定义并清零    c = b[len(b) // 2]#中位数，&#39;//&#39; 为整除    for i in range(len(b)):#默认由 0 至 len(b)        s += abs(c - b[i])#计算距离    print(s)#输出总和</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva10041">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/uva10041-solution/">https://ren-yc.github.io/blog/2022/01/11/uva10041-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA465 Overflow</title>
      <link href="/blog/2022/01/11/uva465-solution/"/>
      <url>/blog/2022/01/11/uva465-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA465" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/465" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定两个正整数和两数之间的符号，为 $+$ 或 $\times$。</p><p>判断这两个数中的一个数或者运算结果是否大于 <code>int</code> 范围。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>众所周知，<code>int</code> 的范围是 $2^{31} - 1$ 即 $2147483647$，本题使用 C++ 大概率会导致 <code>int</code> 溢出，也有小概率会导致 <code>unsigned long long</code> 溢出。</p><p><strong>这时候，我们就需要 Python 了！！！</strong><img src="https://图.tk/a" alt=""><img src="https://图.tk/a" alt=""><img src="https://图.tk/a" alt=""></p><p>这样一来就好办了，可以一直输入直到 <code>End Of File</code>，并判断，写一个 <code>while True</code> 就解决了。</p><p>本题使用 Python 解题的难点是<strong>如何判断 EOF？</strong></p><p>众所周知，Python 有着一堆 <code>Error</code> 类，一不小心就会引发并终止程序，在 OJ 上显示为 RE，所以很难判断具体为哪个错误类。</p><p>Python 不像 C++ 一样可以直接用 <code>!= EOF</code> 判断输入是否为 EOF，需要用 <code>try except</code> 语句实现。</p><p>本题坑点（<strong>英语好的人自动跳过</strong>）：</p><p>一个输入可以输出 $0 \sim 3$ 行判断，不是固定输出一行。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>献上简洁的 Python 代码：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">import sys#可把 break 换成 sys.exit()MAX = 2147483647#2^31-1while True:#无限循环直到 EOFError    try:#try ... except ...        s = input()#尝试输入    except EOFError:#如果引发错误        break#结束程序，也可使用 sys.exit()    print(s)    l = list(s.split())#列表存储    if int(l[0]) &gt; MAX:#注意转换类型        print(&quot;first number too big&quot;)    if int(l[2]) &gt; MAX:#可以两个数都超 int，用 if        print(&quot;second number too big&quot;)    if l[1] == &quot;+&quot; and int(l[0]) + int(l[2]) &gt; MAX:#注意有两个条件        print(&quot;result too big&quot;)    elif l[1] == &quot;*&quot; and int(l[0]) * int(l[2]) &gt; MAX:#if 也可以        print(&quot;result too big&quot;)</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva465">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/uva465-solution/">https://ren-yc.github.io/blog/2022/01/11/uva465-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11727 Cost Cutting</title>
      <link href="/blog/2022/01/11/uva11727-solution/"/>
      <url>/blog/2022/01/11/uva11727-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11727" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11727" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定 $3$ 个整数，求中间数。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>循环输入 $3$ 个数（<strong>循环值从 $1$ 开始</strong>），再存入列表（数组），输出排序后的列表的第 $2$ 项值（即中间数）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Python 代码简洁又明了。</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">t = int(input())#注意默认输入为字符串，要强制类型转换for i in range(1, t + 1):#由 1 开始    a, b, c = map(int, input().split())#Python 无法一行直接输入多个值    l = [a, b, c]#存入    l.sort()#排序    print(&quot;Case &quot; + str(i) + &quot;: &quot; + str(l[1]))#非字符串无法合并，所以要强制类型转换</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11727">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/uva11727-solution/">https://ren-yc.github.io/blog/2022/01/11/uva11727-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - SP7733 HPYNOS - Happy Numbers I</title>
      <link href="/blog/2022/01/11/sp7733-solution/"/>
      <url>/blog/2022/01/11/sp7733-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/SP7733" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/spoj/7733" title="点击跳转至 Sphere online judge">Sphere online judge</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Happy Number 的分裂规则是<strong>每次分裂的都不同</strong>，<strong>最终分裂成</strong> $1$，如果重复输出 $-1$。</p><p>直接按照题意模拟即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Python 的代码极度简洁:</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">import sys#退出程序用到的模块a = []#数组初始化cnt = 0#次数归零n = int(input())#切记int()，默认输入字符串while True:#无限循环直到退出    s = 0#归零    m = n#临时变量    while m &gt; 0:#m的位数次        x = m % 10#取模        s += x * x        m //= 10#整除    cnt += 1#次数    if s == 1:#和为1        print(cnt)#输出次数        sys.exit(0)#退出    a.append(s)#在末尾添加    n = s#更新    for i in range(0, len(a) - 1):#不包括当前的        if a[i] == s:#重复            print(-1)            sys.exit(0)#退出，相当于 CPP return 0;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-sp7733">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/sp7733-solution/">https://ren-yc.github.io/blog/2022/01/11/sp7733-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - SP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA12503 Robot Instructions</title>
      <link href="/blog/2022/01/11/uva12503-solution/"/>
      <url>/blog/2022/01/11/uva12503-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA12503" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/12503" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>一只机器人站在一条线的零点，<code>LEFT</code> 命令使它向左走一格，<code>RIGHT</code> 命令则是向右走一格，求机器人最终所在的位置。</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>我们可以定义一个 $a$ 数组，用于存放命令，且只能有 $-1$ 和 $1$ 两个值，分别代表往左和往右。</p><p>读入的话可以写一个函数，使用 Python 数组的 <code>append</code> 函数在数组末尾追加数值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>详细解释在注释中。</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">a = []def f(c):#输入函数    if c == &quot;LEFT&quot;:#判断        a.append(-1)#追加        return -1    elif c == &quot;RIGHT&quot;:        a.append(1)#追加        return 1    else:        a.append(a[int(c) - 1])#追加        return a[-1]t = int(input())for _ in range(t):#循环    m = int(input())#输入    a = []#清空数组    now = 0#清零    for i in range(m):        k = list(input().split())        if len(k) == 1:            now += f(k[0])#移动        else:            now += f(k[2])#同上    print(now)#输出</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva12503">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/uva12503-solution/">https://ren-yc.github.io/blog/2022/01/11/uva12503-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10035 Primary Arithmetic</title>
      <link href="/blog/2022/01/11/uva10035-solution/"/>
      <url>/blog/2022/01/11/uva10035-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10035" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10035" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定两个整数，请你求两数相加时进位的个数。$^*$</p><p>$^*$ 上文为转载: <a href="https://keaidexiaoyu.blog.luogu.org/solution-uva10035">https://keaidexiaoyu.blog.luogu.org/solution-uva10035</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong><a href="https://blog.csdn.net/cjx14060307101/article/details/103168330">Python 3 中的各种赋值运算符</a></strong></p><h3 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h3><p>由于使用的是 Python，无法使用 <code>while (cin &gt;&gt; a &gt;&gt; b)</code>，我们可以先套一层 <code>while True</code>，遇到 $a, b = 0$ 直接 <code>break</code>，由于 $a, b \le 10^{10}$，所以我们写一个循环 $10$ 次的 <code>for i in range(10)</code> 判断每一位的进位情况：</p><ul><li><p>如果 $&gt; 9$ 计数器加一；</p></li><li><p>其他情况 计数器不变。</p></li></ul><p>我们可以使用 <code>//=</code>，用于把 $a, b$ 都减少一位。</p><p>输出就不讲了，只有一个关键点：C++ 的 <code>else if</code> 在 Python 中为 <code>elif</code>，并且他们不是函数而是关键字，可以不带括号。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>不需要导入任何模块</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">while True:    a, b = map(int, input().split())    cnt = 0    if (a == 0 and b == 0):      break    c = 0    for i in range(10):      c = a % 10 + b % 10 + c      if c &gt; 9:        c = 1      else:        c = 0      cnt += c      a //= 10      b //= 10    if cnt == 0:      print(&quot;No carry operation.&quot;)    elif cnt == 1:      print(&quot;%d carry operation.&quot; % cnt)    else:      print(&quot;%d carry operations.&quot; % cnt)#毒（jian）瘤（dan）的输出格式</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva10035">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/uva10035-solution/">https://ren-yc.github.io/blog/2022/01/11/uva10035-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF550A Two Substrings</title>
      <link href="/blog/2022/01/11/cf550a-solution/"/>
      <url>/blog/2022/01/11/cf550a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF550A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/550/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题很简单，用一个字符串代替原来输入的字符串，把 <code>BA</code> 和 <code>AB</code> 用 <code>.</code> 代替。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头using namespace std;int main() &#123;    string s;    cin &gt;&gt; s;    int AB = s.find(&quot;AB&quot;);//定义&quot;AB&quot;的位置    int BA = s.find(&quot;BA&quot;);//定义&quot;BA&quot;的位置    if (AB != -1) &#123;        string temp = s;//定义临时字符串temp        temp.replace(AB, 2, &quot;.&quot;);//用&quot;.&quot;代替        int BA = temp.find(&quot;BA&quot;);        if (BA != -1) &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;//如果没有输出YES            return 0;//结束程序        &#125;    &#125;    if (BA != -1) &#123;//同上        string temp = s;        temp.replace(BA, 2,&quot;.&quot;);        int AB = temp.find(&quot;AB&quot;);        if (AB != -1) &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;            return 0;        &#125;    &#125;    cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;//如果都没有找到输出NO    return 0;//华丽结束&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf550a">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/cf550a-solution/">https://ren-yc.github.io/blog/2022/01/11/cf550a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF268A Games</title>
      <link href="/blog/2022/01/11/cf268a-solution/"/>
      <url>/blog/2022/01/11/cf268a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF268A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/268/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>球队间打比赛，分主场和客场，要求一场比赛中两支队伍服装不能相同，求满足条件的场数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力枚举。</p><p>详细解析见下注释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头using namespace std;int main() &#123;    int n, a[101] = &#123;0&#125;, b[101] = &#123;0&#125;, cnt = 0;    cin &gt;&gt; n;//输入场数    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i] &gt;&gt; b[i];//输入两支队伍服装的颜色    &#125;    for (int i = 0; i &lt; n; i++) &#123;//枚举        for (int j = 0; j &lt; n; j++) &#123;            if (a[i] == b[j]) cnt++;//计数器自增        &#125;    &#125;    cout &lt;&lt; cnt &lt;&lt; endl;//输出计数器    return 0;//好习惯&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf268a">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/cf268a-solution/">https://ren-yc.github.io/blog/2022/01/11/cf268a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1475A Odd Divisor</title>
      <link href="/blog/2022/01/11/cf1475a-solution/"/>
      <url>/blog/2022/01/11/cf1475a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1475A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1475/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>判断一个数能否被一个大于 $1$ 的数整除。</p><p>我们最先想到能一直除以 $2$，如果余数为 $1$，那么输出 <code>NO</code>，否则输出 <code>YES</code>。</p><p>还要注意一点 $n$ 的范围是 $10$ 的 $14$ 次方，$\mathrm{INT_MAX} \approx 10^9$，所以要用 <code>long long</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long t, n;    cin &gt;&gt; t;    for (int i = 1; i &lt;= t; i++) &#123;        cin &gt;&gt; n;        while (n % 2 == 0) &#123;            n /= 2;        &#125;        if (n == 1) &#123;            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf1475a">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2022/01/11/cf1475a-solution/">https://ren-yc.github.io/blog/2022/01/11/cf1475a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1598A Computer Game</title>
      <link href="/blog/2021/10/11/cf1598a-solution/"/>
      <url>/blog/2021/10/11/cf1598a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1598A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1598/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>给定两行字符串，求能否从左上角走到右下角（<code>0</code> 为可走，<code>1</code> 为不可走）。<strong><del>（超简洁翻译）</del></strong></p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>我们可以读入完字符串后循环遍历，两两比较，如果有 $s1_i = s2_i$，说明无法通过，则 $flag = true$（也可以输出后直接 <code>continue</code>）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁！using namespace std;int main() &#123;    int t;    cin &gt;&gt; t;    while (t--) &#123;//几乎每道 CF 题都要        int n;        bool flag = false;        string a, b;//不使用 char 数组（复杂、麻烦）        cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;        for (int i = 0; i &lt; n; i++) &#123;            if (a[i] == &#39;1&#39; &amp;&amp; b[i] == &#39;1&#39;) &#123;//两行都为 1                flag = true;//发现            &#125;        &#125;        if (flag == 0) &#123;//若未发现            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;        &#125; else &#123;//否则            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf1598a">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120711294">CSDN 博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/10/11/cf1598a-solution/">https://ren-yc.github.io/blog/2021/10/11/cf1598a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF44B Cola</title>
      <link href="/blog/2021/10/06/cf44b-solution/"/>
      <url>/blog/2021/10/06/cf44b-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF44B" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/44/B" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>本题第一眼可以看出是一道暴力枚举，但是不能用三层 <code>for</code> 循环，$100\%$ 超时。</p><p>所以我们可以先从 $2$ 升的可乐开始循环，通过前两个循环来推算出 $0.5$ 升可乐的数量。</p><p><strong>注意：本题的 $a$ 为 $0.5$ 而 $n$ 为整型，第一层循环要两个两个加</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//懒人专用using namespace std;int main() &#123;    int n, a, b, c, ans = 0;    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;    for (int i = 0; i &lt;= a; i += 2) &#123;//n 必须是整数，但 a 是 0.5 升，所以两个两个加        for (int j = 0; j &lt;= c; j++) &#123;            if (n - (i / 2 + j * 2) &lt;= b &amp;&amp; n - (i / 2 + j * 2) &gt;= 0) &#123;//算总量并判断是否小于等于 b 和 n                ans++;            &#125;        &#125;    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf44b">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120628543">CSDN 博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/10/06/cf44b-solution/">https://ren-yc.github.io/blog/2021/10/06/cf44b-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『游记』CSP-J 2021 初赛</title>
      <link href="/blog/2021/09/19/csp-j-2021-1/"/>
      <url>/blog/2021/09/19/csp-j-2021-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="164d70093eea65b4cedff5f8ca9d6d46bcde432d211b3fa88010484a2886a184"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> NOI Series </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11559 Event Planning</title>
      <link href="/blog/2021/09/14/uva11559-solution/"/>
      <url>/blog/2021/09/14/uva11559-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11559" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11559" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>作为一次短途旅行的组织者，你需要根据参与人数、预算、酒店及其周末空余床位的情况，决定是否成行。其中旅游人数 $N$，预算 $B$，可供考虑的酒店数量 $H$，可选择的出行周末 $W$。其中 $H$ 确定之后，会输入 $H$ 组数据，每两行为一组，第一行表示该酒店的人均住店费用 $p$，第二行表示 $W$ 个周末对应每个周末该酒店的床位空余情况 $a$。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>本题很明显就能看出是一道模拟题。</p><p>只需要在输入的时候顺便计算一下是否超预算。如果有，则顺便记录下是否是更低的预算即可。如果都超预算，那么输出 <code>stay home</code>，否则就输出记录的那个更低的预算。</p><p><strong>一般 UVA 的题读入行数是不给定的，所以我们要使用</strong> <code>while (cin &gt;&gt; n)</code> <strong>或者</strong> <code>while (~scanf(&quot;%d&quot;, &amp;n))</code><strong>。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁using namespace std;int main() &#123;    int N, B, H, W, p, a, Min = INT_MAX;//Min 根据个人喜好设置较大数    while (cin &gt;&gt; N &gt;&gt; B &gt;&gt; H &gt;&gt; W) &#123;//如果是 scanf 可以加上 != EOF        for (int i = 0; i &lt; H; i++) &#123;            cin &gt;&gt; p;            for (int j = 0; j &lt; W; j++) &#123;                cin &gt;&gt; a;                if (a &gt;= N) Min = min(Min, p * N);//读入时求最小值            &#125;        &#125;        if (Min &lt;= B) &#123;            cout &lt;&lt; Min &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; &quot;stay home&quot; &lt;&lt; endl;        &#125;        Min = INT_MAX;//根据个人喜好    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11559">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120657641">CSDN 博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/09/14/uva11559-solution/">https://ren-yc.github.io/blog/2021/09/14/uva11559-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA13012 Identifying tea</title>
      <link href="/blog/2021/08/23/uva13012-solution/"/>
      <url>/blog/2021/08/23/uva13012-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA13012" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/13012" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>太淼了</del>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int t, a, b, c, d, e;    while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）        int ans = 0;//计数器        if (a == t) ans++;//判断        if (b == t) ans++;//同上        if (c == t) ans++;//同上        if (d == t) ans++;//同上        if (e == t) ans++;//同上（草）        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    return 0;//完结撒花&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/08/23/uva13012-solution/">https://ren-yc.github.io/blog/2021/08/23/uva13012-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『教程』如何使（po）用（jie） IDM</title>
      <link href="/blog/2021/08/12/how-to-use-idm/"/>
      <url>/blog/2021/08/12/how-to-use-idm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>众所周知</del>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><del>_我很严肃_：</del></p><p><del>_IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！_</del></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="https://ren-yc.github.io/blog/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="https://ren-yc.github.io/blog/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的 <code>.exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 安装目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p><strong>方法同上</strong>。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” — “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://啧.tk/gx" alt=""></p><script type="math/tex; mode=display">END</script><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/08/12/how-to-use-idm/">https://ren-yc.github.io/blog/2021/08/12/how-to-use-idm/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』『教程』WFR &amp; RBQ - 如何使用 Warfarin &amp; RBQScript</title>
      <link href="/blog/2021/08/05/how-to-use-wfr-and-rbq/"/>
      <url>/blog/2021/08/05/how-to-use-wfr-and-rbq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md" title="点击跳转至 github.com">帮助文档 &amp; Wiki</a></p><p>Warfarin 是一个由 C++ 编写而成的<strong>解释型</strong>语言。</p><p>RBQScript 是一个由 C++ 编写而成的<strong>编译型</strong>语言。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> / <code>.rbq</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md" title="点击跳转至 Github">这里（Warfarin）</a> 或 <a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md" title="点击跳转至 Github">这里（RBQScript）</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Warfarin 目前最新版本：<strong>4.01</strong>（已停止更新，变更为 RBQScript 继续更新）</p><p>RBQScript 目前最新版本：<strong>4.12</strong></p><h3 id="下载-amp-配置"><a href="#下载-amp-配置" class="headerlink" title="下载 &amp; 配置"></a>下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin（RBQScript） C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-amp-运行"><a href="#编译-amp-运行" class="headerlink" title="编译 &amp; 运行"></a>编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code> / <code>fvm.exe</code></p></li><li><p>编译运行 <code>.wfr</code> / <code>.rbq</code> 源文件（请看下文）</p></li></ul><p>Warfarin（RBQScript） 的源文件扩展名一般为 <code>.wfr</code> / <code>.rbq</code>，</p><p>使用 <code>Warfarin.exe</code> / <code>fvm.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code> / <code>fvm -i 文件名 -cr/crj/crjp (-o 文件名.rbq)</code>，</p><p>此命令会编译出一个 <code>.ff0</code> / <code>.rbq</code> 字节码文件，相当于 C++ 的 <code>.exe</code> 文件，<del>但不能双击运行</del>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://ren-yc.github.io/blog/assets/ff0/Warfarin.zip" title="点击下载">本站下载链接（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script" title="点击跳转至 github.com">作者 GitHub 仓库（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/rbqscript" title="点击跳转至 github.com">作者 GitHub 仓库（RBQScript）</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt" title="点击跳转至 raw.githubusercontent.com">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin" title="点击跳转至 VSCode 插件商店">VSCode 插件（仅支持基础语言设置，咕咕）</a></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/08/05/how-to-use-wfr-and-rbq/">https://ren-yc.github.io/blog/2021/08/05/how-to-use-wfr-and-rbq/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages - Warfarin &amp; RBQScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U187148 gcd 与 lcm</title>
      <link href="/blog/2021/07/23/u187148-solution/"/>
      <url>/blog/2021/07/23/u187148-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>小 T 想编一个程序，<del>可是又想不出来怎么编</del>，请聪明的你来帮帮他。</p><p>这个程序可以用来计算两个数的最大公约数或最小公倍数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第 $1$ 行输入一个正整数 $T$；</p><p>第 $2$ 到 $T + 1$ 行输入字符串 <code>gcd</code> 或 <code>lcm</code>，以及两个正整数 $a$ 和 $b$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出 $T$ 行结果。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>2gcd 1 1lcm 10 15</code></pre><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>130</code></pre><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入 #2"></a>输入 #2</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>5lcm 6 8gcd 2 10lcm 5 7gcd 1000 500lcm 10000000000 1</code></pre><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出 #2"></a>输出 #2</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>24235500100000000000</code></pre><h4 id="提示说明"><a href="#提示说明" class="headerlink" title="提示说明"></a>提示说明</h4><p><strong>本题采用捆绑测试</strong></p><p>对于 $100\%$ 的数据：</p><p>$1 \le T \le 10^9$</p><div class="table-container"><table><thead><tr><th style="text-align:left">Subtask</th><th style="text-align:left">分值</th><th style="text-align:left">$a, b$</th></tr></thead><tbody><tr><td style="text-align:left">$1$</td><td style="text-align:left">$1$</td><td style="text-align:left">$= 1$</td></tr><tr><td style="text-align:left">$2$</td><td style="text-align:left">$9$</td><td style="text-align:left">$\le 10^2$</td></tr><tr><td style="text-align:left">$3$</td><td style="text-align:left">$20$</td><td style="text-align:left">$\le 10^5$</td></tr><tr><td style="text-align:left">$4$</td><td style="text-align:left">$30$</td><td style="text-align:left">$\le 10^9$</td></tr><tr><td style="text-align:left">$5$</td><td style="text-align:left">$40$</td><td style="text-align:left">$\le 10^{18}$</td></tr></tbody></table></div><p>Idea：任宇宸，Solution：任宇宸，Code：任宇宸，Data：任宇宸</p><h4 id="题目难度"><a href="#题目难度" class="headerlink" title="题目难度"></a>题目难度</h4><p>$\textcolor{orange}{普及-}$</p><h4 id="题目地址（可能变更）"><a href="#题目地址（可能变更）" class="headerlink" title="题目地址（可能变更）"></a>题目地址（可能变更）</h4><p><a href="https://www.luogu.com.cn/problem/U187148" title="点击跳转至洛谷">洛谷</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><p><strong>由于 $a, b \le 10^{18}$，最坏 <code>lcm</code> 结果 $a \times b$，所以要使用 <code>unsigned long long</code></strong></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数（或者<del>你不要脸的话</del>直接调用 <code>algorithm</code> 中的 <code>__gcd</code>）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;unsigned long long gcd(long long a, long long b) &#123;    if (a % b == 0) return (unsigned long long)b;    else return gcd(b, a % b);&#125;unsigned long long lcm(long long a, long long b) &#123;    return (unsigned long long)a * (unsigned long long)b / gcd(a, b);&#125;int main() &#123;    long long T, a, b;    string mode;    cin &gt;&gt; T;    while (T--) &#123;        cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;        if (mode == &quot;gcd&quot;) &#123;            cout &lt;&lt; gcd(a, b) &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; lcm(a, b) &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/blog/2021/07/23/u187148-solution/">https://ren-yc.github.io/blog/2021/07/23/u187148-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/blog/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - U </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
