<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LG - 苹果树 - 题解</title>
      <link href="/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>典型的 $Fibonacci$ 数列题，题目居然写出来了……</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>板子题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, i = 0, a, b = 1, s = 2;    cin &gt;&gt; n;    if (n &gt;= 2) &#123;        n -= 2;        i += 2;    &#125; else &#123;        cout &lt;&lt; 1 &lt;&lt; endl;        return 0;    &#125;    while (n &gt; 0) &#123;        n -= s;        i % 2 == 0 ? a = s : b = s;        s = a + b;        i++;    &#125;    cout &lt;&lt; i &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/">https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 万恶的试卷 - 题解</title>
      <link href="/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>既然题目说了 $a_i$ 可能很大，就是高精度了，<del>但我懒得写高精</del>，得用个不同的排序方法。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>这题难就难在两个输出循环怎么搞，为了避免溢出，要先输出一半再输出一半。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;string a[1001];bool cmp(string a, string b) &#123;    if (a.size() == b.size()) return a &gt; b;    return a.size() &gt; b.size();&#125;int main() &#123;    long long n;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1, cmp);    for (int i = 1; i &lt;= n; i += 2) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    for (int i = (n / 2) * 2; i &gt;= 1; i -= 2) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/">https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 捕食关系 - 题解</title>
      <link href="/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>水题一道，输入后循环查找 $a_i$ $&gt;$ $b_j$。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(n + m)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, m, s = 0;    cin &gt;&gt; n &gt;&gt; m;    int a[20001] = &#123;0&#125;, b[20001] = &#123;0&#125;;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        cin &gt;&gt; b[i];    &#125;    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= m; j++) &#123;            if (a[i] &gt; b[j]) &#123;                s++;            &#125;        &#125;    &#125;    cout &lt;&lt; s &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/">https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 负二进制 - 题解</title>
      <link href="/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="e90f8d296cd4a4bafb5be5320b24f43e97827c6db7cf89b32f915ed66b0a2991">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa70a7c812791a84e704cd9a1a8c94c7d7b76cca68ed58adbcaa4b636ae8687a7444bddac6e78044871624f40f04fcf5c2eb15633e0c639a307067521b0ee75d827652616467aad501616266198b56b6d8ede27e0795e55d51434bad4540c88b914dbf76ba9885617ecc374332e04a99fb131b7d67b4846361b2693a1be68c0a3e4912a134a114d5fbf4fe91ef8bdc8aa9fa838d09db66e751590070e0b812e301343ae27dd54f2c85ea5c799fadcbb77087b70d13c1a00268588346a3c2fb61b9757f40fc38cae8231ab67e575138b7f0501f8c8fa85555bc6177a44197a4098344f5009d781bf9425d3d1cba8fb7b91782123a1ac8d9809e4312ba239917784503e9869edd05bbe3ede83695644ebc05bbad34377079048e93b80fb6c735dafb5f189fab3694ad3c672c35c20fc588624786325a8f9a5917b8124569b1f88da722f8fb73f8575b5fddff4fbdca66ef06711da828523644c586937c7415e7d2ebc45ae32074eecdf4b5c42a2338ff926a176556a4bbdf44299cd50b5b33105086ed976c788796243d22edd572c7051b88b21aecad0391be57623e7a3d9de0a22b509e09296edb37ab731324cc366722bbe15f872a8a3d5d810a85a80cb01e5c6ac848c7aabedfd603e61626d1268a2cd55dbd15b8e72ea6da65f61821db9c2d1c48a56a3ebea8f71f88e758b4b0c5b2ee87c000ee1f8a4902e297d23538392cfc43e11618d0ba91509ba00160f5b8058f34539be8352450431b7fbc60efc7038cd44167ebdb7c14785395276ff03d3d5d17b8062f326f1188b03153ae58e0b8091d6745b1d82160ba0571029daa8ef46ff9df9686a5fd204ccc47ec1111d2e07cd394f665fa36e5fa8bc20afa2650bc545bec143aac66d926b149cb10483c5f62675f90e1a4e88ce09fc1b5a9cf98c5c6d39528db13e03fe98c8875234da129e9d0c2b1e9d071cddd3c9eec05b7ecde2ecd2494adaccc13314dba2c2dad66319905081e49cf9427b39982c642fe6cf8479fed6b734594091d8487add703870651e37ca90571fd22a428ab1c956e597f6529a8073065240a6d84d709a0b25dec9ae483a5042d6540150b51be495ce184fff3cd61b1c9bdf031294b16b1d532be2c29196914ba8dca34a95e17f0846bcd4fe06dec56284220d762bdc0982d58f3f2e7943a9d249811b0917de168d87e2fd3dc4081446da904f09e20bc604174cefb52846dfd3c3edad93d7dcd82d59161ccd23b48fcf1c9c44d2173541dbde79eb3031c0777fce8c3c3763133d520cca2dc6bdebc14a5160bac8d1d98d5db9e69b1bdfe6934c4a3d9d530687ed6f14a647650bbddd63ffaae35c46594fe1de0c901aaa3326c0eb961a2f9a6d0a18649dbe146349aad328f2780f9a61882b65caa0ed117874dd50ad99b4779b0de80dd352a12a0d64c75de9a64790e0afa84ca75411b1b70ecb32e86b8be6c600a020e16733281f3e0d4e6b6303794bbaff367138df07989c0e826145a3d57d34475651e92c229c4290938d42ba02b39382448d39b0a289d617db9dfffbf4d0ea51228a7a334310cbc2d1b097ad19c1be72a2ea157c06a0d530824aff6de080251b03e3c9f3ae419d56312b363e56cb2ff81af904b45c5a08db85f910ccfb2f30cb98868054066d7c8ddd8891ad950be1ef27727f45b4730330ba41d6a6c1f09f3db87d7b95433d8d36bb8c616374e270dc47407fd7f6d3b226e4b94834b58076db36f6140e8284e13b66b088f93fddfe7e31d80075316dbd1fdd109256924e50b47605b281e12090aa58d146744e5a281acb9bd7bf694a2f55c916bb651d3100ae8c094cb658fd23b5cd9968c9074af95a94027cefb9d08b1dbd2641f616ef086bb0ad0fdb40a7283eba6e6ac5ea1843355f3810f8035ee85420e77a5586bdabcd8e791d7066f7254f2cbdc18375fdc051be958fba9443f4270726ae03b1425db43d6b54430af8787b63cc46f0d3085e912223c17e80aecd3bfc8a7eaa11fef91fa4353f6ecec1761ecc287579793860c444ff852572876bc91f34e866afb2b86c492161f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 行程码 - 题解</title>
      <link href="/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="199dbaeac86858a565e25c8eca09fb99355495dc3c1b32c653c419448652a9e2">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7faedaa4259942de8772ffb248874bc8625c78ab4856d829b262483956de4413fde9590b3c3bc28a1ee047575e9acd8d852752e5bde07f73ebd1948c122f4b7675ade58365c2a8234bfd5a2cd81b787a72441172efd17d99a2abaee4c595a80c911c1f70973a095bc89fdb74665fe0e18e6bdb2c4a24b19cfa00f2dfa172292ab286f1e0145d86f6bce3415bbd017b1619261d32f7ab2fd35a0dcc29e80566b8c9de3a76b518a619e47ac36dfd642abeddcc51b527a8ae6a707616ddc6f5e557ffe5e1ceb7e50be9b2ac60dc7e487a7779f1f74c33cfda0fea770964837adde6b3199df5cfbc5ebcc91de11eaa2a2e21ce77028fad1b2a965714af9506e4e5f3a0699f88914276fe3fdffec0220bcc797f9fed6ca0dec382b3721d87a0ba3852440af94f0fa94c9586deb244cb69217a2dff8dfa480e19424970a2b9ada5edaa251bdffd261c616cd23103d66b6c82ff3ee755396e30a636aa40cb847785e87d25b5305f1365e976602de96a6b88e234d7c1586e5b3a853a7c47338ba85a5acf24f5a805a6b178ec42f1a718175923067a92fe09fc5fc819f14516f6a87091797804c9e67404facd6e7ddda5c440281512334a9c551b5a7c2a6d593314401b31df1021675425abab19bdaaf430f230cc14c91e2cd114312935642ae20ceda3a7b358f6537c377ff428c74a74ee03d43dc69b1cebeac72f56d55138fd99016ce72deb6cb3d5569256da02cc244736091c4f889e17462091027cda97ce6efe4e364cd64fa58a663eb6278ba3ef8f16f291bbf4a6d944cc4371c782ff6755105bd4bfa15dafea46dc3b9985ab64d653b7ed8239783b4028c42546fd6b67c4a3c93ce69fc1b8fc7af1ab105473b8f2e6ed1e7ee57811f1b90b4eaef42f02bd88054b3b6517a89e99508c571b5eda6d7332f8b8fdd29e4c1b259eef8bf1eaad4d09390f707059170f86a51d7e84313a3d969de196851256c9a65bda12a6ae04ecad3c5f226fcef427b40d11493573b32353af711e03cc19d44469edf1e0d81cdfade3c630786da6c3c7f6147771081bc255f3c722e755c8c464962339e975e362589fd6db3f9a1f73aeb4217890a3d679e7c9f82125e5fa71ea10d0f54b8ee16c6b98e51e39ba0490d6bf6d27de4f7daf2f5782150a56b56bb1202d414d5d24d5ad9d2a9b247dd04e097016ef5925441cc4b0ab86b3d0dd323d994fb536263667ab756046cb78e31c832cc6af94bef9bf07622a9bc357555645aff4eb10e07f630e2a3f2a83b912582bb99c4e0a1b148f074b32a8b264ec05e37ef352f5247324236a0f6306f51832b2b7929b561d3308ca54779d70fc4241806e2f4cda20fa045a2e344a697cf293404d018e4c4de8ed5e04c145e00937f1001c01ebac36524b20c9f347a4fbf0fd3480ac745d9df8cb14b27bc2b992035285b63cbd3ef72b07463c833d8958ba5528bfc4da4fd287ddaf6751680b58e6518802e58db500d49fb8da4645bd78fd7e649b4534bb5b13706b124be68fa2cf4fc743f43f7c2b80d3dfec33022b394fbc6e357896d3cb5a04c11063c052f085a5bb29c20c64971597e6c232ea1488e11ebe72443dea335d0fce3b2098c53270ec96cf19197aa84aa777a2473fe4396fa515a2c5112b449d89a3c0bbd5af0640479eaf2aa18e4df0c68250ed721241407a74d8102720e76fa20038ab9cfa596bc6c0d3d2817d42fc4fc2058e0cc07e70d96ed91f49ea72d3f341c9e8e4643aa185f9de2bafaa47a3bcc4c48ed1ebf0981cf702ef5a09bbd8a59911f2a1b594d1ad123122f686f6d7b8b7d3745b4af7335d02841e534ab10065f8dcf688d1acb61b2cf0073d4b59f51e2fef5be230b0d0c4c7b65a491a086a3cbc9fdcedee07a1c13c0e3e8660b69c7deb5376c235083c7ceb108460a901880bec6080b9bfe6786885c47b3208744ceb3e5e6584057a7616674c89f2a2235bad60c4589e1d93d2b9437b9fd227e608b4efdd222a3c1586cbe9d3401bcbb9a4ee4f7bb89e9d456df79ae487ad00c54759c8a3aaa2fbac078436668263d94f415905ca3e98d4960b0bf4fe2a8332b4379eb91e50ce74f0ed51348cbc35d123fafc484aefad63f8d514d600d3c70b0f94753e6ce3446473347cb13409506540d32d4e21d387072d462478a34cb6b5179f64dede0d5f9efb7add9ce58d6e8d72a1c22dbc308e3293b95b2d0f90b99f72b172da19fb84b6036a24cdfe4e7d580a6d0eb3d17cfcafda014f7f2e0de4501137fdad2a76dbaed946e36206e789097666965687161830ce276c92d7a5d3d7926dda4a8830459494e86fc9651ee8c3acd1a18a1f575ea325be572454ace7b34cfce7a9017b979a0fb633e0e4ce76afb0acd49378a25dc0f0ec66623a71b4edd5aae0b02c94584c8741345be603f4ed25ec36946978e7a6e973a8a13cccd35f0c4f4de47ef8aeb0fef1fc13c9f0e17ac6312a9cbf9abe57aaa14669b7f5db811ea1d853bcca91ecbec706afa316cfc0872f08a2b5f043804dc5bcfbae3cd95b1cd829b54540b73754a4b7d95addabae0546c08380e7cc85039d2c4c3b19b1034b7329eaee333093c68ec254c5310d3499637d75205764ffd8472a3c0a5cc64f7e4242babf08018c76b34542582a6382b7972d9792131e93f60c39d2e4605c91c68dd22e1567a7345b51c52d5aed9ab2f5846385d59b509beca65a27f2a2a8ada5dd66754ec9c3954a1eae7d674224e67f55b0e1fa2576c46f7f1189a8b11bf3a0d22be02aab142459d66d13eb726c94256e23c1af9cc566977ac8fed9fa07f59ff131415ecd0c1bdbc53facda5183a30b48b531150e327fd5b99d04f5c48ad39f2b87c89f4e075c7bcdbf70a1fbff3700226d0dd1e6cb243a8b402f3568c61f6c95645945c4e1c002bb1e41bd400fa413679df5da493e4a3ecb50a41f43a840bece9cffb815dbc234f4aa48147c5677e8263e4f2a0ef09ffa2d11ad49642f35834c20d0707d268ebb89028a7a5ac4cdc3aaba3e472913ff9465401cc0609564a3e8630e52b5e13cca7591b63ef235b09e1cf77553fb7a8ebc9dbcb471e2079eb88859fe93ecc2b3f8b88c7446612f7b040cab7eb2bf16e133a392a178ff1ee7f9732c9764064364b9366d427efdffa882118df966a8535eb3d05fb3d5419655d989dc088b4df4413054f4619c8fbfa6ce0a09fc325f65669b13a1050c0cabc8c2565b1a281dd668f11cbd29d19d31640a0f8f9c157bd819339473e778b8da900ebaa0b644aceb1f159e824e8c7dd5ca1630da59852bad735ddf509ee03e39addb061861795f8abaabbd709422b6965d99932b5ba876e1f1714478315f4b779b8bbf253d8bad94b383dd4e519a2b248211d55df37391b1bb9a59f1f1789d108464aad55a6e6a22364f355edae6749d775b14ffdd1a5f883fb023bc8929989c90c9cea4b74dac9a4f0cb0c6bfa8cddec1492afe463dab85809529b7e7941259d02731ed455038de7df689dddece583f03247643a406477fa853c76ae476ae50f0dbe39dbc733e72c0ac8bd66d74deb96aee2cc63d0ff95d0bbd19ede05895511e8cb3787c6223cc0ae8f923374208a3f2522c879019442ac98479c776f2f31bc4614640f93abbaa5591052ce4bf39afd3ef47665b9bee70234f72c4094df622d927666f5fdf628e1554fbc55ebf6a299d5247f858af17c9d5ceeb7be9644b18aa9e41e9cbc3e21a6d85c7e5064e5e0b5fc9ab754057531c624826b520eab0a095e43fe246503ef1f11f85c9b7d44d0130a9b6741e39dd5b9b8eaddded2c99218f2e0129694c59125f1f06eb897e0c59e5d5a01c36c06ada6b1d8b96745f6123fdce91c18d3872021068ae53f8f485008a4c0d569e720741d28ceb90086086c3b1dc442a1f3a7a1df8dc8f3c91b487ed5ab6d2587487d055dd6ebb8fb3d0afeca3fef17e86923bbefe339f2f8571fa060292eab7096fe9178f9b65f26c10b4b9c247eaf9a1184905f0cc2e645df798aa2bcc1fb2fe6668da5fdc47e9360b76e02960974e452e633c4f21a039e934a32c91b572e3bfe72bfdb85aa0d18880e40fc978b4917d579f2577732ec7404965ed0399630296dbde38f7a367f5731ad7fd623a7e05ee2b28984fc1cc322a47b238c2a8d15e34ad247bce22acef20d2ebabec603c5d42897c6a6179ccf5058de120d29fde5470550d5a58c350708e7dcb431dd19ec98a83ba554e44d5b96ae4b6758e87cd499ed2f374de38f012509aee5d432646827300ca578e38273df870780f63b67e5c4bcb7ab8e905d44d741ac2242ecc9a3ef8f4cdad50d7dce7ea5c2c0e79344ee399ef93c3e36bf404b04cefe99c0fb9754028162d0749d22b669f5998759e5ab6ed4b474b5580ae8ab8c417dcf48701dc1e63425a7fb4770a06e31f9171a529dcbd94af8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 之吃牛肉 - 题解</title>
      <link href="/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="058a9842615bdd33780b6031746f7a259fdb035d0c29fe742079010e0119a073">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa1590dc63f63944e93f91c891faddb7965b8a634d1ee793ffeb445f014e03ca21a8601e216b3c080b991e014fbbacf6250ee92a375be21c7a52d992b8a8be7eb37008972b65e2f68860c5463c1fa43f5276c96ee2fc029d412780c4787c878fd096b882534aa5916f21d0c0d4965bbf7dd86b03a32e7245d6e480f3a6cf89da692ed260efc65873fe32bee4e9af2ab7e88fdff270fb2995ac6fb7577d7740bb63f37aaa69d05a97c751310e98af5f927e5c97b22a12af12a29ab3905d9ddc1980dd5084a843e01e6131128685f8c6e0f4a4578d06e02cc33ff05d8eab554e33e3b33f5c3571bc4fb521d47693d51e7b69d5e8ab98e6db6f60267a0a87a9b73bace1afaa0b40416168a23dbe36963ce090f4ee0154ed7ff226ce346ab10971b4c9fdd90b9d16724f8560a08cf259bfbf74ce4238b4cbab7308f59ea79c94ead6db92fbddadc956d00cece2ae3d05d5be5c223c3735476e9a0d8148fac103feba0457578623ca1ea146dd7f5460ba2e9bfc57bec37a41580b9a537fd2c94e7f884c8a1c86fe3389bf13bd11f2799493a4c7f7c674a2ae394f795fb2c5da956c7135d7a9e60d67e2aa6395edcf3a88299a4885ab5c044f1d72c89ffec7d732ac22d48a1d0c1dbd2fce592e5449be53a6bf7eb8ac4cee9682cbc86b4ed80cca186f4d860fd7235e2be19632ade7502ac8c0d619309f1f4441764bdbbd8467d8a4dc81a539d805e4cf7748b1097898a908833cc9ca287ad271c3c0ba0f97947f678c79006aa5dc01b1d8932c869a419de6304e539d854656f814d80f7532143c2557d1ba493d95a658465a7b1e6f0fbe6f5cc192c268c78fb2485343403acb5dec66489283ac7e71859b7d01e0fba035512d27a804b58e4c0c1624a1808f9a263aa9b03c9e7eeec6cad430c21fca3030897cb6a290aca5b369316049116c05df3419fbcc47f0968075f712e45bbf7dd08ad38420ffab1345c4431d03c11a1ea0691031c9e5a138e5a310db03b1e562125e3cb90713839b8aabd56646e12984b57952889af719600e75b507593ee6c098f79bb731503db7a7c3f6fefcc918b862d5552725e3fa95cce558c203f3c1b6f926d99302c15cff7356048a14227f1a5f30ac02e4581f5b884654e34d5ca04f6e5ec739c0295635ca60897c230fc162ea05635f96009990f78c6c2e6096fd47cad1ecfe675975cfc52e9b35f726d1eb00b7399c03f8f6302a4809ac8bdade22f937fb216cbb68d2bf9cf7460670bb814f6bc0eca63281affbcadda6b15892c504bb0c49ea59bb4a39e3a571876b608802ac5b514b9fa82c41254775eb9974e6e990a4cc78b3f3fed9cbdcf8cc7faa9b65949698f234a20d37de902295a22b471c23b8f59339c1812f33ccb27b786d38cf1b69c788b3d78bfbbb6b6cfe8181ceb7051893005fddd6dfd1f5e6394a2f05b4632555b1cf6f6d901a3f7596c0747273193c087e5a7c2ce97addd6502c3cb09908118bf718a88a2833f91b29795dc4510c6fe2389e999466dc972c5ad35ac51e21046dd1de60daebfa3d4fdc4ab798640fef911ee84e33414dc4401e2c8c5446514d1749d3865aa74b8603bc04d952df18dbc14d0a78f95af05c6a0661dfc63263dcf225131ba8fabddf856972660e870188c76518f770b58b5c32efee11553c86a149b80828e5bec1c1fcdfc238e87de2988507c86ae9735d3abe00d0f0050df0bc220045b92a61f08147f75b7cd9a6e83e199b7a9d816055d7f4f4bedd6ce6dbe1303c18b35b917745ec3beec4b9cb433dad7f4b0ec05b08f444661b238a42479981eab5865b394fc4504b3134e34834a96b8b4dfc3abf5ef068d3f4379b12c3e423f9ce4c1ad783a2179535a6873b41f7133809d23aac5a7d4f53afe5833a0c68642f77c96c1e3c246ff11a0fc8bc93416c16f16caaa04fa0519e7ca622f92dd04092c3b2d8ccc325ed32c6dd3261a35979c491c12c7b28639f51b293494a2a6d54a1eafe43257890c077480adc52bf8ab5c3aa08ce15fd326a50c3708d35f5da453d2184fcdc62a4c7b08644066400d5b8b03d0d7c01b8f93f47c9126d0d9b13901161fd34f4c30c9a6dcd19edec76d43e067918253a3826a08c9de4950c05128bb04f0ddeb55039c149ad596745e6b72c103e4204ed979be3c95cc26c074201a52d2849c1ccce8dd7af7b60b4cf80da033d9a2fdd6a61164980348bbaa2b9a2c9395d471a1a6e9b98b4bae33a084204ed33d8f9351417bd9b966f1e418162da09d7fcff1a048f0049c905f741df5c45ee6dde0ec545ece5a6e717b206d5d30eef47331904a9aad4f73406ddac10e863c0f751c922e5a0c8626f6e328be7ff051de3fa9afb9cf3577eda73fdb8b52eb4e7763a0acc32f3c6313bfcea074154253e7c1492ef0b2d74f5dcd4d8b318b278c715cd1d578ee530a1ae615d6a9e24436f116d8ee479b9e3e64cec0be2e58673d544689ddde642faf16dabaa548aa97526d8a0911e3a0edb36518a23076a50af3fc6d53fcd7642d85ee20527ea274206f2fe394663f3bad2e5bb32cdb0369299985a01b7a0cf600861fd69171b16ea2e620a9500cbdb7349c8bbfcbc3ac48916988cf076e88a829caac9102836c885b9631dafcf75bbdd45d9985623aa545b7918785e0f7ee7ee812e3fa9746adce431b8623a8042636a3f9b103d87caa119d5da30ca79f56133b705326f5da6fb0cf1351df1f0cc87b54d7a9b45f0d2bac72161d893ace50ddbfc6b9ce3cc178c04e13db934d58d35247c5ef01d5545d89cc42c0a8648871ac199cbd9ad42b2b20977e8e5a058ea8c0b2d7b6d51e9fdc6d3b1c427f9d3f9579a91c2ea2b496f4b0d43fb54e99b8b568e86729ea1401ee68fdf41d1701fa99258b50f0513bcc4ea5baef9259b4a639f465a5c2ca224b17d49939d8c07d59147b8bd1c8fd145e5ddaac125e845d5f0c4cc814ef1e1a5046b5c6824d7c839486b8e24b46cdf282baaf85471b471c23bf62dc752db1c3e717736e09827899239ad367840dd08b250deca9ea40d0523d56e4621990efce8c4a8517613966263b472246fb754c0acf91a77df6508285d263bbc508ef0eaa37a02dee15f9cd2b71b6862438f0c1fcda33a07de08e82c6f24168616c3417b29786ab7c3664e92ce5699c151adf9af7c632c3fae1011d33b2047de83747cdd5344cc957ce3271a3885c3df779616bcb2caf20f99768431c52f9fa8be3e88e0acc9504481043c8554a7752c1b845b58d5281e0bf73da5ff8aef37d67bc267affa084099b1b584653624f3b146a92f1bd3993af01a4c5f2544911228c8e1319128724c7671772c8a06009f76b335b5e6e42f0cb26be5ce68b74afffd808f8283fa8a36124f0c2afe94882e842dbd25087d59b28295f97159a0158d72286b0939ad222dee2db7fd4aca996524d2c92232281e12282eebcbbbce898b1dd1a39f2499db90a33a01f091b70c1f455d20556a323188c08ce033a78f8c025e7118b8b25e34af5d43336225b16218238dcf7ab5d3b287e327a4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 公交车站 - 题解</title>
      <link href="/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="928418b75fd4b9a58c692de4d472e2893d83c8f11df7ff5b355ab032722949f8">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa25191b7aa4b7a5ae2313827bc2fe372014c26b15d5fa4dcdac1831e8f4c34e96ea8d2238bdda560308c953c3e554643562b1d8fd1b7d699b2801b2c848e79216163370116c3cc0aff7e0146ef11b0bde12870813ea772f593d908beefe3b45f9c10c1b5f2b25431af82da79307ac726ecca17e8c3335fb2f78fecd30f041323f327409d7c2a06c319cbfed2c38028399eac2e6c8dce3ae675d84fbdcdc91de4314364889acd4e857d32420e87202dd98ebc68b99f8faf18eeed41ed51e660a4de0e53e575bdd19f00e5e7209bf85bfc8cb75a3f4efc2bc30ad614ded095a79c178a38562faf4dd67872eda56d0b3399d716f01ca8e409917be67784267786b8aa83ed0a41583d0a04f8f88e041dd991df9b3a094772cb4b2c06dac68fc7614c5069bc2b9ce8a6f8c025d250405665d8e451e418df5b74c36a74ecc4f6ae154e3a8a397ebc37c85f9b5b35bd03276ac5206c26d1ab2494e960ffbcc8c8ebdbc05371d383382067fdaf8904eb4ce617b2d386ec9969983672e28b10453f3375c4461b9a490e7e82a366e03bce77e0fed6ccfc7fd4ee89eb167da7d4c27e1817f9872000db04e66c3e45fa4a639b772939f88ec09d6459976fa67aca247467a38950dbf9974a6d1d0f5c761098468648164bd35a7341b7a9d632d55b9cad54af1e909e7a19242c809a8351b457caca5a878d135f20da253fdb282feca3b74298105b5f6d94e748eed61a91bf8824240cdf5fa67e5b7965061d5a687dee604f2bc562cac1e2967a0842902f11ccc1ed67eac1a22841600700d6ac270d62637425499ca0adb374b033059ceacafb7be14c6cb5c6d6dfa0210976d858f5350273d9a6826a206903aaba81781035cbf7de70a03d5e2ac658fdbe8e664db000e9d2796c1e83187c2a01bb3329f5adf80e1b6feae52c732b243c05dc025bd38f4a1b7f42cfc424d07ca9093af27189b0dfb485ac3bd765b9db35807ec3cb0886ad6db29a5f7f14002d132f311ead508cd53931b5758719fcdf92f72b7ce15cd2f714fef0de774cad2bb526ea6af24fea4ce8f8e2eb504072d4252b8b2ef50d567eac371ae34c1e810e6f318219ea06c4fc65b5910932c648778a94b3cf27bdd38816bc3e4131224be209d8cc3db2b33671ea7aa7d1ed17b55d3d56272f34d52a3f82b47b2ab03eb96e8817b0f0631464394b5655b86adc5b26babef7a1537e0c744bba1a42bf650f62f0b61cb4c7369d834869c826bca3f8ac3d87857733c5c98802369bdbf19cfa4635975eb96ea2bdd41a2188acec5d43b747fcf16ab9442e32121758b4b9db69c8f42e36e743c04f31fd50f9bf672a7ea69d26e69a590062114593abd0c7076323330906db6e3a558db5f930f5b896bbc4ffaff5c8d984a657106670b218ed255bc1ed8a955a1f850aad3519b5627539a5fb61806880adce66e2e0a761aef2ceac6425b316cc5b3842191558055b48ef1a6d02890fb2553602f1231f0aa0a776da4e4f717625f33e7e835773f2244554a4fd5fe0e0d02104e64bec3b715b6af709669a77cd7aacb0bc48ec29c7b62ba8ef7987ff4d720c83609ffaf026849a2c9b46551b00a9728b1632f65442660866bc3643aa689aa3b327fb35a603b740c330da3e5ca319090173b839923a423707ec6f3222fa7e49e1c17563a635a26536147b71512ceb4009f345f7d093e015b9a4ef2165d7f8f1049404cea3de72a0bdf8e6a69728ead7a9511b421f00fa0fa7e56f7137dc7af43a77161b7a9ac8464027faa87bab80fa8966b063e0a7c10015c0c6bdcae0e6cbff052896f7985789920d93044cf946f69925a72461c99ebfd72649b772f2653e3ed79ecf06e9c97307c77d5a66380345501cef44d6454d97579bebe3222d0016522dce7095eb0b5cb1368b1741b0be3ff4d83bb02489cc4a16ccc9835e834804cd228c14d34a0e5c54036407c955e58dec9aea07f1291473537b9d8f0296c1bd54caa05d58b9caee90ca9aaac167283780111caad0e92700dc16cd2b038bf1854a22c378c6753ddb8868ff81446f13046e05d23760339b8befe4bb74f3dc00e7c6c48104a4e9d984e8afec504e924445cca32f8b777ef6cee7a0883aa2a29c67f1ff690ff59b854777aeb0a99e9dbc56bece4a8aa0db031f1822a2f3138a1c102644480802917b7ccca3e8e1852dcea36b074609b20d088ee6a63ea5d2d718956ecf9f1101fcf892343554ba673af371b56c28bc245337a5915ab8e207705359b86a8c120a387838a7d914c47946ed39741d3a004bc573f954907a8111acbb3f04a0528bc2f720c9e458cf3c776dcea5b3bd095fdb3c6e6ca02ec0fda33a1da98bf1b12c9d7391bb6988de123258b07891ee1df0dc3ac355d31495e4e665272f53580d5f63644e26a57b994560edaece602bac290c5d94a80da2afea183894210ede43680bb1fcf62bb064f1f05c208f0066eb8e3019d635f75be1c02bdc67cdeb68b62565b1b80bc69bf1ea1f46615b5b79f8a5ad64941781d17c21a111f8957cf0bd2f5fd416abaa338bd174d558295380989716bd690a73a070e2704ea4afc29b06f979d3e262f5a1c25a92b1912ff97b5d834b966dc17019c61c76f86e6bbef5953dddbf2772673f09f0e758c12ccff4308007bec3da4185bfe890bd287bf4e20ecb6f99bc62538f2da1a2a17f45db782ba052e9105dd1304e46fbc4212fe721990d4fac2739655916d7cc1fc50ab4e681346ad96e041f41e7dea9ca400797715cf4d74d579a5e85f16e840fe9b64852b4fcd39481a60c9280d0ad3d7803251fc1feaa20bfb2b01aa2704c6826eb1db40c5f9d04dbe3273953fa238c3155d25b16feff1534901a96409b784749fc31fe964a458da69ad0f4ee922034c07aa6f7d350f3ebbba301184cbfd2c6ee0b5cb61cba8932711d807836929fa7a36afd6233fcba9ad608bda6742fd2ff8304523ca2614c41fdb5a6d90ddacd94ef5d09b16918d3197380ef4a4c294b3097c2a8d072f3c307a013952b6d383b639ba9028fecb9212c714f52019aba2874fd621accc50238dd08992142cc7dc1ce4d1313657aa5fd06795396c8e448f7cd75de2ebd3b648db7c26a2d9842fd9c935305511196ac8defbc06c40f110a49695aa5ae149e3209654b0b056629c28072f2a13a4787432b016be4d099b661c88e07d929f8f9eeb3b33733d29de33d5d69f2f7901570c19d64b628c3eeb310c28a8048b7b64180a82e3ce0713a5b33d421ba8997b872fc4189a6a419771cb13cb8ab0911279530c7ec737dbe7bbefb65bb6085fc13b5538d43ce99a1480434aa2b15138d6fb87b0cd131c36c8edf82a6656f4ec05098997a8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Hands - 题解</title>
      <link href="/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题看上去很难，但分析后就可以一个循环解决。</p><p>每次取牌如果有一个连续的大于 $0$ 的数列，那就全部取出，取到其中的某一个数等于 $0$。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>边输入边累加，记住当 $x - last &lt; 0$ 时，就不要累加。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int ans = 0, n, x, last;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; x;        ans += max(0, x - last);        last = x;    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/08/05/LG-Hands-题解/">https://ren-yc.github.io/2021/08/05/LG-Hands-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WFR - 如何使用 Warfarin</title>
      <link href="/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/"/>
      <url>/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-Warfarin"><a href="#什么是-Warfarin" class="headerlink" title="什么是 Warfarin"></a>什么是 Warfarin</h2><p>Warfarin 是一个由 C++ 编写而成的解释型语言。</p><h3 id="Warfarin-的特点"><a href="#Warfarin-的特点" class="headerlink" title="Warfarin 的特点"></a>Warfarin 的特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li></ul><p>具体信息请看<a href="https://www.luogu.com.cn/discuss/show/334473">这里</a></p><h2 id="如何使用-Warfarin"><a href="#如何使用-Warfarin" class="headerlink" title="如何使用 Warfarin"></a>如何使用 Warfarin</h2><p>Warfarin 最新版本：<strong>3.17</strong></p><h3 id="下载-amp-配置"><a href="#下载-amp-配置" class="headerlink" title="下载 &amp; 配置"></a>下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-amp-运行"><a href="#编译-amp-运行" class="headerlink" title="编译 &amp; 运行"></a>编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code></p></li><li><p>编译运行 <code>.wfr</code> 源文件（请看下文）</p></li></ul><p>Warfarin 的源文件扩展名一般为 <code>.wfr</code>，</p><p>使用 <code>Warfarin.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code>，</p><p>此命令会编译出一个 <code>.ff0</code> 文件，相当于 C++ 的 <code>.exe</code> 文件，<del>但不能双击运行</del>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip">本站下载链接（自带 exe）</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://www.luogu.com.cn/discuss/show/334473">作者发布帖</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件</a></p><p>本文链接 <a href="https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/">https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warfarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 买二送一 - 题解</title>
      <link href="/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><blockquote><p>凡是顾客购买两本书，就可以免费带走第三本书，只要免费书的价格不超过两本付费书各自的价格即可。</p></blockquote><p>可以使用排序来做。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>排序，建议偷懒使用 <code>sort</code> 函数，<strong>But</strong> 是降序排序，所以要写炒鸡简单的 <code>cmp()</code> 函数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, a[100001], ans = 0;bool cmp(int x, int y) &#123;    return x &gt; y;&#125;int main() &#123;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1, cmp);    for (int i = 1; i &lt;= n; i += 3) &#123;        ans += a[i] + a[i + 1];    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/">https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 方舱医院 - 题解</title>
      <link href="/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是炒鸡淼的小学一年级数学应用题（（（</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><del>由于本题过于淼所以不分析。</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int a, b, c;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;    cout &lt;&lt; (a / c) * (b / c) &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/31/LG-方舱医院-题解/">https://ren-yc.github.io/2021/07/31/LG-方舱医院-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 开关灯 - 题解</title>
      <link href="/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="56bc25bd4c361530f0e5d2f329a4e2b2fa1e52150d62ad0852482bfedaaa4faa">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa33dba9c0ff43090f6b3bfc6c0f358679fda116851bdfdca4bd8ad61d6ad3e13099f3a02c5232bd68cb46a411df5602236383f85d9d6e821a4215bc6891df50a8622c2fb533fcbd937078ec8b2c495fc2f278f961bbf5b70ea5de7426141e2b27d723d4d4ffca59cfd7a5d7590839cea01160d7fcb8935d23767b85426aa444ed925bda7254bbb31f7e4b29a8418b09fe7a800dacb70f98ade2df191a56966f46a5f46e001773d7524c373b6d1f8b840fb63c0b398ba3b2568739934bdfe0b9992f356fb9c1c846df19f15d65dcdf602648ced04c786f9a2a3d391903247e1208c962b5a9c466d6c3a15286abe4aee0daeba3b332488aa5faffb3d39fd455c7a140084c0b3a781827b767dbdc313f6b62bebed45e11bb38d01cbc6f9e38dcd834e1d54c627cda0a5c0171aa58ee91779d8a78d2b05fc73446e595a71e75fbc28a1c3a417a1aba16aa23ad0e17aa5337bf3c553114cb51cfd546e16c84e8e6c8ca9c0cb3e4d23ad57da565db278720fbeddd89075d246183a6446344e6e6b66721cf9cde43ff12edcc85814fecdf80122f4fa626a50a0bc61b7dbc76eaf91d341385f6da074ce2cde0fb47689ff515d28b98b7c705ccf99c577b6643ad01bf6de9d2ccab3a7ca5162a2e1fff9f85941ca02d379f289183aef639d1872f34b083334bc7a75c337ec817e635db15f122846aa21b80f18e93e6a620aaf2ab935941d15ab566e2ac41eb7359df69ce2b673fc0bbbdd8db19839c7528a80ba431140f8264762fb213d2b5a4679fe3fc189c28293d646fa430f6137dd9d7586a5e14e035c02f5af25cecb5ca59bb81f472798d0392759916419199998f39b3f6b2ad0e5aa71e6b0135b7e4cbcfe566fe3ccc5c947bc515b813a7e1d1fdb837c38e6b4c854f52c36e3db7a337500560fd9e66ed17c2888cac7ac28382139548adcfaf997266f07b4c72cf1885c37bc530187294011cbce7f1e7671bd17893faf11874278dbadc6d46923b09686c146dac63aa45366ffbe56e47fcc38b0b1cff3a5dc42f4960d7992669781018dfe5204d30bfc0399f80f28c61990652a5a9e7b0e7df3435b47511337681adabc517c98d07d84a72e772b13834f552e82c3732c059040b4aab79cd44c22ffa375308a3a3b8b340baaed149997d9b7e50c8220be9dcf26709721c8e0ff7d4ea47543b72591202809abec2f299d679eb1a71fe45d94329efabae5e907b1b96bd133560589fcd6e5aaafed8711944e4a605fa233a4671ec4ab8eb13ec3e5e42985abfd5be2f2fee055c9799f26dfdbee4f783f1ce63b2de4d6ec615527aa713167c5da21e2a868a8b978527a756ba8adcdef66dcc0cf23f9664348fade05d0ddaadf6f603e6e304fb1671c884cff8019be9f9523b3d63a0ba95de74cfb8e320b5883e4286f5a8865911811a5cf86461112246ff77e3882ba0d50e96dcd31468f0f4a04691ec5ff864b4aecea3749573eba9ad22f8562b4d112f08f61d749f163c665708f54c350d351d172b81ac67ff9caa92d8ee1bdcd9f9c4b6ab958872730132e141924a7b640f67f522e4f1d7a21aa60b1bf94ef04c77966dc7d9a4bed0a9d93d933dcd3c5f4d7d2565ccbd73cdafd3efe1fd220844dddc82e9ad3f1067cbc960c1f2681ed392a48a271b6e8992c809cc0fd315153b15019f13a9fbbcb50fbe45271122fbdfd24f2c5977c08e79c66ead7d8c7a71fdea97d935a8dcfe5b2a366bd1fba43165cf3c5157e36a762579d748560aeb5e6825976b883a2a22c0c7ac95e2b956b8b116907eb7effe3b61094067be389cd9e776d70d918264c21cf4d8cd0cccaa2b32d5e4c22ab1a6357704c900632b3c800bbcf011c8f21650d3d60945f21def4414cd73ebc63b638030c8bc1ab3af8a14e35aa8e772693fedcdcb406e7e57d77f17c5c56c131430536eb31d52af67518f3d28b6b09cb3f2133d5c01a61ce2c2ccb4159f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 古老的 A + B - 题解</title>
      <link href="/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>This is the waterest problem I had ever seen.</del></p><p>好吧 A + B 最 water。</p><p>没啥好讲的，就一个循环。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>直接读入然后来个循环，注意输出格式。</p><p>时间复杂度 $O(c)$，空间复杂度 $O(1)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int a, b, c;    cin &gt;&gt; c;    for (int i = 0; i &lt;= c; i++) &#123;        a = i;        b = c - i;        cout &lt;&lt; a &lt;&lt; &quot;*&quot; &lt;&lt; b &lt;&lt; &quot;=&quot; &lt;&lt; a * b &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/26/LG-古老的-A-B-题解/">https://ren-yc.github.io/2021/07/26/LG-古老的-A-B-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 排序 - 题解</title>
      <link href="/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡淼的 C++ <code>if</code> 语句题（?）。</p><p>太淼了就不解释了</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>全读入完来个函数判断就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[6], b[6], cnt1, cnt2, tot1, tot2;int mysort() &#123;    if (cnt1 &gt; cnt2) &#123;        return 1;    &#125; else if (cnt1 == cnt2) &#123;        if (tot1 &gt; tot2) &#123;            return 1;        &#125; else if (tot1 &lt; tot2) &#123;            return 2;        &#125; else &#123;            return 0;        &#125;    &#125; else &#123;        return 2;    &#125;&#125;int main() &#123;    for (int i = 0; i &lt; 6; i++) &#123;        cin &gt;&gt; a[i];        cnt1 += a[i];        if (a[i] == 50) tot1++;    &#125;    for (int i = 0; i &lt; 6; i++) &#123;        cin &gt;&gt; b[i];        cnt2 += b[i];        if (b[i] == 50) tot2++;    &#125;    cout &lt;&lt; mysort() &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/26/LG-排序-题解/">https://ren-yc.github.io/2021/07/26/LG-排序-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 生小虫子 - 题解</title>
      <link href="/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就在检验 <code>for()</code> 循环的应用。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>读入一切信息后，</p><p>写一个循环 $z$ 次的 <code>for</code> 循环，如果满足条件 <code>k == x</code>，小虫子数量增加，反之 <code>s1 = 0</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int k = 0, x, y, z;    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;    int s1 = 0, s2 = 0, cc = 1, cl = 0;    for (int i = 1; i &lt;= z; i++) &#123;        k++;        cl += cc;        cc = s2;        s2 = s1;        if (k == x) &#123;            s1 = cl * y;            k = 0;        &#125; else &#123;            s1 = 0;        &#125;    &#125;    cout &lt;&lt; cc + cl &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/">https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 合成大西瓜 - 题解</title>
      <link href="/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道 C++ 枚举题，只要遍历 $b$ 数组就 $ok$ 了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$，$b_x = b_x + 1$;</p><p>遍历 $b$ 数组。</p><p>倒着遍历，一旦发现有符合条件的数，直接输出并结束程序。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, b[201];int main() &#123;    int x;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; x;        b[x]++;    &#125;    for (int i = 0; i &lt; n; i++) &#123;        b[i + 1] += b[i] / 2;    &#125;    for (int i = n - 1; i &gt;= 0; i--) &#123;        if (b[i] != 0) &#123;            cout &lt;&lt; i + 1 &lt;&lt; endl;            break;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/">https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 救援争先 - 题解</title>
      <link href="/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡不淼的 C++ 结构体排序题，我卡 <code>cmp</code> 了好久。</p><p>就俩循环读入 &amp; 输出，<code>sort()</code>，还有<strong>万恶</strong>的 <code>cmp</code>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i . sh, a_i . sm, a_i . dh, a_i . dm$;</p><p>使用 <code>sort()</code> 结构体排序;</p><p>循环输出排序后的 $a_i$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct Node &#123;    int sh, sm, st, dh, dm, et, id;&#125; a[1001];bool cmp(Node a, Node b) &#123;    return a.et &lt; b.et || a.et == b.et &amp;&amp; a.st &lt; b.st || a.et == b.et &amp;&amp; a.st == b.st &amp;&amp; a.id &lt; b.id;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        scanf(&quot;%d:%d %d:%d&quot;, &amp;a[i].sh, &amp;a[i].sm, &amp;a[i].dh, &amp;a[i].dm);        a[i].st = a[i].sh * 60 + a[i].sm;        a[i].et = a[i].st + a[i].dh * 60 + a[i].dm;        a[i].id = i + 1;    &#125;    sort(a, a + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; a[i].id &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/">https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之武魂融合技 - 题解</title>
      <link href="/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡淼的 C++ 模拟题，也不卡 <code>long long</code>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$ 和 $y$。</p><p><strong>一边输入一边计算，速度快</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, x, y, z;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; x &gt;&gt; y;        z = (x + y) * 2;        cout &lt;&lt; z &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/">https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 前 n 个偶数位回文数之和 - 题解</title>
      <link href="/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>这道题目就不淼了，变成沝了。</del></p><p>写几个函数就不行了。</p><p><del>真 简 单</del></p><p><del>250lht：呜呜呜这是比赛赛题，我保龄。</del></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入 $n$，写个循环判断从 $1$ 起的每一个数，如果满足函数 <code>weishu</code> 和函数 <code>huiwen</code>，则加到计数器。</p><p>这时有人就会问了，<code>huiwen</code> 函数中的 <code>_itoa_s()</code> 是神马东西，请看<a href="https://blog.csdn.net/smcrystal/article/details/71191335?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base">这里</a>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool huiwen(int g) &#123;    int i, j;    char b[1001];    _itoa_s(g, b, 10);    for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><p>以上代码交到洛谷上会 <strong><a href="https://www.luogu.com.cn/record/54096300">CE</a></strong>，你谷居然无法使用 <code>stdlib.h</code> 的 <code>_itoa_s()</code> ???</p><p><strong>偷懒失败</strong>，只好自己写转换函数。</p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;    int i = 0, k, n;    char temp;    if (m &lt; 0) &#123;        s[i] = &#39;-&#39;;        m = -m;        i++;    &#125;    while (m &gt; 0) &#123;        n = m % 10;        m /= 10;        s[i] = n + &#39;0&#39;;        i++;    &#125;    s[i] = &#39;\0&#39;;    if (s[0] == &#39;-&#39;) k = 1;    else k = 0;    for (int j = k; j &lt; i / 2; j++) &#123;        temp = s[j];        s[j] = s[i - j - 1 + k];        s[i - j - 1 + k] = temp;    &#125;&#125;bool huiwen(int g) &#123;    int i, j;    char b[1001];    int_to_string(b, g);    for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/">https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之魂系辨认 - 题解</title>
      <link href="/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>@250lht 这道题目太淼了！</p><p>不多废话，这道题直接写一连串的 <code>if</code> 语句就行了。</p><blockquote><p><strong>P.S.由于 Windows 操作系统终端使用 GB2312，所以无法正确显示中文，但这不会影响洛谷评测结果</strong></p></blockquote><p>审题人真的良心，写了这个，不说的话我还以为我代码出 BUG 了呢。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入 $n$，循环读入 $a_i$，尽量<strong>一边读入一边输出</strong>，<strong>速度快</strong>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void judge(int n) &#123;    if (1 &lt;= n &amp;&amp; n &lt;= 4) cout &lt;&lt; &quot;魂土&quot;;    if (5 &lt;= n &amp;&amp; n &lt;= 14) cout &lt;&lt; &quot;魂师&quot;;    if (15 &lt;= n &amp;&amp; n &lt;= 34) cout &lt;&lt; &quot;大魂师&quot;;    if (35 &lt;= n &amp;&amp; n &lt;= 39) cout &lt;&lt; &quot;魂王&quot;;    if (40 &lt;= n &amp;&amp; n &lt;= 49) cout &lt;&lt; &quot;魂宗&quot;;    if (50 &lt;= n &amp;&amp; n &lt;= 54) cout &lt;&lt; &quot;魂尊&quot;;    if (55 &lt;= n &amp;&amp; n &lt;= 59) cout &lt;&lt; &quot;魂帝&quot;;    if (60 &lt;= n &amp;&amp; n &lt;= 69) cout &lt;&lt; &quot;赤炎斗罗&quot;;    if (70 &lt;= n &amp;&amp; n &lt;= 79) cout &lt;&lt; &quot;巅峰斗罗&quot;;    if (80 &lt;= n &amp;&amp; n &lt;= 89) cout &lt;&lt; &quot;封号斗罗&quot;;    if (90 &lt;= n &amp;&amp; n &lt;= 100) cout &lt;&lt; &quot;海神&quot;;    cout &lt;&lt; endl;&#125;int main() &#123;    int n, a[101] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];        judge(a[i]);    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/">https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 2 - 题解</title>
      <link href="/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题目应使用算法库函数 <del>当然自己手写也行</del> 和类型转换。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>先输入 $x$ 和 $y$，直接输出 $\lceil x \div y \rceil$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long a, b;    cin &gt;&gt; a &gt;&gt; b;    cout &lt;&lt; ceil((double)a / (double)b) &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/">https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - gcd 与 lcm - 题解</title>
      <link href="/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数。</p><p>（算法库里有 int 的：<code>__gcd</code>，不过本题卡 long long）</p><p><strong>注意本题数据范围 $10^{10}$，卡 long long</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;long long gcd(long long a, long long b) &#123;    if (a % b == 0) return b;    else return gcd(b, a % b);&#125;long long lcm(long long a, long long b) &#123;    return a * b / gcd(a, b);&#125;int main() &#123;    long long T, a, b;    string mode;    cin &gt;&gt; T;    while (T--) &#123;        cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;        if (mode == &quot;gcd&quot;) &#123;            cout &lt;&lt; gcd(a, b) &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; lcm(a, b) &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/">https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（2） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ <strong>结构体</strong>排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，$a$ 一样的按 $name_0$（字符串首） 的 ASCII 码<strong>从小到大</strong>排序，所以我们还要自己写 <code>cmp</code> 函数，来比较两结构体。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<del>偷懒</del>，写一个 <code>cmp</code>。</p><p><del>出题人 NB！！！不卡我们 long long 了</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct node &#123;    string name;    int a;&#125; wx[101];bool cmp(node a, node b) &#123;    if (a.a == b.a) &#123;        return a.name[0] &lt; b.name[0];    &#125;    return a.a &gt; b.a;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; wx[i].name &gt;&gt; wx[i].a;    &#125;    sort(wx, wx + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; wx[i].name &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/">https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（1） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ 排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，所以我们要自己写 <code>cmp</code> 函数，来判断升序。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<del>偷懒</del>，写一个 <code>cmp</code>。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(long long a, long long b) &#123;    return a &gt; b;&#125;int main() &#123;    int n;    int a[1001] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a, a + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/">https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 - 题解</title>
      <link href="/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ 语言入门题。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>直接输入正整数 $n$ 再输出 $n \times 10$。</p><p>或者输入字符串 $n$ 再输出 $n + ‘0’$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long（使用方法 2 可无视）</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long x;    cin &gt;&gt; x;    cout &lt;&lt; x * 10 &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><p>本文链接 <a href="https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/">https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/</a> 文章转载需注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/03/hello-world/"/>
      <url>/2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>本文链接 <a href="https://ren-yc.github.io/2021/06/03/hello-world/">https://ren-yc.github.io/2021/06/03/hello-world/</a> 文章转载需注明出处</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
