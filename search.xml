<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LG - 双色棋 - 题解</title>
      <link href="/2021/08/31/LG-%E5%8F%8C%E8%89%B2%E6%A3%8B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/31/LG-%E5%8F%8C%E8%89%B2%E6%A3%8B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="5b59e51c067b6aadc151152fee0461bcc7f719f455910a415cce3f9c5ebcbaf1">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa3afa39afd032f67151a42bac757bb32b6681f84d5d4c48e785c064ff0e5f5c8f16ec59ccb479d70099d3e6a5772e3d87f72e27b700e521aebd0e62456181a4cdff54f6eb372b9e5f4f8f8670063ef90a574af24f3a6ba178857264165a14aea2ead9adcce4433ef65322e23e3c4a4b17ccc878d2efcdd3eae3770e81ece8985fd37496d3543bbb6833503df4827cb96734984f62a6bff9ed68da8ee7bb6880b363b6f824d497296c891d99ea703d542dc5208672295780b2ffccefb75203eb3f9003ec785327d212c03fc6eee445c6ec682b2d8031ac23b292a1739b40f789aba5c0800465ece4a9c236b14cdafedd6b08451b614926de6422f31f8c8ff54faaf4fa0c8832e7e3d979df7f8f5ee20281117bdd1fec25843065ac10740be847d81ae02aa7d0f101d0517c26590559fc18e38f9dfd3123e89f8bd6144fb131975eade9291ad3a5806af17daab83d02f6cb47fc5188c3bc4d3f5689b5baf3b34a8cc45ff9de80a14bad6b9eb84f183aaab4974d6986a0a876ed4e8f766be25295c5e13d6f73b19b988384bbc53bb5c9fda02e8773bb37b04fd07fb4c8476a690a418b239db6af4a2b5133f1571f42e4c3f0a565b3e00194cafa75bf6e0d404be7726669fc61ca33183143c389672ad396b472df3da4e40ae23a9e334a401f7ec498f8c32c070c0725d7feb0ec38d6c031356efd5f56acc84ab31998cb449afba2612fc99cd1903c58f40ce655c3a627fda06f36234ee95b4ed89daae1c97f895ee4838828cdd42e095881b5a30646babf652c5e3f15f77420ccc828a647b52258a979e77841e2b10810881ee80a9b4489a178eee02d73f02b63b8a97fd20f2ada4ab6efd860f11768b1dc086514c4840c35c24fbc568018fee51bab2651709185f1bdaf4fc7fd1387d9ad693b79310c646e89fcc1c3663b1d6d3f388c85e51f9db440c36dfad9e85ab8435aaec1d5b20ba5914c513baccb1f875daa0c2439faa301bce4ca3026c67f2bfacecbd5c71fab3853c4cd5f2cdfaef92960df43495ad89f9d385e3b817554a2fcca767302d8d9f1acbbd3ada91afbd63f280e38e9b18bfaac4a0dc6845922f6368e6e79e61cac106bfa06b260421f506f8bd4b8bba0c54dd647f36fcc14f9a656e87a1c6e48691c5e972421bcbc225426bee3ec3f354fc4a4052b6834577557b224ad52675c6e07446ba8263e6fdcd0cc8b15b5b7efea857eef85e0b04f2d506d3424c9f47a48c44e2a2e5dafc6b466d617467ddb0ac35777a266c65c95b755ab6858fb61533d1c0c2697e16986c49e4dc5b24f56ceeccddeb95d675b929c9f3a975eb6bc02010d49bfe7ba204119ecc533e965773d35c506bda2bc99c525a3769b264f1de434c70cec48edf7abbd4e08ea4364117f75287b8be04294467a8a1b5fdc8c506df28abcf5f43982b358d962071755d294e7e53aeec62c4ba5ad4e2c83c2323935ece00ad132530cb87cb3e1241a5d88fdfa7f6d9726e18034b518279fdd8c94bdfa1e407b77bd49e83c564acd22c2c40a3919f3ad3db71d5982fbdfbd3c5ca24c1007372746555d3809e52228cce77f3641c8dbdc2a7ca26a6d16a2945dd23af6bdcef08f3bce9b9163604eb48db0e693c61851954d4e2dfc612d4f7bec834f4b279c15834c7ffb95244c2b4a48cc72bff02b8bd4a6eb15e8602d9527b623068f7646d6708cdd9ff7e1852230b676620d039618fc3d907588acb5ac6fb75021b284b3c085394bf4d46d9d9d5b061497a03aba8be454507212095522e3559ec2843dec30d14ec0ef88778135cc5db1e2a5de66b4c77345d818a2cf7dd058a67a4a2b843885084ed558f0a840eeeb9637aeca03d8a53995ff7b4bbdbcf18a93689fb41b7d6414142c0d2a105abfbff02de2420ad8528e26cd38f77820703b63fc9ba633204ba05893d259d5cd2a4d6f1a1879d94d3419000afe89337926b60c85301a35a2c67360cd10b84c2973474f9e5fec7a80f9013707d2c156963386bcfe0692eb1265df8e903b6b8793df4f09841d9d2c51ff539ea2bc1dd14b92c7bdee6523dd5155005b5b4ef41b08fd0409089794ac8defcb346beab2d19d5a4cc7f49d2b2856b5ecd1d2e4ff85b7375336fe2a06ca163bb0c9178d78d71f90b550c8a810f162039a573197f5c19e6a6096bcb0cef2af83c91c20b2b309bd78aab30f14608fc271ece32b4563471bd9f9111ae2d5469aff67dfbe9d3c969af4ccee535623a85a614e9244cdd4c79b3c0001fb544ea4f74a6c30531fb2ffb169234cd28db973cdf7e8f0c292f6a5c8a91affca7bf932ab79c7d0fb32ec6fdb9da9a378ab8f1523f0114774d9cf43d9cb51586ab581407127d2a0be515a6fb972df4b9b6d754a9b2e2761c6193c2d968348a491d6fa5adc4d60a0f5ade90d4eca0854b9c872c68452ec8ffaaef11e20bfbc95b71e010d1a85bc74457536c7e4bbddd99834ea16ad000f28ac2798e70a420eeed185e466869dc32bf95f710296ba9bafe18f148189dc2869d7d55c829aac224128e99ec444caf87dd76b9caa8e574103a1faec814ce16cebe9d58add187b7ed733f6f9ba6bdf2512da485f9b5ae0055b625bb455d3f8e0aeeff87e55f1b1d85b3108ca096e39b8f0d7f2a8aa315239287f787df3953f55529b231ef50f3cc7aa5b2083fcb0316de37dc13ddf0e100b2cd96da8acbc349a0247d7229f44134338916b26f5d8634fb182e8f46c86d56e8365e9326c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 贪玩的 ac - 题解</title>
      <link href="/2021/08/29/LG-%E8%B4%AA%E7%8E%A9%E7%9A%84-ac-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/29/LG-%E8%B4%AA%E7%8E%A9%E7%9A%84-ac-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="a09e82c6ed8d1e3c8f394762538e9cb8ff6c6696d24b9fd28fe54bcdc1fa186b">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10637c6e81d6995515642d55a82aa31a4581728e07272a8194623d0a4f8882e2747474b413cb8c0fd97e6791ac7354cf02807b1fbee4de1846bcb65ec1994a15432f77bbaa93b1f7f161fd39fdb5820013bcd79b6ba746f515b681929164b4f69c505272fe34c0e5bbe59742fba1853e668470529db50f36204185723fd9d1525a874e49edd6940c4f99ef0150f54d250a2f07397de6a88182d52626694fedec8d939a582bdc318d829ec6d9d0857b5ac73a7086453ef27f0a698a90c4bd5280e5f32a651d7bc67709fb096efae683312a317f61667743fbdd049712866e4e151fda45f0e2e87c6418289d26af73b4eb1aa1026f57b5f12e297317172eaa90c4083b7c6cf75ed7410622b0a47f4a1c0ba820a92fc92222ae5efd1a92a356da73896a7b9a2e39d7eaa2df67b289af8a1f5cb4827c3a47be00c5aa5ec8c432b66e9328780cd3cffa3add049e2b25cdb3d6d6b8512cd08d8c2604420a437d5614252c7e6d2c8aeedb1fd9973e3e8320ea05df7266907d53b4d84340b09a480d45d5208c00e227f42a909814f905e9d87f6bfb9af702b3f5f640ff218a420ff648c1b75ac6dbd80836b504da05aa264947197bf1c0fcff6a05fa3d5a7f738320fdd7aee68ec21cceaf8c825296f0c840bab3d2ef57a0ff7e689102decbab632a516ab627c93a89591615948383542f23e6d81e02ac22521f82f9e5e95df7e4bae18a413f6ff63a86d6092cfa9eb17f7f9e514e617df00d2880bf74e95338f44d0a798033364fa00c232fcf17c5197a44f92792c8e89fa85e5553f1494986d43df107bee85e2337f508a3c9971197716c746c9ce522f00a1d0e3bbc9476ea7853a0cda17ed79cc0a815a8076ea9decee49901074ecbe4344edef473cdb0fc4268fea18cb6feb7fbc3378b08fa27cb7d21ee2a62d07a62a2c652d2361d98cf4cbd099a5dea5109f1e689e7f3ec043bf3122804aa585af6242a4cc8f40eb3678a1712ab0f9979afa7a1dd1d5900ca051856b70cea0faec887140d9775824afc9c6ed2d738e36653d9b0dfa88cfcfad19369dc7129e837378d46b2850c6422d9e8d81bdf76985c416483d38ddee46ce5735a0fe99734ec8597e0a1ce3ba7dc468af0f71c469426d3e030da44e598c6fcbcf7db243e110833bb7c38bcbb9fb875a5b6848b0870c588d6a8c5f8021479ab96bf5e5223c56ba6aee3765c2984fcb84c6e83dc3d6c2ed7c73f28249100ae3e3d7d625c1b1582d827baf5ebe81ad6921779a674735c957748ab166f8b1bfae3807028fa2fa481c2752631dc4c5183f784e20ee132a5300c490d641a55ff8899fd9f80774fdc05ece47cbe647a6ccfce87994c6b93bbde471d05925e0ff6ae76635017624d15e8575768ebeed86c2d414bc3ed3811e4aabc6bf5d5a617dcb5f8d60d52f83240f8b67e88afd04652a6358d761b6570fffbf6edf2a17a525821bcbde087ac7a71ecc3b6a386b29bcc55a959a66316a168d12e170f22639e40d3b9c1ebb3d1a7ab4c9e6a3aa51beea021cee90f415007a70f28672f686b50f15d393ac7df9f26ab69cf700e949f7b69fb192937087456de2f2b8c0a9ff164bb44be9d6fbefd8e49c91036bb18e472f9861a344eacb2463dede7a9efcbcd9259df772f98326352f9978c0179cff563175a78bed31b78a4f8526501ba20dff108e599e7a4fce5e1051d86eda4e3d1295474a4f00d3a03efa31c7234dfe9c4ceb12069adb69b9a291734a5f1dba4b1a3ef5dbadc5bb1f99c2788882cd2b589b3f9ef5fe0256339943d146a5948a8b4fbbe0e6a0accf8c06b20dca0062b3b5c99039b14376720e6e2397f699bec7effe1f91cf44cb4bfdd29103a50c5a1d98382fa17fcce5da2ea9b97748a900087c8aa0e8dbc29c4993d0fd23a89e7da2acefe9b3e354dafc67da4556d885d18c6d37155bfa16624d116d2c4a386f7d19ebedfb80fed54a74268ce3a5449617891d210fbaf46ec6c85a611e44fe9330c08853bbcd844832efc7a03a964ca000b61375083ff5b790d8ef27a103b553898864b2bab363c9f8527822c83c07172a00bb403e9f1e3207617c0da6f5cd0792bb545f25c7df0a356c875e7bbcfb2f2a38d6896b29f83b7b205ed46370d6bfeccf281c31da9a541caae415ec7f2bd4456cd7c0e2bba50e370a392a69254f04735e2ed19bf73c9d656fbc7ed0c9c2e7e08a5ebc88e6c13e88236d1afb3846deff6909c9737234bc172c3d6c51d122c25cc0a13b9122be58c0699b4abdd33fd9ef02bd78046e89ed41f7eb08119c15ac5e6d11310980ecc9b2ce8efe1d6e7a8bd4053f28f58de2f442e0793db18458d16a65efa75ad941ec5fb9d72fadf6fb864e66aea78cfb23a70c50972acc8b5b8820778a3835e15debd218da0182ba92a2521fecbede97e1ec095ec07cef2c4cb2e09aaa13ec3b5eb449bf7f45647d4b22047bd5a6c13b727bba4b1be3a2b79b818bd7657369e303dc561e250d89e674761cccd9827394941ee9a34fde06caed154e1d1181cbdeb49da0517f4faadc4eeb8b99f89091ca42b7a1222f827d4ac534ea9621c7fc2215ea3d183a1a316fcb7b10bf10c2b09db2ea173f18e10e9f40ffc1c586838c408494213136bb431f726236041a6d87219c3616fb8917b0667332d778e4537f17195e6b40c44b818</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Numbers - 题解</title>
      <link href="/2021/08/29/LG-Numbers-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/29/LG-Numbers-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="03f4a6c72724529bde61774d530f883222f55aa5da1b83442ea978b5a7723cd9">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa852dde2445e7e5a35edbd5494ddd9497ac02765cd81b4a57a5a1cb913149d84b6b74f642fce4a121dca7185497a645b71dfa5e07ce8b22c7402d4c456893bc975b39b8bf1206b71e2acc6fa1eebd5364b4b71b33a9aad5e79d1b09fbabfa99deb8f2019005b29058a6e9f8b3431e912f82869fd230e34741f90894c2267a0e0a9330ded301e21e5feae97efa47311139ad7d5725c836eabc97af3ad589c0b2edc2029907eb34e89118edc3a5f0ebeb41ac8016b532bbe3a7993d6f69767360dcb0dcba583a90b2078dc37d0f7b19e759a847fa7763aa11076a6ca2c774df471f9b7328ac40a9925e1b89a4523ed114966040cb363b3f6b060f0d58098ba3d4c9e65984621482b55a9a1f8e8c59716f2382d5c0cf38f814d7b4df72d150fb28a7dcdd1c832ee35a12c47805c6ac82da1dfa61fc65f1ee327e34a21d3977a864820ecd448f30859ed67d67df0adc222f9b1e94ea804a9fffc7c9e0c9b6aa4f3d7ca35b81e03ef1eac19639657500173e9cdc2c1804e2954c8cd604686d90d7be74ef7b5a1875bc4199283eed95b2de3a2d9e5960857bf7b4775636e20640a76f32489ab27dd799b5171e846ac7a37316df4dc96ab7c3ab56c3bb1371160a939c7612811a2ba281602d48bd2a91d50ba00256cd6536547d2e65cac3f27ef45527332350957b94e2b7f192c93214f48c7ef71949b02baf9c4a0c29744e56d5882cead6e8fa36f51d95b47ca2d6f7b6435271669c0418f5f08304053101631bfe804a7e9014ffaa7c0d15f254344ed5df885ed3820cd526c47d71d35c8566a238e9dd2a60d38c1a9f6644d48fbfc59008a970bb1ff4c9d86950199975e0972550b8f17af5a00338366070a17a48fad6db082d361134ed974ab3ef28f716b6c2b5034d6b2b9efd69b5ca3361327708c44761d20bcca0628a47098a8398533aa169b7ea534b93f40088365ce4a6dee4ed16de8a9fdf23bcc11b361c2d4fe193b8a5c85e30e40892b3f81c9c190bea8ffd55c7597f7b3d9af6528e8b7257eac3da4c027dcfcb7d662cd31fd95f2ce0fcc9530a804a9026cd9557934ff7eac75f894cf535da7ab713d837a4f24c014c79f6f6d756f9b96c2fd6728b2171bb3c78b043ba6054cc643e14c99ff258861e7d347483eaa973c72e13667e002232dfb7bf3595e131466101adcc780fb2a178328010b06173ad2abfb8d2d9bfdc417ccfe584ce5acfeb4722e0bce21fc01a4c1243fff926565e7a37af3e318f867ac20dee48ac7fbddab066e061ce756740ce2180831f572eb0df7e179b140856d7da331a028a83ee348395445959391a9db4a58b0e4d345bf8571730a1b4efd152d79666a6923af284faabceda741fe05dcc930bcce252781fc40cc69d5285e55ae23bce5801ff8ee2a225ceeb89271634bf59f6014ac206ee059fec6784748112f1b4d5b7e42aca49d320fd5fe168438dfd7c64885a10209d4ea4aad47ac90c0e2264ea06c0a2b61e96726e08b40b4fed1d399dc426a54b8f2ce752e51bf25a29f157492507ca44e130066feb9a4c7f1736d11b03d452a257bf2df242331d45a8f52d891a9c885a5e78ad2e0ad71eac453ec456b529fb0c77b875f6c0c085ba62846efcb400fab1075ad9c2ad4c3e47456152a806e4dbf25242fee19f1ce4ee6d96a016646597f7063509ed572a992ae61027ad292bc21b1987d5275045fa5d286431e882ff69879f0ebecc3df294cfb22ca764e5e76b29acbd46955d78fccabfa8c387e8108b68344a3d95512a658037d0ba73dbe1cef3dcb6e8fb006e2fc00600d2981916b7f7a48ee8d4a773d0af921fc9ce721cbd1613be129a1ca897845e2985736a075c81d5cc58cd4c1c66b39d1bbb59e4d7466bca797d1848b65afc7c94ac848c07401b53e97c5be411cee3f899867481ceadc003f1625f2ea24e094f1ce710475860916de70b8635a4184c125fd9aff959bc965e0f2af554b9a0f7b60c9bf92f890d414d03f3bdafb83be9c50f1f148bd654c8514feb4d7882b9bdfe6216b3f7f516239b431787ead89f9955a336450125e5e51819328901543429866d137e0d48531f9baf977ac405e875554d3bd1d1aba06b76c3264167a2648636c18a684e9728c0601a1ec1a6a51f1b7ac12d9b387fb12009727a9c581c6456c3eb33f4271d2d1931cd75abbeb42696a6277131faac6d00ed084f66f921d94f969dfa9b8bb53360021bd3c65082a58c1ff8de505b0711044f9c30c3ee0a08de7de93ff2b561957f8f961c0e18d768b5de292ab004c0a8ff7ef05fe95593f49228afa8d847f8725f96e53bd5aeee9adfd37a11e511dd53342d821c81e1508997e974c9e055b01a98be6fadd602d99e90e090cacf6e8fefd9112ad1327fe552a17cb8c7e55866f6613160a3fad74cf14f4711856e4cec10ef604c853b6b4bc74c87cfdf367127e3c63563dcc5ead86ac5015a920516d77035fe270022553879b3a8d061ffa09ef949541f88e9a8d3d2a88f4e244728790148d1b78018fa35a33f4e61db08aca4595bea3cba2e75ce9070395bbed2fdb1339b82956ed3d898807bd019115e83c7e9cffd366b2edf117e22febf20283f908b3b58eae298548de9f7d519aaf91ba8db3d4f662af3240fbd61e5f5195ef02381b593e8856e07fcd5b48030a91923f17ab483b3ed1a4ae4d11752eb786a77340c10c0299c1a24c28a7e1a630218ac40d803fd9d96e372a3cd95620594efb4b80a5e7125106cad539d895af7561e7286a6210da39aeccafe00a5a181eb7eeedb071e8763187aae9897e4054d9df42ba386cd08821e78467181dec965b2300180c9965f5a71a6cf5ef074d0420c74aed4235a93bd8723016f64097fb6ada8f23689e8f25ed1272af98447c1c708a715e06a32b4d7540e1247a752944e71033ee66539ca2e89188962fd62345c156e239c5c579939ad1b409929309630c76a84c60fb938929190006cd032fcdcea787053815173eab8cdc8cab2d2cc0f7fd9304b968c64c39f40fd35a1c694e55790bb1bedde76ad8dddad75d7602cc900c4572df2238e9d8dabe2623aa52953b2f27b46502e340e98e7a8e068dcd75fa8476c30363db2183af1e344097c685e0b7e621d030e03be5f7c2d74b7af26c0a5baedfd37910915a3d5ca2d4008a9dd21cee87a4eb1590b9ddc5ac42a106934bc6fb23d41886a063d0709858307a064ae8c4b76f6cbb306cafa9a0f9cbc24e5c9bdce65f35ce78cbcaa0c8f746c41d8756022c8cd8b989825376402649edd859a5e4d2cb51e17aee2fc8b6f1ab75b05c8c9ae3a28ea2d0d077404622cd9cfdcf4271d7258177edea9bece5f33307b245690ee6f2572e0f693ad68696a3e2e7d88e05a087c282dcd8457c2c3777d62b532cdaa9e12b971331c3d66702c2ad4fe67499f92908963a09c1ade6bffd419767d2a460d2838ea7f9d9e653ce922a951b11b9ad0ce500eb8202f3d9507f43fda1591f839352af7be5fe20cb45f80702b95eaa872f91c8c1ced6cfbbf4c72d42b1a52642296b7b9ef3c76d810bf6d486683bc90de78214b5dc2ca2cc047a0b8d3f4d22a3b371b09d5f0f66b43c748de4f23e2a432d31598a8eb26e169995c63fed5930d32a752d14208d1098ab85d5f684b0c27b2eb5359ae8564150473a42ab2bfe5b05f033c52ccaa78414fd89ec4d19cfc2dd461cd5962cff197bde54a704475611a21a2689621e5e5d09ced79e86cba5ee177ef61a84cf22fbe368b8a6b832f97fcde0107a9da7ae392390efa182c0101906594e8ca549182f3893f3bf6678c7485524100c4e0bcebcada0d9609edb0bb9e9fa027189e80fcefec2640fb7e48b622958dbc510b2527852e350d426a2d1dff55fb067a09dc5b4d78497be06f852d793aa36119d6726aa9b9bcff7393a4b2c60d3ac63cf209c4963c8c892134f55e276f060cd1e6695c038c18f45b08b18a71ebf11f54009f0922b13999f874f0956c272d5962cb1547cf271e2282a27bda8c942f47e69757f324be1909521a9d6ea31046947abc9d2b2c01b8d47eaff5eb3b594cbd55cc6b54b97a1f369f085fd9779ed494706909a03c9e94365b665f8bc0902c409277569391037aa45757f039c8febaae1791a8dda39580d5e6cd7d5a812c348f6bcd9413aa09fb939bfd2729d6282025799b81a126eaeaf340d810362145cd424650912c04d1798f9d6462eacb0550bc6408af49799320137883c64c7e8190edf16b3f626aed671effb69223393afb353ad0afe88f42894949887e64870519a8a90052f7ff99c2bc3614b2a889e806d6f173769c5924b796093537fc3c4cca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 生存游戏 - 题解</title>
      <link href="/2021/08/28/LG-MC-%E7%94%9F%E5%AD%98%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/28/LG-MC-%E7%94%9F%E5%AD%98%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="04d58d37334ca7eee4b8be5be710e39df3716400f81c96ca5bccb64be21b8118">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa534e500e44862425c6864f8f658ba248de82a840b748558501fc611b4fc318060e738da1c8a509ccb71c91835bccea0a4d3652490bd39478937a16f8c0cc51d3b2058cc19f5c571c5f30527d353b7981f33e9b8eec1a2a3b1d6e61a92f86bd65872575b69c5ec70e2ac48701afa3a18bb8e502a80e4c5556069112499e022aa32a172b2460c4991e333e24637b9378c5b7a16cd2c3db683f269f5b79d2e27a2feaca30af0e6a514e91ec400105f2e397eadd0b79a5295f02c14f932738f9804c88bb53b84950a01473f208f8b8f1c962169036961fc5aec6f27ecc20054d7dbb0aedc7a940d41a8b4a58ee20c9e61005411db9406a04bebb2bf6bd73fcf98b96fc1369784b2707cb2e91ba4392378df1d13b73cfed5452fd47a4657504f2206fd62c70b2001687ae0b64fe051509bbe00176a04c5ea6757174791382a3a0e911846c77308f4129c0eadf0ab38db4eaea25c96a39ef04601bfbe84f7a2cc09adeb91e1d2b04cf6f52a984907670f10341158e692c9438009cc38c7fd29e554338924efabf7a8fd2d70bbea0bdcb51ac0a2f3ea5a4454f94efc1b09f22af8647eb2e5f4af704468c4eb9710e2339d1c634fcf014998c76c0afecd5c78ce9af2a04ea93cc68720a936f5a455f3f5dc97d22b722e18a2290093db5d29affe5750fd2c56c0539155921a39560f11c9ae5173c77946a8e0102d5305ab70ca7feff1d13a57ffae0abd78545c88893e168b7c04519132f63a6834034090f848ce0a8d64c615f6573d6c12c4c6bfd7263f1066452fb3a59b79467a424dbcbbf2e531ac6706ca75740ccd9b3983280a99a57d3618abf76a27a9d158c25d74cfb10a6a76dcb2c471d57b191eed233997440f11ab6411746f566265522bf4f1946953199ab276ba9f5a5661373a2555d2de26c364b6d3ee298e097676af64bb83980ddaabe7774aaeb8b47beadd64cf6c6764513cc0a237b4c30236b69767f79f6a9a5d65ce475027ad3a1ad163828aee0040ecd60354c5f15cb8f96ba08d3de1d30e6195b0bc3206ef617959d98d3ee161378c2aaa335f50eac6b5dfd5a8ef5d8e197a76b0c7c4b0a889f92b991706ca0eade06834538d0adb0d1055cce863d454b705ad4cb4f1a443ee235c7afc82cb6bf0232f946cb7a39a360ea54b8887768491f4bd226bd8a32696877c30a580cb1bf9836b329af658432f8a3934652d4f2683d9c8a82b72ae3a92d381afe11c38d556424b134f3d1b30e33bac3143fd64bdbb4dc0d3531b90feb1fab615ed10c7cc9268ac78f9c4d68e5729431bd442e37e9ba5b763f289e45838755d5c0b1b7c29387c1cb40468b8183138500933b2841c5d76545b528918741885976ce87103ea7fb847c78df13def3458440c670ee9b0bc9eb26afccc26be9cfcfc51552e73a7f0d67879dabab340b3d1501919e79ae97a177e8a2c778033aea25666b142952d6d172ac12d9c29e4b9e2041b4217999cd4893943c4529e9b74b2964a893b1233cef98df5784c2f30df3f5bf803e20f75a9611cda7c448ede5c365e7dd33cf816b1f9e1725876ccb5f580e692446006ee3ff3ef44773aac8ce2892ca2f27134b34deaa2bfa2cfeaaeaf1c21ebc946ff72d92a2cd6b331136e6387733b6a8be37b4f2b27af936e11dcb62c5375c2abf892d6027e66b01317f5661ede67dae52c195a8c92711ebbff6cf932bc58d4396bd7adcf82f91c6ec551abeafe893eeb3d5762abf81a311012d7dc74d7b93609ad78b16a5101bf8c6420f397b8bbb317666c6fbe3532575a373c82be0507fed8e44047f006f1c5049614aaebb0aa8a6128c73f5f8653caef2a892923f171ed3639009c64199176e88e88e4d79166cbe1d67168c9b9a2eea5f2a26c3c45fced129a1590e2d459865e760bbc006769a863cec2f78028ef66f9bc2a217b16f9e0ebd2c741595d522f4029e2c8bf1c9c618b52aeb2ce660c29f61c1733032910e8f9a33ad4826b50dcec5b0ab111fdf45e8a4c5c0d7b7bd151e55df25cab76c51b1a874acad8c58532b70ed62297a7bc7825ce2bc4e3092383c1fc36565ea33a03d059f64410ca8d9873a309960eec00e43e2278ac88b9e2db849cdc396c87fd0f6118b12b8c130241e2584e9a3d046a4a9bde4b32d26c2f63b7885f9ee7b5aeb3442f34c5658126a5115a149da002aa7055cd146d1eb024339f8794111d9f4f79b4a90d55f4a1f04bf334281826fd74c4bd6d35466e9c35dd1f8732f1098a9775118a63ae2e5d8f974ec35c378e5929eb246e74e481f4177d81a94368f150311d6c10936ef6da5bf6a6156324caf26a5646a231ddb346e896b3528124f1c2ab5ac61d9c899e487fa39db05bc038fce43b99459259e9402e32f40d901fabd81dd35b62f24f4f0a7187bea31ec7ea4bc69a56d73799c8f1e5608b7eda5204cee7ddd6d043d109bdc0b21fa711336a44795eb32a8fad234698312d1be05af28eac28e3cfdba76148919d4561d9d29d8dfb1e3b2dd7479f60a419f6caf0f2c22fa7bfa19b387dd2082ee93c1d1fc7f4719dba7ef354cb8817d0316733e43f6dd97b68a14e8b9465135b0c9381f83093eb8691b90af5e453cda1c5d30a6c3ac5e0a6b2c44e8a96c1d77df1947f436021520e2ffad6a743d81ca7080b954558535171b1e5443eb947df72589a6eb855fb81416983c885849e2f2684614d33034d874daaee47392c8d561a2db3ee990c384696e1521027a2ef3836dbf3a40e6882ea252e4f57bf2275580c8e4df25ab4cf7b41a24eee4cdf33ec3122f14b6b8fa1892b49b39e7cf7c7178e3add409e106cdb68e6151086975a2b863adbe9c8041abfcdaed723d18398d01672495ba94a4dcc2381700ecbf9f4d88f70fca9871ea28730db2194d46c02022685d9d890f11b4f8b59b5d71d8736d044a783ba69944ccd7211bb1cc23f8690e311b6c9b4bde3c864ea1092fcc11e6bce47391efa51a69d2be6bc3eaa80a41712e7d314a9983029bdca04dc171230f4aeb1ca354ae93af70f910a2353f8ad8fb8d8130398b88945d73787588d3a6fe10c8ea66f13d10ed6e27d0748e16c4285de75d09a344e6a09a52f12f3670346fe6ac0efe3eb1d4f5f366096c77e428f57960fde5970301964441d5b1e1ac41ad37b1e046a6bd2db601b4429f3e8419e0448551fa9cc6b4bac38fbc1210ba6a51dabb77f970b2f163a53e3b9ba082ae50857144e4469830480b77650b6f062a2e8bc3d903d9e5fc8284d2bb0c87f62ff5bd415a8b1c976ff53bc98da2b18720f628513fa928ab0466b439792810de7e70bcb472b60d49e7573b10593302fddd36e059636a8183e09dc6a547cc2cb94419740cd30687980bf3645a028529f9baa7b6acfc94061981af220007e6124223f4af1d1dfd04d59e319caac46e9d7b454c222d04bfcb789cf2defc02850ae60d427b0e8340c4205108deeb114a45b3df913fe37f0f3b73d1c4ca118d09ad6fb4860172a36f5186676ac79d27f3a370d26a78ae20b758235204560b5ca3d6dd951ba15a6360aa6bd435fd0ef203dcce5ed87e97b40b86ea1efeb5d14158e3a66632146a8a6cab4ebaa9c091c093cd9a46bbfaa77b44072ef858612d1016ac215b2edb6904c065636d4df5a5c92adb9f401ded085fd879f1b32db6ec86df5c88a7aaadf7a49e61e21e65443e85190f0e688e59acbca8f6d2453c5f1aacba67013e347eb39203b130542ad67517ccffc4af0c1e9342ede83781b2aa54ceab083c62da4cff608407208e20bc872ce34d97f22ffed48302b503a1cfb31d826fb2cc7a28491a386d85b2976679e056efc2d47ece2a6db15b09da78644aaa15a162fb7622191f646bcc74d579043bda476369351dd481e8e1bde8398917cc8414c8285b6c71ae778ceeb33aba521d568b0f2209c28a07f1a478ca33ceac76b8fa5e25f335c2c9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 爱数学的 ac 做因式分解（弱化版） - 题解</title>
      <link href="/2021/08/28/LG-%E7%88%B1%E6%95%B0%E5%AD%A6%E7%9A%84-ac-%E5%81%9A%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/28/LG-%E7%88%B1%E6%95%B0%E5%AD%A6%E7%9A%84-ac-%E5%81%9A%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="ba93915af80dbbd4124d91f020bc97d1f7eab36acc3cd51d1a0193dfc53bfb7b">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fab3b3885f00846481a8b17f014c031e69b31f8c233c27a0089d8fe21e6700f1f85035b762cecbcf1531609850f7e46ffe55492ce767dd224df579efbfd7eb4101a5cb0bd34db780dd4595bd6a01f01f5b8a4ba07d84d414b4c7e3dd0156b166248466c3d58145b711bb8976d4ebfa0faaa375dc9979868c21c59ef483fb45a8ffa89f8d19ccd509815072fa4857ce03ab03092201549414fd40ae02a2709ed11046798fa76169276fdedaa3283c9eea0dff42e5cd743cefc8a84b2e4dac7af2a4581d909bf610c3c3dd81aef7774614f7de663a4243f79b1ac13db6060eaa9438360788be1ef943f5549e4b6485377724311f4216761d582bf42006606bdb64a0a63b05570a1bcfb2b0ac852fffdb83f24722535e05a9d7f09c7fd3cdd64d0151b1e2a4d63e29c315c6cf0ad0f5823036bad7b555fe8ce2baf78b90b1ceac38c1be36e6e6d6c3d4c3266d0fa7d77673902de71d5df1736793932ef96725b86801dcde47982db269e617540ac2d772da2e762f96741b2e952fc78579346e50d1646ac937b0b75372f3bf234b0530763fac4cc0990636ad4ce919d108faa9c8ecfc6933c2a36eb0b3f6c827f66152f9b7844fb6bf827db046cf59f2b496d0e6ba0f2ee3a74db1757a3d52a73c94d45833c89710053c9391ab26d60637239a850086df4900f6bce5ee2dc4c675c092872b32c726abe5d19a2b7e7be973e1263663c812f22ed2077a3f7a1a9c5eea4e06289a73711ee7793be62b96b13c0fdcd711f31add0efb5d4d744eb851fcce1595d2dc0bb484d9aad8e3d571f03639c709ebff3c73aad6136bfd229c1f412ada4ca85d85be20df53672a96a8e7e4e97557b5b5571ee375dc1abaf662c711082057fa2bfc0a60e3c1bf30eaa554cfde8326fc9e9faa0c347276ab6583c4cd36ca2730ea0a1cda5b9a1a015379926e7ec6ece19a54a6e851bf60ee049e588688fff5a9ce1ff3206a9b4f99d37f722dee5e2e131119122b91ad45e578a5685bead64054e94c2812f638d40419769c6ee9cfe6a9cf92b0705d04fdc6a791fdd872ddcd77cc7728a094d6d3bb699350e4952ceaab873674f9118c8650f784ac297c09c7648f1ba7de1a775e840f004959138bc6e505e34d7769beea2204bd9df28d633d985067c82bf5248ae3d06e0545cb5e8900f9214035f0c74068a9e962225dc26b669be4471a8cb505510d516f90e2ccfef5b0066292f50018b69d87bff0946614a8eb775b0fd20de3cd5d5070d0864e2d86be71cdb223ce58cc4fcbcd7623980da836637b86c0ebe028fe213a8eac75d7fc943986ef77569f297c675ea9e9e39f5a31b80aa1befbf295e7175a90234b3654f5bb3461ac7d74b04a47766160ba8d0e1c3c8a3e40e7c1aa1528259fc91955978b88e1e27ae9e5a911b044a3ccd123b89887b93c4653c71816b69613437fc7c20b25d00d6230a9f989173838183b3d73dc64dc7b3522de1a2b43b9dc0511320629c7ee6a8c070eaec0a16a40b1bd7528adc60a929531f5284bac74fb483f2f496c21053b00fcfc61c03c7dcf08550c2fc59b2b9100cddc4e36d6b6130c718c89274acb87f029726420fb52ac148bc831ccc2a563e6581b9d3a6361cb878d4991e583eb3aa7bb537c4406974e0aa69bca1dd0b204177ec79cca1c826d716bbcc2125167d1901aea600e03fa139faf9acccbb3d43dc0e494f8843f4bf35a85ac5422f945779a684034ab06a7c0484331f530546cc882f53bfb856e157c58ee532eb85d4157e5a66a057df94ee6bbdb371d5c98c6e31f20e6147493032080c3d506191ca02bf3f872e26965b3368d3d38b536cff82f9dac4bfaf6192a6b3f6c8eaa5beb70d34f5b74f76a0420cd281aa4986a3cb05ac357fef7037d9f210ba01c8eb01004846c289998f1eacf934766ea1315e9a8ce3749d96ababee872df1ed5f66258d982c2b5ed8c38322f6f538442a490303c793debc15009df14a65fb1e8643779b86184f1ad635fcab9e26c63688d65d6ed7a9fcfb9cc67ab70c64567e128d363cbb91e3ac601b66a7886e36c0b49c71ab86d53c3d342dd2ccdc262190181b44b16f8b60a6fd49b33b754f537d2f0afc83a0bb1a917e4c4bf3b3e9fc993e6926143014f3b6296525fadc29167360085bdb308bc9877ec0402080ad32ab1d56ef7faf44e1d65547785927340c8b831f74307f21315a45d3334559acf1ad97400950218697cc537257fcbbfd39b6038e9aeca867487580ed12e444fc3a9c7b11c5df896c024ccf1e646dbbe9537cc802afe0f97e8d1c04155421d4e0ecdb45c02cf9f771b3a193d3f5a03e2692c289abb8acd23587e1a636969206f56b310b70b28733087b7c0464a22c4d6f87f08a3d4dd54eb2dfbdc829be91fe8e375da24d1122c069ba8caad877f1f56ac677c36f7eb34db790277654a93e987e37dcb943a508d679a767e458b3d0382192a02e026f69a81a9deae8341614a9b10b0f382edcb83813fdcaae34365d9ab4b9dd11a5d744a5312e196ac6adb06eeea0f897f1438bb93e009c07e2cb1f5aa582080dd93a8ca26fb35d8e384979a05dbdce403e2bf805133ab075368df4da2db08247d5d45cd7385ae20aceb77710c04e1d423c7e4fc7f57f9dc13ca2f53a8f2c66eaf7efdba618047da327744c3f2b3b67a0131ac3928f718c87e24d53085dbc5677f2ce5d1564c80d752eed8b25df1b4e829addfd4936fd078a659f2a2afef585e484658bd174634a4870d0bbf29e712e341e9c38968eb0580da6b85ae6926e6cb810381bc07d2496c50a335e9e15bfddd5725ab1201f1a7d85cea21c1caa21ba30de911e08f88a11b7154372fac663ae1b25602d0df857934ed198f99f374681e659996a48c1af09a3494889202e050bbc1f48eec5374d54fc8dafef1f2d69377835b965ed756e803158cbb924a528c0960deca2e22ebe310a5e330afc5a6a3b8cdcc63cf36a8ff7049b4cd7ffd283b65290843c321343601d2fe4944add9789e26ef314584cfdd81f1534af908b64833678ec73b783aa9a3b389548d07ded08a585e178e2b74b7ccd4a40ce70c43922a50450f16cedbff8859fc03422f1730356fd4336095853db5aa9c49bb012323cfc26d1272eb587caac77e9d00374a3f072aabc4a3053e55a092c290ec59e901931842d144e614f5642bdf1ff96bf3b3d5b0328eef024d8263f8ffb2fa49bacc3dd9ffc5fc7e02ebb636294770ece4e6db5a81ad6b54cad59c26d92b7ba03f770f4e12c55ce71c5c680c2ba4f2c93e89556600062eec717969167379683372bdf6bde0f12d79e843134c7f198b5049a7ba3f5969414732973010db6671677cb78e06831e226b2632adb938999ca27e8a5e22f982f8fbcd6c3c1d1609de7b84ce97eb3edf551879beb1f048973f257a3f82ebff04776103e774fe7d115489752704a04f2d24a2bad3cf05d0ebc63e7643d811162f8b747116f49c9751fa45344a1e153e2c5c81684a64bb0fc89fc21228f8581f756f6d2f0203516c05d13f94e16af2db245329a7fbf449cca4b9a7799d4a96164a1f5e8a5f4f9ec2ab84ac1b5f2a754743f50b7b8982373053f26cdb3a012052013772799ac0466d8c5bdf4daa27febae90f3cb2c775722ca92d80c36df9f75b2d3da553014ab92045652dd4069cc98533a9eb6abf38322111728ce5bf316f9c23857fe24b00ffdfe72dcf5b07b0ccc59448993f8a719a852019ac07583aed9220c1f9f939c2ee5fc96d89bc47bf675c0c8d07eff1d911b04006b4b6f3ef6ea563949136cf704a4cf586259a0ebc46a774e3cc3445aa086f6a1fc151d382278a31c5aede4fc30e5d49bc32721c39a324dab2c41747e77cb68a2e1283213abcb96ec36b5aca3829816125847ec316167d5c04e7754ff2b63391e054f5dca653b3677a3db984fcb4e7c315d3d2dd276bfb7c7942be06429c96e227cdb103fc68acab521b2fa8a5be0c0306c011c3b3a0b472c898e393acae22b0bc5b64f65a96477d05c1282816f4ec6215de781cb24500fb1fe8d6e98874a7f673b35be64df35b90b50443006af36b284b6fc2dc2065e0ba4c84f98f7502e34bcc1191f98d04a4661ae0148aaafebbba2c377c4bb022119763e04296f9e3658a1326f12ed4c73b0c6326e436e1032020ba07a40187b37187d359a06abb0a9774503e4264bed90856f07a8d28e4bb40164e1e5401ead857089d0726a3a4329eb3f7585f008ff8e8fcde43ac68bfeb44c469af688dab3199653d314fa765315cd27e413aff3fb46b1c3fe698b43d3f6de9d82cefb4285828a05a5f366ec75aea0571fac677f5b1811faccbf2a32a7b22ddabb5b14196b1f5aad180dd262bc6ee1ae64aa706e282475ec751d5da07235d3e7e4b37a5eaa9c2f20a30a481bb7a497267b7b5dbb10bbc38ccc3ab136fdb37c98315ad0071544a7f26ff8edfbebb1b6a4cd27ed40408579307fa1167e8c81c12098f4b18f1ffdce6280e57aa6a9ba4293f76de074e08def643d183c92a6bcb9ea1009399754cff371d46aa8d1f3a17d7af5de2b8d812133101ed9b98b66fa7c5169185b1c537c4efe26e92a0a97877e8b60a9f4e65f504124d91009b6deba2770d3e86ca28db3a8696ee3962642cc853ba0bea09650eb77e7c9f7ba2f135caaaf0cbeda2a7097182862f524a166f9d6a98f9118671fa13d3227d5ca43c8cc130d9d8ab7aaba68b6d258698be5fb28c0e5abb2e224ac334d69b6c556047355e76fb62dcf2b7d56ab344d5632ff7a8e3f6a6a32d4ae3c8bd3aaff59a5c1d1a200aaf302808739629b4f89d5aa7dbecb5139665f1f4b05bcd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 FTQ</title>
      <link href="/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/"/>
      <url>/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在管理员账户下的 Windows 10 中有效</strong></p><p><strong>本文章可能包含敏感内容，请谨慎阅读</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>标题中的 FTQ 全称是 fotiaoqiang（佛跳墙，<del>即一种名菜</del>）。</p><p>那么个软件的用途是什么呢，在 OI 界，这个软件是我们众所周知的 <strong>VPN</strong>。</p><p>用了这个软件，就可以访问类似 谷歌、推特、油管 的网站了。<img src="https://图.tk/5" alt=""></p><p><del>以下纯属扯淡</del>：</p><p><del>你听过佛跳墙吗？只有1%的人答得上来！大家都知道，佛跳墙最近很火，究竟是为什么很火呢？佛跳墙到底是什么梗？相信大家对佛跳墙都很熟悉，佛跳墙就是我们每天都会经常遇到的，但是佛跳墙是怎么回事呢？今天小编就带大家来看看究竟是怎么一回事。佛跳墙最近很火，其实就是因为佛跳墙在网上火了起来。大家可能会感到很惊讶，佛跳墙为什么是这样的？佛跳墙究竟为什么火起来了呢？但事实就是这样，小编也感到非常惊讶。以上就是小编为大家带来的的关于佛跳墙是什么意思，佛跳墙是什么梗的内容。关于佛跳墙大家还有什么想说的吗？欢迎在评论区留言哦</del>~</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://六x8888点com/#由于敏感请转换中文">官网</a></p><p><a href="https://ren-yc.github.io/assets/FTQ/fotiaoqiang-2.7.6-1.zip">本站下载（不保证最新）</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行。</p><p>启动时由于需要设置代理，所以需要管理员权限。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>双击桌面上 $/$ 单击开始菜单上 的 fotiaoqiang，提示需要管理员权限，点击 “是”，然后在默认浏览器里会自动打开一个类似 <code>http://localhost:端口号/一些字符/connect</code> 的新标签页：</p><p><img src="https://ren-yc.github.io/assets/FTQ/final.PNG" alt=""></p><p>点击 “点击连接”，就可以愉快地使用 VPN 辣！！1<img src="https://啧.tk/gx" alt=""></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/26/TLS-如何使用-FTQ/">https://ren-yc.github.io/2021/08/26/TLS-如何使用-FTQ/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』LG - UVA13012 Identifying tea</title>
      <link href="/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/"/>
      <url>/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>太淼了</del>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int t, a, b, c, d, e;    while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）        int ans = 0;//计数器        if (a == t) ans++;//判断        if (b == t) ans++;//同上        if (c == t) ans++;//同上        if (d == t) ans++;//同上        if (e == t) ans++;//同上（草）        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    return 0;//完结撒花&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/23/『题解』LG-UVA13012-Identifying-tea/">https://ren-yc.github.io/2021/08/23/『题解』LG-UVA13012-Identifying-tea/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 愚公移山 - 题解</title>
      <link href="/2021/08/23/LG-%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/23/LG-%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="5055026742fc07e2161d951e33b4b74cac6328aeea094b66d2cec01ef09058b7">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fab47da3d2cbc343606effdc5e83a9076fe300ebe1f212d271f71b54d0a98b12ae348716bc3b987079f27f9fb257dc0f2aae5f473e9b7ea00a29a51f004910c1ded84e84c5a8ed63294f292becba77410bb680bf95c1b785a366350ee5dee4c0414df4bf29bd780be85f4921040f1db1fb10b27ea2c0540dde4596a825d388b6082854271bc38aaa637ef774cbbb02826ef21c6e951bb10a044dfff8f329f18e6f5ba12de2117581012d99de6eb10431721ec4104baf8f78589622713f25d85732c743ef51cfa4702bed536b538009765914c90dbcddb3437772e758a98ecad2c55e63d63cfd6308ffdfdf40843c82f56339bd6f977d797d850c3f18d08a5d9db2304a117c28e1ee5a95f86af4d26ea82a290d7e41148157ad2f693f630ae0bc0df3df98458bb019f4ebb7ec3ec7792b2e03aae84ed86bdf315817ff2a6958aced90ce9c28e35a6b6ba1b2e53e4760ff1a57dc07d936ddf8b6ad0f6fd6aab6925a39d0341e600ca333a14a34e8dd145b299557787a4e872d34078679b1c41767f03ac7c8fd27d0a97718a9739eb6bbcab13645861ad5585a471447756f638e0733672026e54807e32ae75df0f7b754d90a45430d8b0670184f026c2731f1065cee30a91720d237bf831320f0c2af7018349c04befac7ba3495dcd60a5761a0e03d6b0e6d52d340e7f57b60e3971196798a6bf11196fe1eaf8dd3d84052306b1f61cc6575b58386ec130116f66a5331121c8a23cebd148ae7c7aa92666c80a1487b07745ac9468701e7f126cbb6928670682cb9a2f59dfdbd0dab2fc122dfe2b441f41c886c744ce8a5f79065f31152a7a2346e6eba29fc114b6e6d9bd4cdde86205100e1e264205392170acfcabdb2bf813a72105a7dae10517e9e057feff345bb5b30005f7786a6586017921ade2a1633b4f9fdfbbc4c27a1f361002246643568e67edd4e1a6cbc448a65e4046f11fd88221e7ac71e9c467eeb7dda54f3c28dbd604b122358b6cde6e83b1cb764b3d3f15ab8c87373c04e4e7662e554141a1afbada4db3569b91962d95b87ddce81d45ef5180ac69ff99c7e39173b6447ca261e3618722c2d42ff24028bd3665f8753495a9833954ba1b6b8750f5db56616a55ae1b1ead8b625f8bf1692ab5dd4e67fffaefebe251443d4c49a370b3e6dc71b91f27396e9967963bbce1cccf8582b53317bc0f47021099d85e94b22ab573038663096b3b7b5d4b44608039ebf651026a716b1125e3edaf2b490d2ae3ce3b35a1dce1df498c1b80c61d5e467efbe72aa9c9ff9e18180409b3ce83e9d9898754c58d5af8f53f134ce40a6279045e258012191ee40e6f90342fbe90e53d6815e08aee608d5769ac45f407522308ba8948e40a83c802573741d1db5ee2265a1b72ebe718d79f5573673ba23ef2afca9834348b329471062c56cc9ed00559f12b7e74cd69f649539c7fd422a97b8bd4e47d2a6f3bbe723ef760bde734ce04b831646cc8b5d8776e5c40b41f38e755ca988d2a0d037d30a854e89e7d1bc722980cbd8d25807755805451633feb7d3381e7cdb93ade9fe84fd96d3d26cde920e339548253b028af91625293e92595b42a8084ce2e5cbf2b9ad47a193e5bcd375f212732c9e69df009c2375c31234453d2ed09ae690fa44058741014f645386447ce9a590ded0527304b54e0587417474f9c8726eea59c6892c108b08cd72af441b242a649dbc46313dcee03771c1ee82e78e8229600021f4e886ab452dd4d7efa29fe899a16b31c083de27cb76033865ab45d9de400ea4da1d53c368aec6ed771a6ac0c7d911e05830472636991ae6d1837ede49fbbc355635b63100f0f403d7f86811f733d21dd5bd8b44f182455bef83871b2845e42d4731c975970385f99f04b3992100c7545ccd8dcffc00ef4a193db732420be127fe9f92ddb468dd7042699348e6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 听取 WA 声一片 - 题解</title>
      <link href="/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>膜你</del>模拟题，要判断每次枚举需要充的最大值，最后输出的时候一定要加 $1$，<del>又不能跳 $0$ 格。</del></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>双重循环<del>膜你</del>模拟就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, sum = 0, maxn = 0;    string s;    cin &gt;&gt; n;    while (n--) &#123;        cin &gt;&gt; s;        for (int j = 0; j &lt; s.size(); j++) &#123;            if (s[j] == &#39;L&#39;) &#123;                sum++;                for (int k = j + 1; k &lt; s.size(); k++) &#123;                    if (s[k] == &#39;L&#39;) sum++;                    else break;                &#125;                maxn = max(maxn, sum);                sum = 0;            &#125;        &#125;        cout &lt;&lt; maxn + 1 &lt;&lt; endl;        maxn = 0;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/21/LG-听取-WA-声一片-题解/">https://ren-yc.github.io/2021/08/21/LG-听取-WA-声一片-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Killer Queen - 题解</title>
      <link href="/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>深度优先搜索题（<strong>DFS</strong>），在上下左右都搜一遍就好了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>先全部读入然后标记二维数组。</p><p>然后上下左右搜索，如果两个棋子重合，即 $a_{tx,ty} = 2$，则输出 <code>YES</code>，反之输出 <code>NO</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int t, n, qx, qy, kx, ky, tx, ty, a[1001][1001];void dfs(int p, int q) &#123;    int k1[8] = &#123;0, 0, 1, -1, 1, -1, -1, 1&#125;;    int k2[8] = &#123;1, -1, 0, 0, 1, -1, 1, -1&#125;;    a[p][q] = 2;    for (int i = 0; i &lt; 8; i++) &#123;        int xx = p + k1[i], yy = q + k2[i];        if (xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; a[xx][yy] == 0) &#123;            f(xx, yy);        &#125;    &#125;&#125;int main() &#123;    cin &gt;&gt; t;    while (t--) &#123;        cin &gt;&gt; n &gt;&gt; qx &gt;&gt; qy &gt;&gt; kx &gt;&gt; ky &gt;&gt; tx &gt;&gt; ty;        for (int j = n; j &gt;= 1; j--) &#123;            a[j][qy] = 1;            a[qx][j] = 1;        &#125;        int k = qx, l = qy;        while (k &gt;= 1 &amp;&amp; l &gt;= 1) &#123;            a[k][l] = 1;            k--;            l--;        &#125;        k = qx;        l = qy;        while (k &lt;= n &amp;&amp; l &lt;= n) &#123;            a[k][l] = 1;            k++;            l++;        &#125;        k = qx;        l = qy;        while (k &lt;= n &amp;&amp; l &gt;= 1) &#123;            a[k][l] = 1;            k++;            l--;        &#125;        k = qx;        l = qy;        while (k &gt;= 1 &amp;&amp; l &lt;= n) &#123;            a[k][l] = 1;            k--;            l++;        &#125;        dfs(kx, ky);        if (a[tx][ty] == 2) &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;        &#125;        memset(a, 0, sizeof(a));    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/21/LG-Killer-Queen-题解/">https://ren-yc.github.io/2021/08/21/LG-Killer-Queen-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 李白的酒 - 题解</title>
      <link href="/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="0693e25c9ae21a2fb753b9b013b821ee64141ea58ce2d1cd79ec24990a4c665d">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fabfdd31b03a909f2fd127b07f2c0c39b07f6567dc0f7f62746c8fbc03e5068c942417f5c9330c9c8ec67e7c74bc163e7b70a1b7cfcef47279be9ea1016ae4cc752b1b5cb2699471509dce9ae41f547b82f2611e448556b8ce1e14237f3d2881ffcdc01111d6d8418f53884a2d83d5fec3fe4078a53fe6f29ee654c29fb417d78e2ce6a9c17a7c06802fd1e2a08e97bb4e998392501280765a8d3de5458806b0c85c5c6669e8e6cf3bd83fa79060c188b8fb7cf06355404d5ba719e05ecb27bd616c306ce2c4b187b604e7aec70f639d288a137550ed1e390b582aafeeb8909d5cf89ab110d10d173138aa20cc3197455d1ec479e021299994f894e01cebfe68eccb0808a13ff586aa54597dc3889e003782b2c08e924916d9f43aa4301313e9312c0ceea48b0d40ceb2b42886cbb697639345cdfbcac67242b0abe5d5bc8ca37d73315e0ec82a1758bca4a9fded5598b107c034c73549ec93f7e4e012b77629d4196570229f2e49944cb7ad91938eb08021ea51a43d260c070dc280e4bb02e22ca449e1a2b12c2488218297cd8fa281757f48cdff7d1596568828c3a5257862290b0b1ca2dadcf3bba476c6d08bd748839a4174967ad5345368726a8c92fd555078e0d17bd38ee0bae48595c149b2724b4cf14865d41df08b61a7f6de795e8efaa6ed9ee84a556fda38e7e7ef956b1545a1fbfb62a0ecd5dc4abb2f659d264ddfef156cad751feea95bbb15742d2d5fb94b8d560b4d6afbf5e5a7d79b93fe60da2eeaa09d44e15fa660eaa0a3d9cfcf0ce4fbc48ed9425994f30eeea356e81edcbe748d23091c747adadd2367006616c22873f7236cf00cacb0048e6cd28a887c2707bc8f76ba7a4109fe6b6e5a20e6c4d2eef4136d100b243d1eed72d5e020288f80108ae5f60d0991a81118087bfee76e0df655fdcf966bac8bc4b95fe730cb02d81d6ab02fe7bdfad08da905f57d58d672ef97b30be7b6d31cd3a1cc2ce4635c9d084cf6069e7eeebd2580e9ba2559f08a04b0ff8b33038caad7438f2757deef7016c36263bca8df66317c5066efec10a8b2e3fb47d92d0c04145dc7484eb04800047542880037c26813f29f5063396a7d0ef77b4c5196cc168af62a5d82fce48f7d8529d1f761bd12e3207543d43d55ecfa0efad85f7e501f3b2683d16411c88ae7d142244c0a8fe95368a7655af157ed645df2a23fdcabd3735b4c929517a607df51629ae499e5198375e0d8056b9076eb0b81d0b730f50295f9cef54281af0c535be50c2ba018d03caa38de0d3f6b03cc98fb9327a39a793615f880f57875611031c3179fb7f97455df5a5972e128e3ae2fc759573d350067e8bf4be32ed951f4ba5ab4d848cea2dda867a8096c564b1e86e2c6f5fac90661f03ee9fddd717da23d40c62e1dcbfa65ff85baad2d493afc4e1b254a5395486cd7c5c4c47233e4915173d0e5d8d4bd91e6e3871ae5686e8dbc28647bbfaaa904f9cd51cdffbc3040d78a3bae350c2ba78fe7b6017819c1efb6e2e73c84d0ee20fd7aa5e80598213ced0d8b446161acd77399ed292916c78d4d4fc948a92c0416110f5095ee7ccce408becb0f2b19031aaf97bfd74de33350f5644f398434a5dd73df7d53d062f21ce035d12e6413ae4a268a2749e755eed8fedf1f3c0dda9d95f2112162eed6896cf680c956344524870eb46129512f8d2d8b396cdd9a19a5505b0e59de0737143ff1907b15b684e0c1dc333765b45460a48925b75662531f4e5c265de07f1e9f5e9b904144e3b8fb9e8388635fd30c7c4943f56fdbe7ee25289c1489c43e993a41e3a85a310872bcef22d755ceb7e1ffee047be9491f1339733cd1b1af792cc9ed9a86d6e3e959e2df224776f0ee1a73c4282378d48564223082fcb4a21718b5922cbb86fca9fce4af3498a3a96c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 满二叉树 - 题解</title>
      <link href="/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>满二叉树板子题。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>三个 <code>for</code> 循环，</p><p>第一个用于计算节点的数量，</p><p>第二个用于初始化树数组，</p><p>第三个用于模拟。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int k, q, a[10001] = &#123;0&#125;, p = 1;    char s[101];    cin &gt;&gt; k &gt;&gt; q;    for (int i = 1; i &lt;= k; i++) &#123;        p *= 2;    &#125;    for (int i = 1; i &lt;= p - 1; i++) &#123;        a[i] = i;    &#125;    for (int i = 1; i &lt;= q; i++) &#123;        cin &gt;&gt; s;        int o = 1;        for (int j = 0; s[j] != &#39;\0&#39;; j++) &#123;            if (s[j] == &#39;L&#39;) &#123;                o *= 2;            &#125; else &#123;                o *= 2;                o++;            &#125;        &#125;        cout &lt;&lt; o &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/14/LG-满二叉树-题解/">https://ren-yc.github.io/2021/08/14/LG-满二叉树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 IDM</title>
      <link href="/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/"/>
      <url>/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>众所周知</del>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><del>_我很严肃_：</del></p><p><del>_IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！_</del></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 主目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p>方法同上。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” — “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://啧.tk/gx" alt=""></p><h6 id="若破解失败，记得在评论区留言告诉我小编哦"><a href="#若破解失败，记得在评论区留言告诉我小编哦" class="headerlink" title="若破解失败，记得在评论区留言告诉我小编哦"></a>若破解失败，记得在评论区留言告诉我<del>小编</del>哦</h6><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/12/TLS-如何使用-IDM/">https://ren-yc.github.io/2021/08/12/TLS-如何使用-IDM/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四篇关于 chen_zhe 的美文</title>
      <link href="/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/"/>
      <url>/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="壹-chen-zhe人"><a href="#壹-chen-zhe人" class="headerlink" title="壹 chen_zhe人"></a>壹 chen_zhe人</h2><p>那是谁 是谁 是谁</p><p>那就是 chen_zhe</p><p>chen_zhe 人 chen_zhe 人</p><p>背负着暴政之名</p><p>抛弃了一切（指民心）而战斗（指禁言）的男人</p><p>chen_zhe 代码是超音波（形容很会卡常）</p><p>chen_zhe 之眼（指管控 OIer）在洛谷飞翔</p><p>手里掌握着 恶魔之力</p><p>正义的英雄（</p><p>chen_zhe 人 chen_zhe 人</p><p>开始知道暴政的男人</p><p>因那紫名而觉醒的男人</p><p>chen_zhe 禁言是迫害之力</p><p>chen_zhe 之眼透视一切</p><p>chen_zhe 劈砍肋骨可断</p><p>手里掌握着 管理之力</p><p>正义的英雄</p><p>chen_zhe 人 chen_zhe 人</p><h2 id="贰-少年-chen-zhe"><a href="#贰-少年-chen-zhe" class="headerlink" title="贰 少年 chen_zhe"></a>贰 少年 chen_zhe</h2><p>明亮的机房中开着一台神秘的电脑，旁边是一个题库，都存着一望无际的 chen_zhe 做的神仙毒瘤题，其间有一个十二三岁的少年，血管里流着网络流，靠着一棵平衡树，向蒟蒻的 lhy930 尽力地踩去，lhy930 被爆踩了好久后却将身一扭，反从他的胯下跳进他家的内存池了。</p><p>这少年便是 chen_zhe。我被他爆踩时，也不过十多岁，离现在将有几年了；那时我还没开始学 OI，也很 LJ，我正是一个蒟蒻。那一年，我家是一件大比赛的值年。这比赛，说是三十多年才能轮到一回，所以很毒瘤；正月里做神仙毒瘤题，题目很多，数据很讲究，做的人也很多，数据也很要防偷去。我家只有一个忙月，忙不过来，他便对父亲说，可以叫他的儿子 chen_zhe 来出题配数据的。</p><p>我的父亲允许了；我也很高兴，因为我早听到 chen_zhe 这名字，而且知道他和我仿佛年纪，是个神犇巨佬，会做和出神仙毒瘤题，所以我们叫他巨佬。他是能 AK 所有比赛的。</p><p>我于是日日盼望新年，新年到，chen_zhe 也就到了。好容易到了年末，有一日，母亲告诉我，chen_zhe 来了，我便飞跑的去看。他正在机房里，红色的圆脸，头戴一顶小绿帽，看上去明显就是一个光头。他见人很喜欢嘲讽，唯独嘲讽我嘲讽得最过分，没有旁人的时候，来嘲讽我，于是不到半日，我便被爆踩了。</p><p>我们那时候不知道谈些什么，只记得 chen_zhe 很高兴，说是上洛谷之后，做了没有其他人会做的毒瘤题。</p><p>第二日，我便要他做题。他说：“这不能。须有神仙毒瘤题了才好。我们电脑上，有了题，我开出一块内存池来，用预处理所有的几亿个数据，打好表，看输入来了时，我立刻地将我预处理好的答案，只一输出，那正确答案 $0$ $ms$ 就输出来了。数据结构、字符串、图论、DP 什么的都是 LJ 玩意儿……”</p><p>我于是又很盼望有题。</p><p>chen_zhe 又对我说：“现在这些题太水了，你夏天到我们这里来。我们日里去网上虐人，lhy930 也有，kkk 也有，tourist 也有。晚上我和爹虐全场去，你也去。”</p><p>“要加文件输入输出吗？”</p><p>“不用。我的程序可是非常大佬的，可以自动判断要不要文件输入输出。要管的是卡时间、卡空间、卡算法。洛谷上面，你看，月赛开始了，我要 AK 了。你便写好膜拜之语，在犇犇里发出去……”</p><p>我那时并不知道这所谓月赛的是怎么一件东西——便是现在也没有知道——只是无端的觉得这肯定是神犇巨佬才能参加的比赛。</p><p>“比赛很水么？”</p><p>“有我呢。开始了，看见题了，我便 AK 了。这些题目很毒瘤，要用主席树，还要用模拟退火。但是对我来说都是不是一点的水……”</p><p>我素不知道天下有这许多新鲜事：竟然有比 A+B Problem 毒瘤的题目，而且竟然有人能够 <code>AC</code>，我先前单知道我连 A+B Problem 都过不了罢了。</p><p>“我们 CF 上，题目要来的时候，就有许多人喊着要 AK，但最后都被我给 Hack 掉了……”</p><p>阿！chen_zhe 的心里有无穷无尽的稀奇的算法，都是我往常的朋友所不知道的。他们不知道一些事，chen_zhe 在 AK 虐场时，他们都和我一样还在颓 A+B Problem。</p><p>可惜正月过去了，chen_zhe 须回家里去，我急得大哭，他也躲到厨房里，哭着不肯出门，但终于被他父亲带走了。他后来还托他的父亲带给我一堆神仙毒瘤题和它们的 <code>AC</code> 代码，我也曾送他一两道红题，但从此没有再见面。</p><h2 id="叁-chen-乙己"><a href="#叁-chen-乙己" class="headerlink" title="叁 chen 乙己"></a>叁 chen 乙己</h2><p>chen_zhe 一上洛谷，所有做题的人便都看着他笑，有的叫道，“chen_zhe，你门前又长出主席树了！”他不回答，对老师说，“开两台电脑，要一堆毒瘤题。”便排出一堆 <code>AC</code> 代码。他们又故意的高声嚷道，“你一定又 AK 了人家的比赛了！”chen_zhe 睁大眼睛说，“你怎么这样凭空污人蒟蒻……”“蒟蒻？什么蒟蒻？我前天亲眼见你虐了 lhy930，吊着打。”chen_zhe 便涨红了脸，额上的青筋条条绽出，争辩道，“AK 不能算 AK……AK！……巨佬的事，能算 AK 么？”接连便是难懂的话，什么“我是神犇”，什么“lhy930 是蒟蒻”之类，引得众人都哄笑起来：机房内外充满了快活的空气。</p><p>听人家背地里谈论，chen_zhe 原来也做 IOI 的题，但终于不屑于再做，又不会出这种对他来说特别水的题目；于是做的题愈做愈难，难到我一看就吓晕了。幸而做得所有题目，便替人家做水题，换一道神仙毒瘤题做。可惜他又有一样坏脾气，便是不屑于做。做不到几天，便连人和电脑程序代码，一齐失踪。如是几次，叫他做水题的人也没有了。chen_zhe 没有法，便免不了偶然做些 AK 神仙毒瘤比赛的事。但他在洛谷里，品行却比别人都好，就是从不拖欠；虽然间或不屑于做洛谷的题，暂时记在任务计划上，但不出一小时，定然全 A，从任务计划上拭去了这些题目的名字。</p><p>chen_zhe 做过几道神仙毒瘤题，涨红的脸色渐渐复了原，旁人便又问道，“chen_zhe，你当真能 AK IOI 么？”chen_zhe 看着问他的人，显出不屑、鄙视的神气。他们便接着说道，“你怎的连洛谷的题目也不刷光呢？”chen_zhe 立刻显出藐视嘲讽模样，脸上笼上了一层红色，嘴里说些话；这回可是全是“全是水题”之类，一些不懂了。在这时候，众人也都哄笑起来：机房内外充满了快活的空气。</p><p>在这些时候，我可以附和着笑，老师是决不责备的。而且老师见了 chen_zhe，也每每这样问他，引人发笑。chen_zhe 自己知道不能和他们谈天，便只好向蒟蒻说话。有一回对我说道，“你会做 A+B Problem 么？”我略略摇一摇头。他说，“不会做，……我便考你一考。洛谷的深蓝题，怎样做的？”我想，这么大佬的人，也能考我么？便回过脸去，不再理会。chen_zhe 等了许久，很恳切的说道，“不会做罢？……我教给你，记着！这些题应该记着。将来打我出的比赛的时候，做题要用。”我暗想我和他的等级还很远呢，而且我也从不敢打他出的神仙毒瘤比赛；又好笑，又不耐烦，懒懒的答他道，“谁要你教，不是只有你才会做的题目么？”chen_zhe 显出极不高兴的样子，将两个指头的长指甲敲着键盘，点头说，“错啦错啦！……这些题目都是超级水的红题，你知道么？”我愈不耐烦了，努着嘴走远。chen_zhe 刚打了一堆毒瘤算法以及宏函数，想在 IOI 官网上 AK，见我毫不热心，便又叹一口气，显出极惋惜的样子。</p><p>有几回，邻居 main 包和 ltt 听得笑声，也赶热闹，拦住了 chen_zhe。他便给他们神仙毒瘤题，一人几十道。他们做完题，仍然不散，眼睛都望着他的个人题库。chen_zhe 着了慌，退出题目将屏幕锁住，弯腰下去说道，“太简单了了，这都太简单了。”直起身又看一看题目，自己摇头说，“简单简单！难乎哉？不难也。”于是这一群神犇巨佬都在笑声里走散了。</p><p>chen_zhe 是这样的使人快活，可是没有他，别人也便这么过。</p><p>有一天，大约是 ACM World Final 后的两三天，正在慢慢的算 <code>AC</code> 题目，取下粉板，忽然说，“chen_zhe 长久没有打洛谷的题了。任务计划里还有十九道题呢！”我才也觉得他的确长久没有打我们的题了。一个蒟蒻的 lhy930 说道，“他怎么会打我们这些水题？……他打神仙毒瘤题去了。”老师说，“哦！”“他总仍旧是 AK。这一回，是自己太强，竟 AK 到 IOI 里去了。IOI 的神仙毒瘤题，AK 得的么？”“后来怎么样？”“怎么样？先拉他去了 ACM World Final 比赛现场，后来是做题，做了几分钟，就直接 AK 了。”“后来呢？”“后来他 <code>AC</code> 完所有的神仙毒瘤题了。”“刷完了怎样呢？”“怎样？……谁晓得？许是去出神仙毒瘤题然后自己 <code>AC</code> 了。”老师也不再问，仍然不住地感叹 chen_zhe 是历史上最强的神犇大佬。</p><h2 id="肆-chen-zhe-先生"><a href="#肆-chen-zhe-先生" class="headerlink" title="肆 chen_zhe 先生"></a>肆 chen_zhe 先生</h2><p>浙江也无非是这样。NOIP 爆 $0$ 的时节，望去确也象绯红的轻云，但 <code>WA</code> 下也缺不了成群结队的 “天朝 OIer” 的速成班，头顶上盘着大辫子，顶得绿帽的顶上高高耸起，形成一棵主席树。也有解散辫子，盘得平的，除下帽来，油光可鉴，宛如小蒟蒻的算法一般，还要将脖子扭几扭。实在标致极了。</p><p>天朝 OIer 会馆的门房里有几本《算法导论》买，有时还值得去一转；倘在上午，里面的几间洋房里倒也还可以坐坐的。但到傍晚，有一间的地板便常不免要咚咚咚地响得震天，兼以满房烟尘斗乱；问问精通时事的人，答道，“那是在学 DP。”</p><p>到别的地方去看看，如何呢？</p><p>我就往上海的 OI 专门机房去。从长沙出发，不久便到一处驿站，写道：新♂日♂暮♂里。不知怎地，我到现在还记得这名目。其次却只记得温州了，这是江南皮革厂的老板黄鹤王八蛋欠钱的地方。上海是一个强市，并不大；夏天热得利害；还没有浙江的 OIer。</p><p>大概是物以希为贵罢。北京的白菜运往浙江，便用红头绳系住菜根，倒挂在水果店头，尊为“胶菜”；福建野生着的芦荟，一到北京就请进温室，且美其名曰“龙舌兰”。我到上海也颇受了这样的优待，不但机房不收学费，几个教练还为我的食宿操心。我先是住在小黑屋旁边一个客店里的，初夏已经颇热，蚊子还多，后来用被盖了全身，用衣服包了头脸，只留两个鼻孔出气。在这呼吸不息的地方，蚊子竟无从插嘴，居然睡安稳了。饭食也不坏。但一位教练却以为这客店也包办棕名的饭食，我住在那里不相宜，几次三番，几次三番地说。我虽然觉得客店兼办棕名的饭食和我不相干，然而好意难却，也只得别寻相宜的住处了。于是搬到别一家，离小黑屋也很远，可惜每天总要喝难以下咽的蒟蒻汤。</p><p>从此就看见许多陌生的 dalao，听到许多新鲜的算法。数据结构是两个 dalao 分任的。最初是二叉树。其时进来的是一个白胖的 dalao，大饼脸，戴着眼镜，挟着一迭大大小小的书。一将书放在讲台上，便用了缓慢而很能嘲讽的声调，向学生介绍自己道：——</p><p>“我就是叫作 chen_zhe 的……。”</p><p>后面有几个人笑起来了。他接着便讲述 OI 在上海发达的历史，那些大大小小的书，便是从最初到现今关于这一门学问的著作。起初有几本是线装的；还有翻刻中国译本的，他们的翻译和研究新的医学，并不比浙江早。</p><p>那坐在后面发笑的是上次 % 你赛爆 $0$ 的留级学生，在机房已经一年，掌故颇为熟悉的了。他们便给新生讲演每个 dalao 的历史。这 chen_zhe dalao，据说是太强了，竟能 AK IOI、吊打集训队；他做的题，都是神仙毒瘤题，有一回参加 IOI，致使出题者的疑心他走后门，硬是叫他爆了 $0$。</p><p>他们的话大概是真的，我就亲见他有一次 AK IOI。</p><p>过了一星期，大约是星期六，他使助手来叫我了。到得机房，见他坐在树状数组和许多单独的线段树中间，——他其时正在研究着线段树，后来有一篇论文在本校的杂志上发表出来。</p><p>“我的代码，你能抄下来么？”他问。</p><p>“可以抄一点。”</p><p>“拿来我看！”</p><p>我交出所抄的代码去，他收下了，第二三天便还我，并且说，此后每一星期要送给他看一回。我拿下来打开看时，很吃了一惊，同时也感到一种不安和感激。原来我的代码已经从头到末，都在注释栏添改过了，不但增加了许多脱漏的地方，连语句的错误，也都一一订正。这样一直继续到教完了他所担任的功课：二叉树、线段树、主席树。</p><p>可惜我那时太不用功，有时也很任性。还记得有一回 chen_zhe dalao 将我叫到他的机房里去，翻出我那代码上的一条语句来，是递归的定义，指着，向我嘲讽的说道：——</p><p>“你看，你将这条语句移了一点位置了。——自然，这样一移，的确比较的快速些，然而代码不是竞速，题意是那么样的，我们没法改换它。现在我给你改好了，以后你要全照着PPT上那样的写。”</p><p>但是我还不服气，口头答应着，心里却想道：——</p><p>“代码还是我写的不错；至于实在的题意，我心里自然记得的。”</p><p>学年试验完毕之后，我便到 slay 颓了一夏天，秋初再回机房，成绩早已发表了，同学一百余人之中，我在中间，不过是没有爆 $0$。这回 chen_zhe dalao 所担任的功课，是 OI 实习和莫队。</p><p>OI 实习了大概一星期，他又叫我去了，很高兴地，仍用了极能嘲讽的声调对我说道：——</p><p>“我因为听说浙江 OIer 是很敬重 main 包的，所以很担心，怕你不肯次 main 包。现在总算放心了，没有这回事。”</p><p>但他也偶有使我很为难的时候。他听说蒟蒻是很菜的，但不知道详细，所以要问我怎么菜，菜到怎样的程度，还叹息道，“总要看一看才知道。究竟是怎么一回事呢？”</p><p>有一天，本级的学生会淦事到我寓里来了，要借我的代码看。我检出来交给他们，却只翻检了一通，并没有带走。但他们一走，洛谷就收到一封很长的私信，拆开看时，第一句是：——</p><p>“警告：刷屏者禁言”</p><p>这是《算法导论》上的句子罢，但经 kkksc03 新近引用过的。其时正值犇犇战争，k 老先生便写了一封给 chen_zhe 联盟和反 chen_zhe 大队的团队主的私信，开首便是这一句。文文新闻上很斥责他的不逊，爱咕青年也愤然，然而暗地里却早受了他的影响了。其次的话，大略是说上年 % 你赛的题目，是 chen_zhe dalao 代码上做了注释，我预先知道的，所以能有这样的成绩。末尾是匿名。</p><p>我这才回忆到前几天的一件事。因为要开同级会，淦事便在黑板上写广告，末一句是“请全数到会勿漏为要”，而且在“漏”字旁边加了一个圈。我当时虽然觉到圈得可笑，但是毫不介意，这回才悟出那字也在讥刺我了，犹言我得了教练漏泄出来的题目。</p><p>我便将这事告知了 chen_zhe dalao；有几个和我熟识的蒟蒻也很不平，一同去诘责淦事托辞检查的无礼，并且要求他们将检查的结果，发表出来。终于这流言消灭了，淦事却又竭力运动，要收回那一封匿名信去。结末是我便将这 kkksc03 式的信退还了他们。</p><p>浙江是弱省，所以浙江 OIer 当然是蒟蒻，分数在 $9$ 分以上，便不是自己的能力了：也无怪他们疑惑。但我接着便有参观封禁浙江 OIer 的命运了。第二年添教高级算法，算法的代码是全用电影来显示的，一段落已完而还没有到下课的时候，便影几片时事的片子，自然都是 chen_zhe 联盟战胜反 chen_zhe 大队的情形。但偏有浙江 OIer 夹在里边：在犇犇里刷屏，被管理员发现，要封禁了，围着看的也是一群浙江 OIer；在讲堂里的还有一个我。</p><p>“Hello World！”他们都拍掌欢呼起来。</p><p>这种欢呼，是每看一片都有的，但在我，这一声却特别听得刺耳。此后回到浙江来，我看见那些闲看禁言 OIer 的人们，他们也何尝不酒醉似的喝彩，——妈耶，无法可想！但在那时那地，我的意见却变化了。</p><p>到第二学年的终结，我便去寻 chen_zhe dalao，告诉他我将不学 OI，并且离开这上海。他的脸色仿佛有些悲哀，似乎想说话，但竟没有说。</p><p>“我想去学游戏设计，dalao 教给我的 C++，也还有用的。”其实我并没有决意要学游戏设计，因为看得他有些凄然，便说了一个慰安他的谎话。</p><p>“为竞赛而教的 C++ 之类，怕于游戏设计也没有什么大帮助。”他叹息说。</p><p>将走的前几天，他叫我到他家里去，交给我一道神仙毒瘤题的 <code>AC</code> 代码，后面写着两个字道：“爆踩”，还说希望将红题也送他。但我这时适值没有红题了；他便叮嘱我将来出了发给他，并且时时私信告诉他此后的状况。</p><p>我离开上海之后，就多年没有写过代码，又因为状况也无聊，说起来无非使他失望，便连信也怕敢写了。经过的年月一多，话更无从说起，所以虽然有时想写信，却又难以下笔，这样的一直到现在，竟没有寄过一封信和一张照片。从他那一面看起来，是一去之后，杳无消息了。</p><p>但不知怎地，我总还时时记起他，在我所认为我 % 的 dalao 的之中，他是最强，最骚的一个。有时我常常想：他的对于我的热心的爆踩，不倦的嘲讽，小而言之，是为浙江，就是希望浙江有新的 OI；大而言之，是为学术，就是希望新的 OI 传到浙江去。他的性格，在我的眼里和心里是伟大的，虽然他的姓名并不为许多人（除 OIer）所知道。</p><p>他所注释的代码，我曾经剪成三个 Word 文档，收藏着的，将作为永久的纪念。不幸 $9$ 年前迁居的时候，中途毁坏了一台笔记本，失去半个 F 盘的数据，恰巧这代码也遗失在内了。责成修电脑的去修复，寂无回信。只有他的神仙毒瘤题的 <code>AC</code> 代码至今还挂在我电脑的桌面上，C++ 旁边。每当夜间疲倦，正想偷懒时，仰面在灯光中瞥见他白胖的面貌，似乎正要说出嘲讽蒟蒻的话来，便使我忽又良心发现，而且增加勇气了，于是喝上一口冰阔落，再继续写些为“dalao”之流所深恶痛疾的文字。</p><p><em>*</em>文章转自luogu</p><p>此文章转载于 <a href="https://www.cnblogs.com/Attention/p/9781101.html">https://www.cnblogs.com/Attention/p/9781101.html</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/09/四篇关于-chen-zhe-的美文/">https://ren-yc.github.io/2021/08/09/四篇关于-chen-zhe-的美文/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 光头强砍树 - 题解</title>
      <link href="/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>很淼，读入后循环判断输出就行了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(n)$</p><p>空间复杂度 $O(n)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, k, a[101] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    cin &gt;&gt; k;    for (int i = 0; i &lt; n; i++) &#123;        if (a[i] != k) cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/08/LG-光头强砍树-题解/">https://ren-yc.github.io/2021/08/08/LG-光头强砍树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 不存在的 1 + 1 = 1 - 题解</title>
      <link href="/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目解法：</p><p>$\because$ 观察样例得 $ans = n \times 2 - m$。</p><p>$\therefore$ $output = ans$。</p><p><img src="https://啧.tk/xyx" alt="/huaji"><del>以上纯属搞笑</del></p><p>这题就这解法了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>不解释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    unsigned long long n, m;    cin &gt;&gt; n &gt;&gt; m;    cout &lt;&lt; n * 2 - m &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/08/LG-不存在的-1-1-1-题解/">https://ren-yc.github.io/2021/08/08/LG-不存在的-1-1-1-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 木棍 - 题解</title>
      <link href="/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目说</p><blockquote><p>Bob 想知道至少他需要去掉多少根。</p></blockquote><p>所以我们可以利用 “三角形两边之和大于第三边” 的性质来做。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>不解释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long n, tmp, a = 1, b = 2;    cin &gt;&gt; n;    if (n &lt; 3) &#123;        cout &lt;&lt; 0 &lt;&lt; endl;        return 0;    &#125;    for (int i = 2; a + b &lt;= n; i++) &#123;        long long c = a + b;        a = b;        b = c;        tmp = i;    &#125;    cout &lt;&lt; n - tmp - 1 &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-木棍-题解/">https://ren-yc.github.io/2021/08/07/LG-木棍-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 苹果树 - 题解</title>
      <link href="/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>典型的 $Fibonacci$ 数列题，题目居然写出来了……</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>板子题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, i = 0, a, b = 1, s = 2;    cin &gt;&gt; n;    if (n &gt;= 2) &#123;        n -= 2;        i += 2;    &#125; else &#123;        cout &lt;&lt; 1 &lt;&lt; endl;        return 0;    &#125;    while (n &gt; 0) &#123;        n -= s;        i % 2 == 0 ? a = s : b = s;        s = a + b;        i++;    &#125;    cout &lt;&lt; i &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/">https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 万恶的试卷 - 题解</title>
      <link href="/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>既然题目说了 $a_i$ 可能很大，就是高精度了，<del>但我懒得写高精</del>，得用个不同的排序方法。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>这题难就难在两个输出循环怎么搞，为了避免溢出，要先输出一半再输出一半。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;string a[1001];bool cmp(string a, string b) &#123;    if (a.size() == b.size()) return a &gt; b;    return a.size() &gt; b.size();&#125;int main() &#123;    long long n;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1, cmp);    for (int i = 1; i &lt;= n; i += 2) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    for (int i = (n / 2) * 2; i &gt;= 1; i -= 2) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/">https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 捕食关系 - 题解</title>
      <link href="/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>水题一道，输入后循环查找 $a_i$ $&gt;$ $b_j$。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(n + m)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, m, s = 0;    cin &gt;&gt; n &gt;&gt; m;    int a[20001] = &#123;0&#125;, b[20001] = &#123;0&#125;;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        cin &gt;&gt; b[i];    &#125;    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= m; j++) &#123;            if (a[i] &gt; b[j]) &#123;                s++;            &#125;        &#125;    &#125;    cout &lt;&lt; s &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/">https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 负二进制 - 题解</title>
      <link href="/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>板子题。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><del>打表出奇迹</del></p><p>由于数据出锅，本题题解使用了大佬 @<a href="https://www.luogu.com.cn/user/341650">wangwls</a> 的代码（不要脸）<img src="https://啧.tk/fad" alt=""></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, p2[50] = &#123;1, -2, 4, -8, 16, -32, 64, -128, 256, -512, 1024, -2048, 4096, -8192, 16384, -32768, 65536, -131072, 262144, -524288&#125;;void fun(int x) &#123;    int ws[50], c = 0;    while (x) &#123;        ws[++c] = x % 2;        x /= 2;    &#125;    for (int i = c; i &gt;= 1; i--) &#123;        cout &lt;&lt; ws[i];    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    cin &gt;&gt; n;    for (int k = 0; k &lt; (1 &lt;&lt; 12); k++) &#123;        int s = 0;        for (int i = 0; i &lt; 12; i++) &#123;            if (k &amp; (1 &lt;&lt; i)) &#123;                s += p2[i];            &#125;        &#125;        if (s == n) &#123;            fun(k);            return 0;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-负二进制-题解/">https://ren-yc.github.io/2021/08/07/LG-负二进制-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 行程码 - 题解</title>
      <link href="/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这就是个<del>简单的</del>模拟题，细节特别多，我调了半天才 AC <img src="https://啧.tk/kk" alt="/kk"></p><p><strong><del>毒瘤大模拟</del></strong></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>本题要点：</p><p>要俩结构体</p><p>计算月份，由于题目中说</p><blockquote><p>所有时间均在 $2021$ 年。</p></blockquote><p>直接打表</p><p>输入字符串最好不要用 <code>scanf()</code></p><p>注意处理重复的城市</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int month[13] = &#123;-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;struct NODE1 &#123;    string name;    char state;//状态&#125; a[11];struct NODE2 &#123;    int MM, DD, tot;    string name;&#125; b[101];int f(int n, int m) &#123;//计算日期    int tot = 0;    for (int i = 1; i &lt; n; i++) &#123;        tot += month[i];    &#125;    tot += m;    return tot;&#125;int main() &#123;    int n, m, flag = 0;    string name, tmp = &quot;&quot;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i].name &gt;&gt; a[i].state;    &#125;    cin &gt;&gt; m;    for (int i = 0; i &lt; m; i++) &#123;        scanf(&quot;%d-%d&quot;, &amp;b[i].MM, &amp;b[i].DD);        cin &gt;&gt; b[i].name;        b[i].tot = f(b[i].MM, b[i].DD);//统一    &#125;    int MM, DD, tot;    scanf(&quot;%d-%d&quot;, &amp;MM, &amp;DD);    tot = f(MM, DD);//同上    for (int i = m - 1; i &gt;= 0; i--) &#123;        if (tot - b[i].tot &lt;= 14) &#123;            if (tmp.find(b[i].name) != string::npos) &#123;//查找                goto END;//goto大法            &#125; else &#123;                tmp += b[i].name;//记录            &#125;            cout &lt;&lt; b[i].name;            for (int j = 0; j &lt; n; j++) &#123;                if (a[j].name == b[i].name) &#123;                    cout &lt;&lt; &#39;(&#39; &lt;&lt; a[j].state &lt;&lt; &#39;)&#39;;                    if (a[j].state == &#39;M&#39;) flag = 1;                    if (a[j].state == &#39;H&#39;) flag = 2;                &#125;            &#125;            cout &lt;&lt; &#39;,&#39;;        &#125;        END:;    &#125;    if (flag == 1) cout &lt;&lt; &quot;Yellow&quot; &lt;&lt; endl;    else if (flag == 2) cout &lt;&lt; &quot;Red&quot; &lt;&lt; endl;    else cout &lt;&lt; &quot;Green&quot; &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-行程码-题解/">https://ren-yc.github.io/2021/08/07/LG-行程码-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 之吃牛肉 - 题解</title>
      <link href="/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="来自验题人的致歉"><a href="#来自验题人的致歉" class="headerlink" title="来自验题人的致歉"></a>来自验题人的致歉</h3><p>本题验题人太<strong>垃圾</strong>了，没有注意到题意矛盾，导致标程出错，而样例过于简单，无法查出部分错误。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题太淼了，但我做的时候因为玩过 MC，觉得吃饱指的是不能再吃，差半个饱食度也能吃的那种。</p><p>这题就是字符串匹配。</p><p><strong><code>if</code> 出奇迹</strong></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(1)$</p><p>要点：</p><p>$tot$ 要转换成整型再 $\div$ $3$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, m, cnt = 0;    double tot = 0;    bool flag = false;    string s;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; s &gt;&gt; m;        for (int j = 0; j &lt; m; j++) &#123;            if (s == &quot;stone&quot;) &#123;                tot += 0.1;            &#125;            if (s == &quot;coal&quot;) &#123;                tot += 0.5;            &#125;            if (s == &quot;iron&quot;) &#123;                tot += 1;            &#125;            if (s == &quot;gold&quot;) &#123;                tot += 1.5;            &#125;            if (s == &quot;diamond&quot;) &#123;                tot += 1.75;            &#125;            if (s == &quot;obsidian&quot;) &#123;                tot += 4;            &#125;            if (s == &quot;zombie&quot;) &#123;                tot += 0.5;                flag = true;            &#125;            if (s == &quot;skeleton&quot;) &#123;                tot += 1;                flag = true;            &#125;            if (s == &quot;creeper&quot;) &#123;                tot += 2;                flag = true;            &#125;            if (flag == true || 20 - tot &lt; 6) &#123;                cnt += floor(tot / 3);                tot -= floor(tot / 3) * 3;                flag = false;            &#125;        &#125;    &#125;    cout &lt;&lt; cnt &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-MC-之吃牛肉-题解/">https://ren-yc.github.io/2021/08/06/LG-MC-之吃牛肉-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 公交车站 - 题解</title>
      <link href="/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>题面很长，总体来说，这道题就是让你来判断每个乘客的区间中是否有车停靠。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>本题要点：</p><p>要定义结构体，结构体中要有总时间如 <code>TOT</code></p><p>输入的时候记得用 <code>scanf()</code>，这个函数可以无视中间的 <code>:</code></p><p><code>scanf()</code> 的参数是指针类型</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct NODE &#123;    int HH, MM, TOT;&#125; a[1001], s[10001], t[10001];int main() &#123;    int n, m, tmp, d[1001] = &#123;0&#125;;    cin &gt;&gt; n &gt;&gt; m;    tmp = n;    for (int i = 0; i &lt; n; i++) &#123;        scanf(&quot;%d:%d %d&quot;, &amp;a[i].HH, &amp;a[i].MM, &amp;d[i]);//输入记得带格式        a[i].TOT = a[i].HH * 60 + a[i].MM;    &#125;    for (int i = 0; i &lt; m; i++) &#123;        scanf(&quot;%d:%d %d:%d&quot;, &amp;s[i].HH, &amp;s[i].MM, &amp;t[i].HH, &amp;t[i].MM);//同上        s[i].TOT = s[i].HH * 60 + s[i].MM;        t[i].TOT = t[i].HH * 60 + t[i].MM;        for (int j = 0; j &lt; n; j++) &#123;            if (s[i].TOT &lt;= a[j].TOT &amp;&amp; t[i].TOT &gt;= a[j].TOT &amp;&amp; d[j] != 0) &#123;                cout &lt;&lt; a[j].TOT - s[i].TOT &lt;&lt; endl;                d[j]--;                goto END;            &#125; else if (tmp != 1) &#123;//敲黑板                tmp--;            &#125; else &#123;                cout &lt;&lt; &quot;Leave&quot; &lt;&lt; endl;                tmp = n;//记得重置                goto END;//goto跳转到结尾，也可以用break            &#125;        &#125;        END:;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-公交车站-题解/">https://ren-yc.github.io/2021/08/06/LG-公交车站-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Hands - 题解</title>
      <link href="/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题看上去很难，但分析后就可以一个循环解决。</p><p>每次取牌如果有一个连续的大于 $0$ 的数列，那就全部取出，取到其中的某一个数等于 $0$。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>边输入边累加，记住当 $x - last &lt; 0$ 时，就不要累加。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int ans = 0, n, x, last;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; x;        ans += max(0, x - last);        last = x;    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/LG-Hands-题解/">https://ren-yc.github.io/2021/08/05/LG-Hands-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』WFR - 如何使用 Warfarin</title>
      <link href="/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/"/>
      <url>/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Warfarin 是一个由 C++ 编写而成的解释型语言。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>[x] 变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>[x] 函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>[x] 键盘与文件的 I/O 操作；</p></li><li><p>[x] <code>if for while</code> 语句；</p></li><li><p>[x] 大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>[x] 点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>[x] 编译成特定格式的 <code>.ff0</code> 文件，支持 <code>import</code>；</p></li><li><p>[x] 支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>[x] 支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>[x] 支持 DLL 文件调用。</p></li><li><p>[x] <strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>[x] 全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md">这里</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Warfarin 目前最新版本：<strong>3.62</strong></p><h3 id="下载-amp-配置"><a href="#下载-amp-配置" class="headerlink" title="下载 &amp; 配置"></a>下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-amp-运行"><a href="#编译-amp-运行" class="headerlink" title="编译 &amp; 运行"></a>编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>[x] 直接运行 <code>Warfarin.exe</code></p></li><li><p>[x] 编译运行 <code>.wfr</code> 源文件（请看下文）</p></li></ul><p>Warfarin 的源文件扩展名一般为 <code>.wfr</code>，</p><p>使用 <code>Warfarin.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code>，</p><p>此命令会编译出一个 <code>.ff0</code> 文件，相当于 C++ 的 <code>.exe</code> 文件，<del>但不能双击运行</del>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip">本站下载链接</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件</a></p><h3 id="发布帖"><a href="#发布帖" class="headerlink" title="发布帖"></a>发布帖</h3><p><a href="https://www.luogu.com.cn/discuss/show/349241">V3.62</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/">https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warfarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 买二送一 - 题解</title>
      <link href="/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><blockquote><p>凡是顾客购买两本书，就可以免费带走第三本书，只要免费书的价格不超过两本付费书各自的价格即可。</p></blockquote><p>可以使用排序来做。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>排序，建议偷懒使用 <code>sort</code> 函数，<strong>But</strong> 是降序排序，所以要写炒鸡简单的 <code>cmp()</code> 函数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, a[100001], ans = 0;bool cmp(int x, int y) &#123;    return x &gt; y;&#125;int main() &#123;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1, cmp);    for (int i = 1; i &lt;= n; i += 3) &#123;        ans += a[i] + a[i + 1];    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/">https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 方舱医院 - 题解</title>
      <link href="/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="e521163a2f64f6e2c1f778891da6574dcc7ecc4d59d3d0acda2426fe85070151">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa25e1ee344652a1004e20dfe5d41cee5a34e2b85cad6c1fc9498c3f2c0928e49db9d0ad62c1a0eff4f2065ce51917ef05122fcd485b94d404e7cf65f9b328b63d604f4085e56ae2b170dcea8f00453aeb682e17a5e831026dbcb108c402d385528958c8380d124ee292a7aff063c716f109911a3e0016b6b018a608bc8f9d244e498dddcd1cfc18a1d3676a041dd76382f95ae991104a2e220d7a3150cec51e1286d99c39cce39c79799e7bc539cd4d09a5fb8ebd3e27b2a8bd398585392dcd35b681a5667cfaa684afa0be13407a527f526ff2f985a7fdefbf2d713f4cf44e62d27119855a9ce2d2d795dfde2462903b6fb99abe20a067cc60840ffc39a50237abae282d09a1f18142ea1438d2a8661cbeae050f47028c234c4be562cf0e4fc401f949a5ce0abba9ac07e12291182cf8715613d1a086243f7fd0d11c059abb505038cebc803397e6e5be4310d6c757b87bc6c4fa18b77e8bdcbc4cfff243698dbb05432ee61153f8c8794970431053be8a1b812c287311e6e3ddbd95435f4693aab8985e3b4846b5062a76b08126f71a503ced12b6e7ee776e5e0c5dc8123c3e6538c59651ac266d7a854d4efced72d337c7b37d2f2d8d300757fe5b17477437c7de899412b8e7f9e3847c9ed5b3efd6828b0c3e79be7bc0fff571747b855e9010faa0b37de5befedafac027d7456246622d075af7d386a1c5c9da20bb7394e66d127625952fcfe2615ae22a58be7166240235c0eae6ef936171eea1579594cb36fba8fb5a939075bd0187e1dc39db7aaedf89f9db6971592f4bc725150eb0666c186abf1e6cf4f8b1fbdb7108b39781ef557b3cbae27c2e9aac3aeae552d8d672167c1b21df7b0477d6623b0a6ae1656bc7be536a5d1ebf4432424c76a1a019f083647e1c00de2871b87eb0d449068db4851b7bec1ca431202ce9839f9397202dabdc32d6d1cf7e2583fdebd3293e98ab021be4d005f30882788c3f677acc6a2e4d5bff5cad7afdf0433107a4c04cb266eabe853cec26f153d53fff01724d9044479c44c7638f5b1d75278050513ea3b1939930d9c92059dc40fd8ef0d75b65d54c64dd421716ac0b8be58d895b109c5bf357bde2d7e4b1b21ad74d4a1f72f6d368f387c7ef1ff581bca6f5dad0a8429c4c77f7e344b089782ea19394684b0f2703a54f114c5476dad683b07758eb5dc9a3e74085711420aaf98e66a8f0e027a66310a3050a3afa0149ce4fcaba079e5604a168151dd0b2602ab6268ab293aa460d1afd007f43e3e3814819ca2b795cfc897d962e0ed2111e32a29d5d3fc44e9fec80556973bb2495ca2580ee953b31958d05dee6cc37cae3ef686a72333395fb78744032fcf2f8a5b2044fbf01ef8700bf09300fd109d2e3d7860c7c98d1d9aa89ac1f50aae76181ab04474a93b3c51702f0dade7d34a56828db53e10db265edb68c70898963495f2da6683e4475ab4533549085c76104b6bf046b576ae1293dd33411eda0565150a5370fc888e3212eb03d57de07824c84c6a04bf76099a6e988d5e8dcdf41a4c1edf20f8b3d31690b3843a473be2b656b936c5d6ad6a9927f75626e307cd861935bc14799485512b820a82f18ab540287b6ad9e0a990d152521a6b7db3d7c04c93589feb0a96bfc624830379f2b862b30d59271c9e1366757fed71e1fc648eca6575efc66d2ed0b8d730f46cc7f9faac880a051f0f4767cb240a01b8d7fe2fa4edc57485c15089f7dc68d9ea08d28f3ac5287ed44834786409f453e02983914b1444d1892134245b49994a2dad768091cfded8a3ebdcc2df90bbd1bb8445317abf9a95d27785c53418328cba18ec8113ebde78d4a3a4b75</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 开关灯 - 题解</title>
      <link href="/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>一个循环搞定。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>一个嵌套循环 + 检查灯的状态的循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, x, y, a[10001] = &#123;0&#125;, sum = 0;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; x &gt;&gt; y;        for (int j = x; j &lt;= y; j++) &#123;            if (a[j] == 1) &#123;                a[j] = 0;            &#125; else &#123;                a[j] = 1;            &#125;        &#125;    &#125;    for (int i = 1; i &lt;= 10000; i++) &#123;        if (a[i] == 1) &#123;            sum++;        &#125;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-开关灯-题解/">https://ren-yc.github.io/2021/07/26/LG-开关灯-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 古老的 A + B - 题解</title>
      <link href="/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="a8c651de31c697c97fa37e21678892b0850c0028649ef743febaa541b86d2690">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa1a1f33dbbb3da5893f718675cadba88f6207fc02a49da4fa43c68eb0e5c9c6bfada136e0b00650f3ddab8c959b532cf3194e7f52cf7ee7f0223709e6c350ed48c444380d84d453e61b631eaed824aecacd164d5d15e5e051930d31ff4c914475f3a6bac6bd2c674d4ae17c328e1a2f488ff11a2e976ebb98454232d0232bcfc89b2e428cfc4070da3de4bf853983a0df99b17c71006e0fc65f932ea6d0269216e85ebc0f62ff7929f19a5b29de0d5c797a8ce87bc960fcbd5fe97033650182e7a71e4504a450df2efc7466e87492ae48a5ba6f361e473aa7338ccbc1e7895ad6e6229d636a331195939687865b7c20635a9e8d8d919febae1c0640c2bdf8d0218993ad9eac116b35e9e41be5aaf4d2b988539bbda54cb99da712b526b9b9d4c9c02538586ca11edc66a29ac50b2d3fa336ea46679f82953a9959fb3cad410da43f2cf743799dc50c9c1c46f7f583559f3596cb9523249a844dd5c2563459411998a853e596584525ab040f441798aeb8bd57585c14526da8463e2f682fbafb13615d855ee463be182440c55cda8b7239a5e887701168d367548e6c8b180584ddcedbf4ad253719cb80de17a3e2a7d764b976271e1e4db91048baa31592d41ef0ed2b5e895fa7390f032eeef7551be6dd184cebb34ffefc5c6be016e0cce76e24ce9341c22da6e71d3d6db71cec30dddfbb22366540e683a0dc41fde4a6dbf889c6b315920670c56a3e414c4a150abc1365e7bff86803ef4b022e044bcb4a882234a60a472d38cacd26d1d8d4ed56c50fc22a8a348a24dce43db650c2b29e836caf09221784aab0a79daf8788c11e0de555bf884fc9c25acb34d5811d89d8e4de601266a84400a973c1f783943f262c3de842b844af23a35226ac8cbab518548930e353436caf046283e09574ed1d894397f99601752fe69965ac620a399b53fc380cd3ca96157bff4f505ee16f6bff8958486c528f012dd9e664fd69bcd4b053da7b04d33685930ae3ec145fb883f7669e6f17c5b6cc7aeb00634bf8eead1fcf77012de4ed86f42abf23839dcf4e4853b1f23aecd8041f9f400497441aeb858db1a564e58dd8114a8a492260f592eaea46c7057fee7ad03327fb8dab7b8da877599cc77ea3af44023ce0cf5b86eef1a8e8a464f46924776814c5d2117c60a8c240268dba502ba75c322fca7ec4176d90aaad89e3f5d4456e7315213b80fd1d050963a395997559c87dfbbe6f4df79375fa70951a6bbc29fbbbfdc7aa2c773f282bd9bfbbcab4878df738b09266c0d8dc67bd0e292aafbc46e39413d052926cf2addf17047557ae2f0c8d758646113ea4d97b17de6477941c719f12366c003efa08fd18302467d7058cf59b8b0f75bef8f7125001856b6d8786dd587498c4cf0a5da3f0f0f2cb6d19b6f95c95310c4e0683b267ce90ffe6f2c557c71f9d614e8eb6e7a73d284a92f97c08dde458b16646b5b1e727c5a949afdd747b09c8baac994543059e45ef0398fb5ed822de1faf3c24aeda50d7566326ba0c07d9a3f62a75423d55af939c407825bdb07060e819a678d0723f9567678589ec2a94ef56b733058af1574f498b4dd41fc625266b27615745a22457f1ecc7878954fd68e6438afe5a97a4750844c63f339524d892f3732036102c8c3587a6f21a586a85f8a9fb6324dc7ad5f4db935c54d8910756a90ccdbfa22bd81817efa3c9d867de8388a2551885ff4f556bb20ead1da98b5f1591df45036815834094d8c6ad192494ca98bf7f7525cd21c639a92722255ce5d790c25667127c285e03f9806653498740730832bd2f90b3b99572c98e70e162f784801ffac402c2420f9f6dfa1cccce6b22cfb7924b25c2c03201148f2f3ad3bea7df1c186a773e18a9f95f36e12fc8bc3d24c8f05dffbc9d5653dbab9e256fb0a3d1dec69d91efd42ff1cfa96e930277f57a53a9b99825d058e3fb9ce429e8ffafbd62d5b319f117191614321823f6238cc6741248726f550fdc5c50954d855df6c363e21eedc49956ba012f7563822b11554e3be28818cf4677434ddb29b93d08da1e0d5d7b18a697b1cc980f7b0a08cc0077fd8d52740b69e92e38ea42e95062686428aa892f39a783b5fbc426a5f01abcc8c3be2c297883705ab64c0da3d2d6473e89a257a8abe966770dd21901aaa6d52512c6957ebab64f31fb180b5ec49efe344702dbcc9f3f4733800904a5be974840e5b457183bb8f7fcd7e9037a187c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 排序 - 题解</title>
      <link href="/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡淼的 C++ <code>if</code> 语句题（?）。</p><p>太淼了就不解释了</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>全读入完来个函数判断就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[6], b[6], cnt1, cnt2, tot1, tot2;int mysort() &#123;    if (cnt1 &gt; cnt2) &#123;        return 1;    &#125; else if (cnt1 == cnt2) &#123;        if (tot1 &gt; tot2) &#123;            return 1;        &#125; else if (tot1 &lt; tot2) &#123;            return 2;        &#125; else &#123;            return 0;        &#125;    &#125; else &#123;        return 2;    &#125;&#125;int main() &#123;    for (int i = 0; i &lt; 6; i++) &#123;        cin &gt;&gt; a[i];        cnt1 += a[i];        if (a[i] == 50) tot1++;    &#125;    for (int i = 0; i &lt; 6; i++) &#123;        cin &gt;&gt; b[i];        cnt2 += b[i];        if (b[i] == 50) tot2++;    &#125;    cout &lt;&lt; mysort() &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-排序-题解/">https://ren-yc.github.io/2021/07/26/LG-排序-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 生小虫子 - 题解</title>
      <link href="/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就在检验 <code>for()</code> 循环的应用。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>读入一切信息后，</p><p>写一个循环 $z$ 次的 <code>for</code> 循环，如果满足条件 <code>k == x</code>，小虫子数量增加，反之 <code>s1 = 0</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int k = 0, x, y, z;    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;    int s1 = 0, s2 = 0, cc = 1, cl = 0;    for (int i = 1; i &lt;= z; i++) &#123;        k++;        cl += cc;        cc = s2;        s2 = s1;        if (k == x) &#123;            s1 = cl * y;            k = 0;        &#125; else &#123;            s1 = 0;        &#125;    &#125;    cout &lt;&lt; cc + cl &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/">https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 合成大西瓜 - 题解</title>
      <link href="/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道 C++ 枚举题，只要遍历 $b$ 数组就 $ok$ 了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$，$b_x = b_x + 1$;</p><p>遍历 $b$ 数组。</p><p>倒着遍历，一旦发现有符合条件的数，直接输出并结束程序。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, b[201];int main() &#123;    int x;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; x;        b[x]++;    &#125;    for (int i = 0; i &lt; n; i++) &#123;        b[i + 1] += b[i] / 2;    &#125;    for (int i = n - 1; i &gt;= 0; i--) &#123;        if (b[i] != 0) &#123;            cout &lt;&lt; i + 1 &lt;&lt; endl;            break;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/">https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 救援争先 - 题解</title>
      <link href="/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡不淼的 C++ 结构体排序题，我卡 <code>cmp</code> 了好久。</p><p>就俩循环读入 &amp; 输出，<code>sort()</code>，还有<strong>万恶</strong>的 <code>cmp</code>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i . sh, a_i . sm, a_i . dh, a_i . dm$;</p><p>使用 <code>sort()</code> 结构体排序;</p><p>循环输出排序后的 $a_i$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct Node &#123;    int sh, sm, st, dh, dm, et, id;&#125; a[1001];bool cmp(Node a, Node b) &#123;    return a.et &lt; b.et || a.et == b.et &amp;&amp; a.st &lt; b.st || a.et == b.et &amp;&amp; a.st == b.st &amp;&amp; a.id &lt; b.id;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        scanf(&quot;%d:%d %d:%d&quot;, &amp;a[i].sh, &amp;a[i].sm, &amp;a[i].dh, &amp;a[i].dm);        a[i].st = a[i].sh * 60 + a[i].sm;        a[i].et = a[i].st + a[i].dh * 60 + a[i].dm;        a[i].id = i + 1;    &#125;    sort(a, a + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; a[i].id &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/">https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之武魂融合技 - 题解</title>
      <link href="/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡淼的 C++ 模拟题，也不卡 <code>long long</code>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$ 和 $y$。</p><p><strong>一边输入一边计算，速度快</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, x, y, z;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; x &gt;&gt; y;        z = (x + y) * 2;        cout &lt;&lt; z &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/">https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 前 n 个偶数位回文数之和 - 题解</title>
      <link href="/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>这道题目就不淼了，变成沝了。</del></p><p>写几个函数就不行了。</p><p><del>真 简 单</del></p><p><del>250lht：呜呜呜这是比赛赛题，我保龄。</del></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入 $n$，写个循环判断从 $1$ 起的每一个数，如果满足函数 <code>weishu</code> 和函数 <code>huiwen</code>，则加到计数器。</p><p>这时有人就会问了，<code>huiwen</code> 函数中的 <code>_itoa_s()</code> 是神马东西，请看<a href="https://blog.csdn.net/smcrystal/article/details/71191335?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base">这里</a>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool huiwen(int g) &#123;    int i, j;    char b[1001];    _itoa_s(g, b, 10);    for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><p>以上代码交到洛谷上会 <strong><a href="https://www.luogu.com.cn/record/54096300">CE</a></strong>，你谷居然无法使用 <code>stdlib.h</code> 的 <code>_itoa_s()</code> ???</p><p><strong>偷懒失败</strong>，只好自己写转换函数。</p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;    int i = 0, k, n;    char temp;    if (m &lt; 0) &#123;        s[i] = &#39;-&#39;;        m = -m;        i++;    &#125;    while (m &gt; 0) &#123;        n = m % 10;        m /= 10;        s[i] = n + &#39;0&#39;;        i++;    &#125;    s[i] = &#39;\0&#39;;    if (s[0] == &#39;-&#39;) k = 1;    else k = 0;    for (int j = k; j &lt; i / 2; j++) &#123;        temp = s[j];        s[j] = s[i - j - 1 + k];        s[i - j - 1 + k] = temp;    &#125;&#125;bool huiwen(int g) &#123;    int i, j;    char b[1001];    int_to_string(b, g);    for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/">https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之魂系辨认 - 题解</title>
      <link href="/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>@250lht 这道题目太淼了！</p><p>不多废话，这道题直接写一连串的 <code>if</code> 语句就行了。</p><blockquote><p><strong>P.S.由于 Windows 操作系统终端使用 GB2312，所以无法正确显示中文，但这不会影响洛谷评测结果</strong></p></blockquote><p>审题人真的良心，写了这个，不说的话我还以为我代码出 BUG 了呢。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入 $n$，循环读入 $a_i$，尽量<strong>一边读入一边输出</strong>，<strong>速度快</strong>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void judge(int n) &#123;    if (1 &lt;= n &amp;&amp; n &lt;= 4) cout &lt;&lt; &quot;魂土&quot;;    if (5 &lt;= n &amp;&amp; n &lt;= 14) cout &lt;&lt; &quot;魂师&quot;;    if (15 &lt;= n &amp;&amp; n &lt;= 34) cout &lt;&lt; &quot;大魂师&quot;;    if (35 &lt;= n &amp;&amp; n &lt;= 39) cout &lt;&lt; &quot;魂王&quot;;    if (40 &lt;= n &amp;&amp; n &lt;= 49) cout &lt;&lt; &quot;魂宗&quot;;    if (50 &lt;= n &amp;&amp; n &lt;= 54) cout &lt;&lt; &quot;魂尊&quot;;    if (55 &lt;= n &amp;&amp; n &lt;= 59) cout &lt;&lt; &quot;魂帝&quot;;    if (60 &lt;= n &amp;&amp; n &lt;= 69) cout &lt;&lt; &quot;赤炎斗罗&quot;;    if (70 &lt;= n &amp;&amp; n &lt;= 79) cout &lt;&lt; &quot;巅峰斗罗&quot;;    if (80 &lt;= n &amp;&amp; n &lt;= 89) cout &lt;&lt; &quot;封号斗罗&quot;;    if (90 &lt;= n &amp;&amp; n &lt;= 100) cout &lt;&lt; &quot;海神&quot;;    cout &lt;&lt; endl;&#125;int main() &#123;    int n, a[101] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];        judge(a[i]);    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/">https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 2 - 题解</title>
      <link href="/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题目应使用算法库函数 <del>当然自己手写也行</del> 和类型转换。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>先输入 $x$ 和 $y$，直接输出 $\lceil x \div y \rceil$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long a, b;    cin &gt;&gt; a &gt;&gt; b;    cout &lt;&lt; ceil((double)a / (double)b) &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/">https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - gcd 与 lcm - 题解</title>
      <link href="/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数。</p><p>（算法库里有 int 的：<code>__gcd</code>，不过本题卡 long long）</p><p><strong>注意本题数据范围 $10^{10}$，卡 long long</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;long long gcd(long long a, long long b) &#123;    if (a % b == 0) return b;    else return gcd(b, a % b);&#125;long long lcm(long long a, long long b) &#123;    return a * b / gcd(a, b);&#125;int main() &#123;    long long T, a, b;    string mode;    cin &gt;&gt; T;    while (T--) &#123;        cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;        if (mode == &quot;gcd&quot;) &#123;            cout &lt;&lt; gcd(a, b) &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; lcm(a, b) &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/">https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（2） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ <strong>结构体</strong>排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，$a$ 一样的按 $name_0$（字符串首） 的 ASCII 码<strong>从小到大</strong>排序，所以我们还要自己写 <code>cmp</code> 函数，来比较两结构体。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<del>偷懒</del>，写一个 <code>cmp</code>。</p><p><del>出题人 NB！！！不卡我们 long long 了</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct node &#123;    string name;    int a;&#125; wx[101];bool cmp(node a, node b) &#123;    if (a.a == b.a) &#123;        return a.name[0] &lt; b.name[0];    &#125;    return a.a &gt; b.a;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; wx[i].name &gt;&gt; wx[i].a;    &#125;    sort(wx, wx + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; wx[i].name &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/">https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（1） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ 排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，所以我们要自己写 <code>cmp</code> 函数，来判断升序。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<del>偷懒</del>，写一个 <code>cmp</code>。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(long long a, long long b) &#123;    return a &gt; b;&#125;int main() &#123;    int n;    int a[1001] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a, a + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/">https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 - 题解</title>
      <link href="/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ 语言入门题。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>直接输入正整数 $n$ 再输出 $n \times 10$。</p><p>或者输入字符串 $n$ 再输出 $n + ‘0’$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long（使用方法 2 可无视）</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long x;    cin &gt;&gt; x;    cout &lt;&lt; x * 10 &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/">https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/03/hello-world/"/>
      <url>/2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/06/03/hello-world/">https://ren-yc.github.io/2021/06/03/hello-world/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
