<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『题解』Luogu - CF1598A Computer Game</title>
      <link href="/2021/10/11/cf1598a-solution/"/>
      <url>/2021/10/11/cf1598a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1598A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1598/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目翻译">题目翻译</h3><p>给定两行字符串，求能否从左上角走到右下角（<code>0</code> 为可走，<code>1</code> 为不可走）。<strong><s>（超简洁翻译）</s></strong></p><h3 id="题目思路">题目思路</h3><p>我们可以读入完字符串后循环遍历，两两比较，如果有 $s1_i = s2_i$，说明无法通过，则 $flag = true$（也可以输出后直接 <code>continue</code>）。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁！using namespace std;int main() &#123;int t;cin &gt;&gt; t;while (t--) &#123;//几乎每道 CF 题都要int n;bool flag = false;string a, b;//不使用 char 数组（复杂、麻烦）cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;for (int i = 0; i &lt; n; i++) &#123;if (a[i] == '1' &amp;&amp; b[i] == '1') &#123;//两行都为 1flag = true;//发现&#125;&#125;if (flag == 0) &#123;//若未发现cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;&#125; else &#123;//否则cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf1598a">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120711294">CSDN 博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/10/11/cf1598a-solution/">https://ren-yc.github.io/2021/10/11/cf1598a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF44B Cola</title>
      <link href="/2021/10/06/cf44b-solution/"/>
      <url>/2021/10/06/cf44b-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF44B" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/44/B" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目思路">题目思路</h3><p>本题第一眼可以看出是一道暴力枚举，但是不能用三层 <code>for</code> 循环，$100%$ 超时。</p><p>所以我们可以先从 $2$ 升的可乐开始循环，通过前两个循环来推算出 $0.5$ 升可乐的数量。</p><p><strong>注意：本题的 $a$ 为 $0.5$ 而 $n$ 为整型，第一层循环要两个两个加</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//懒人专用using namespace std;int main() &#123;int n, a, b, c, ans = 0;cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;for (int i = 0; i &lt;= a; i += 2) &#123;//n 必须是整数，但 a 是 0.5 升，所以两个两个加for (int j = 0; j &lt;= c; j++) &#123;if (n - (i / 2 + j * 2) &lt;= b &amp;&amp; n - (i / 2 + j * 2) &gt;= 0) &#123;//算总量并判断是否小于等于 b 和 nans++;&#125;&#125;&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf44b">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120628543">CSDN 博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/10/06/cf44b-solution/">https://ren-yc.github.io/2021/10/06/cf44b-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『游记』CSP-J 2021 初赛</title>
      <link href="/2021/09/19/csp-j-2021-1/"/>
      <url>/2021/09/19/csp-j-2021-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="9319d817c64c98c676926931e9f72d5b5eaedbcd142a4e1393a1c23ba3c9e6a1">8fb749fda75eae689c3df2a2a950d5eee9f7994bff8040d01a9735e92fc2453e879dfe8825d3a3b2a8dc528c0fea74d7a14410bc52522380dc4808f946bcfd233046883f8ae03ed19376f9d69c241c79015048cf630effa0447df1cf6e25a4d1db19ad315fdaa9ceb3297d7b172d82a8ce816f7787d606345a5c9a98da2305eb33c4892ad79a9e8a760b3260a82c5d1b97c8184232b5aac08999316d260033e096128416d3367172f63bd3535e159521f8406b4dce674dca118a61c2b52d0decefb610d582b98edba0966177ba7ca4428ebcf65df69e6d3c229bde4a4fd2e6defcfe8bdccc89a91f6a9af5056bb574997707d9d932f3ccd9cce1d17d9c38a7ed797dac00b8511b140e326f09dcb0143a1759ea998db1c65c7adeb43861cf5100b79cf19232a87199adcedf79b677dafd75e37877969e51a2689fcaa07b8942ee8525a2f8dce593ec8ff6a56de6dfd84bae22fb59725491549f2575d326d323b4366cf67feec82ca20a2e1a8095ac9a0a3ea2d66d4ee0243ddf969637e7ee08dfe1cd6f3ae37e5628dd6e9e94ac116af8bd9e10e87a9026637f1114021781a185d57cf82de68059453b99af2b71ac871c668d365a3b366ea94daac6c95235cec4af6fde55cb82fec48ce8fa6870b2679182986014c0052b6e0bf59d72624d70fc408c2d40605fec4fd9d2ce4e587e273f3b13e3ef432da8d2a6a1fb534edf1e9916bb8d31825fa29ff33664e67178aea224261116e398d4f194eca9aabacee76f3a47580147b21f0c10c4192d1c2b403caf2f3c18b7699866e2ed488f6a4f8c056015cc50dae59902c0de01c0214a8c6e617782b270d37a6dcb90a61be884e3d88d57446b5d677e4de62f4d0d87615906bea4b27289db2d87a7093d5c49a60cc6aacee8fccf208b450b97c2334b15c46bfa113f6af6e62a0117c75d5ff7b03edffa1b67a0f580b4ec769b8e4623a344e9bee2f6ad9bb6eba708937ae2eaffa037f1854b19d321b63451cfdc27b0e55f819aebf17b7384ac2d0b7868ed4f09319308832d2be8de80a837bd3319f408a7f02ace1449f5d39e320cb2c5acfd49a13a17032990560b50e63d9825fcd3a922c0ddd930ac9bdc0223a313744ae78eda066168401b9085b4b92d3407804bae3f07ded9bbb32a2acd8a673bd3c2d15e441e3016b16b6ed33f3445be354f9e709fef159f2183961e16636a920bc0c0cd56869fe85d5070f7ef0bcc66cd6d943c49289d6df11edf310f7132b77c224fd74fd18dbdb062036cb369cd82b7c4f7267989ecfb1bb0dd5107c41745b3bb2aae9d542388997cf697290a198b443d015a305d82e482f7d8f525e04374fd9a9aed04d0cff50fbf4a1051151e4279d60f22034409ccdea1702de5df50efa1c62b654a742b8b61cdb87960d76d014792cad0bee761ef1b66f9af33644c537d38950d1583f8db295c40334267743f348f9fdd8c5aad9c65a273a28ac2519b045de384914c6e9bd500c28f512a0ee9acbfa914a017a5e0c0227bde3f446b475a76bcf28a10efe1a8dc14b2a19d70a292550a587c87211a4de4cd2021e11117966fcebfb883873b4c6cf50565edaf5a2c250d87c628e1026019c96d6f20aace7e4bb611ec0c81a491abf7f2ef195cf1dbf409d0378b13176a0de41eea71bc11de395e80b08177bb3236d909a873a6a9567a9cba8f9214899dbd1825eef5a728edee75b59d0b94ce3637d2229adf00f43822481e9c716e6c1aaeecadeee199a1fe8b49a3d304a0172020f2ac6197a6fcb0a5301971abff3561e0ca08dfe7847ee151cf5b41aa90f211c7b23a48ba7744e2ebf85645b986f188a1717af139e896e8f7b808c3c66bdfe631279998a5a0719507d6a98148404653aac7bb8b80ca8575b918baf8f9706ac84047e8f218dce66efbc0b4df6918fc2c09578b01ba35aca768b27871289422700c97d8ae0adb6f357fdacfe9d75d4b6ad86f8b5a2b642f15d50155a7a732740a0e4cfbc2b131f7e677412cae1515a715a0bf9fba68389664fda82c3488b5343a981a97c321567641ebd3238be476b461b50ced1fdc3db6dfd3989e2b098e2d113fb538bc87191f2d198771eeab9f7773f2bb6daecbf8fe358f421190758011dbdc557cfe3720c23d76be79ab23423d0f4dc037770f0cf686f7b22f3e92e1fcfe918549d7e4539f0082f77523120e71ffd1f5ac6dfc3d482d01fab5027bf853d80a8e2281c14d01f5d9ea16a46585f169a4a15e7b5a33bc611a9f4e51903a83260355d1c05e18efe0ddb38288605dc816f722fa277bf3a5c886f14b9b8b4afc2f07d4cf74a7d05e7ef4d0e56c615d21c38a215c885fd97e1a57652abb54ea0da5b17d48f9f7de9e31ea9d4b2cc07cbf0456ddd7d220b77d74f538d2b22480b0c088f47aaa0811dc703573c58510b6461ff20e3da7f9dc3f3ac8d86c1c93e05c3391efcca9f8327f06590ba03efaf9a711d3ea9532b3c2db37669a8a6e09412a6c5090b96c18819b0347ae110a43d11ca505ec92fab6293e52ff8e185680cb4d0f437565fbe3741b564d7b0850d0ea53861fc07923b2d6b0e6ef3795c38b15012a6940e49cd3e9c9496946762b9bd06037c5cfcdd4ee5e130085456d06edb9226b4294783a859a863bdb3c73042ea293bcc6a1be33c4ec3d5330a1e6cf21a658e2f8aea07c5c5bea68c3a4091f334f5a34e1911e1ff6abb2f86d2a39612ee31d622c4157e1b3204f4134bdf169faced7dfd5de32c6a70b554d42684540edb69903f0277833b8a9b5ed86c8612b702a0f2633d5b98d2a294f1214c1ff2471122c7f470993b8939877bf333ab57d9bbc20634c12584a9ffb0a4871d84de06c1aa4e97a4dd27d0aa354ececf80081a1c6a959075f983078d5be9e02bbe50528364717f450848c08d59e28e4797ffd83c3672494fae41345e567f5613351d31796db0e1ff02eec46de505be7389319284e49a89e3b94775a686154f50ae04d6c0109967c0eb63dddaed4da10d01c56929f327fdac3565ebe07212c6149653b95072c0e593bf706265d99d6ba2a7ea0124190e92929bd099893192b091572a42ebfc8c87f9950d79a5667af5fb5d1252741e29bd9e446a236114a7ee5f2ffd4c2e9079003aeece2d6ccbc4622d338e9f30e0562a8211240a3911e6123f38d6e431d46c902277bb045f71a2bf6b631ef0f73db9ff4e2f2fd9d880e4e6b56025a5b5f170eae972080018186cb96d5f4547ccd24914f490463a8e7922f418eb834de71514696e494fbf703c552cb6c043ad88bcd6eec19bc64c40f6e570104d34cbd2327ab5e126e51fe526570fdc382e24ad17bc0756502819e73633a7f958efdffd7f5ca688befa5dcfb1f2c14968c2bd100ad07c08013e2f4470a433b423a02e9b65d983b0c9d23a027e650907c4efb69e373dd6a51b2f39a30242defccf8fd7dc7d403e2ccdd314428a554864563051e65080112b11c8286924de4e23e30c8ea7dbb89f1cd4e8c826a38c6676d2ef914450787680f0604ddd902ab4fc9070b6820cd57882f56ea66bc39422b777f6ecbd0c8f47bac31bac685bf45ea004d05d205ebd9798f761501a748c2a8fdaf3a9c39451ee10346121a72fea89c4642752a7d05919efcaf99eb540275674d42a17753a932ba56a1ff60dee9a5ae2725f2d0d6dc7c136d451c0aa03129d5c9f92f64299e951513b5595654e9dad105376c040b04feb4ddde621c211544b02878bf32598ad14607e43d57c1cbabb49a07eb2cb7a296e77f017d16f84a40995e80d3b11df62c2168d92f0a90fedc4ec047d62e622191f92404803968edb128ac5799e8a0efbc16df28f23a39afdeb07827cdb801c6d158d80e9e3e4cbfce2729fda378cd4b251b0e9c26331170ad081ce49f2b632c2d1756c2708c7dee399a860f0cd4b0eef3feab4623080275840ba1ee8e1f50837b7f616b34609c07c49754a5763509c29b856162550556a4abac5023035823e9ba7d5e77fb39c8e797c167886a87742bdfa000521f4f92f321156f08b5d8719f1c8717ecd009ce205a46b407069f9291d3b0a39a88752f2a06c4ae3b4b80f73390dff689f4e9612cf20d6c176b19d8d472169bb1176ccf68813778c80aef3135d84a748a08d854cb3b7bdc5c55f4f1d62e780589ebb05401ac3a1214eb7b48240410a68e630f61b18dfba6177410472ce43a65ce196c8cd4370ca405e28a540e22a9a5ca09cf5af4021c03dfbd3485760a261491f3dfdf96f80ee8f0b6e86afbb3bec155a880c80c2c94564b6b45b663345e23b8168223a39ebb982cf361ec0ce228a843885995cf1300735a34cc535c430058c5806ce3ebbf096cf793383e2ff49f4d8cc83d1f230f7c7fb35c5310ff0f26393f320a68d2bb65d52c8169e43314fa1c27e4edfc4c4f1a3ee4e668ed0298f55cd9135da5514fa7fdd808b633613fb1cded7747c167f5d7a727714e85a4a8cb575ff30d6de2a410fec037ec17121f783371df6090b5715c2a3766cf2287800f1c43dfb7ed5100cb232fc834e7d2b11362ae937111d663af3a549cb6b449bb4e4449e3b99a151f011a5d7afe5576cd156f5be39acf4be99ae42dea936d5b7989311e8999ada7068d951b8601eb0d636f11f362937718f40d8b964f1f18a8e1abf67df8c83cd1e1362129f2b3aa9fa3ef9b1346769f6fc8228a995bb7b46c94323a8483709fb1ad428f5f532a18038dc31367a56a1b182f728858b35d898d694939284bcf5ede9efc524eb016115a0a66551210d943f4dc57a0b997613a173c213ac6ff6400ca09f5f37f4b07e07fe88ead6b001f266b034c589f95cad11e28989e57eb0baffc72c2091f9e89a701bc6a07ffe5f581dcd522a7b128f7f99cef57b1c4243ac90eb619acc509e03cbab9c5167885053efb82be387c07028a20a31eabcdfd22f4614b47270cab3b6b59420443ef6b704c0421179cf69b990b4fd578a07c7828006ca188ed1d99b1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> NOI Series </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11559 Event Planning</title>
      <link href="/2021/09/14/uva11559-solution/"/>
      <url>/2021/09/14/uva11559-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11559" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=27&amp;page=show_problem&amp;problem=2595" title="点击跳转至 UVA">UVA</a></p><h3 id="题目翻译">题目翻译</h3><p>作为一次短途旅行的组织者，你需要根据参与人数、预算、酒店及其周末空余床位的情况，决定是否成行。其中旅游人数 $N$，预算 $B$，可供考虑的酒店数量 $H$，可选择的出行周末 $W$。其中 $H$ 确定之后，会输入 $H$ 组数据，每两行为一组，第一行表示该酒店的人均住店费用 $p$，第二行表示 $W$ 个周末对应每个周末该酒店的床位空余情况 $a$。</p><h3 id="题目解析">题目解析</h3><p>本题很明显就能看出是一道模拟题。</p><p>只需要在输入的时候顺便计算一下是否超预算。如果有，则顺便记录下是否是更低的预算即可。如果都超预算，那么输出 <code>stay home</code>，否则就输出记录的那个更低的预算。</p><p><strong>一般 UVA 的题读入行数是不给定的，所以我们要使用</strong> <code>while (cin &gt;&gt; n)</code> <strong>或者</strong> <code>while (~scanf(&quot;%d&quot;, &amp;n))</code><strong>。</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁using namespace std;int main() &#123;int N, B, H, W, p, a, Min = INT_MAX;//Min 根据个人喜好设置较大数while (cin &gt;&gt; N &gt;&gt; B &gt;&gt; H &gt;&gt; W) &#123;//如果是 scanf 可以加上 != EOFfor (int i = 0; i &lt; H; i++) &#123;cin &gt;&gt; p;for (int j = 0; j &lt; W; j++) &#123;cin &gt;&gt; a;if (a &gt;= N) Min = min(Min, p * N);//读入时求最小值&#125;&#125;if (Min &lt;= B) &#123;cout &lt;&lt; Min &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; &quot;stay home&quot; &lt;&lt; endl;&#125;Min = INT_MAX;//根据个人喜好&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11559">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120657641">CSDN 博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/09/14/uva11559-solution/">https://ren-yc.github.io/2021/09/14/uva11559-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA13012 Identifying tea</title>
      <link href="/2021/08/23/uva13012-solution/"/>
      <url>/2021/08/23/uva13012-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析">题目解析</h3><p><s>太淼了</s>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int t, a, b, c, d, e;while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）int ans = 0;//计数器if (a == t) ans++;//判断if (b == t) ans++;//同上if (c == t) ans++;//同上if (d == t) ans++;//同上if (e == t) ans++;//同上（草）cout &lt;&lt; ans &lt;&lt; endl;&#125;return 0;//完结撒花&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/23/uva13012-solution/">https://ren-yc.github.io/2021/08/23/uva13012-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『教程』如何使（po）用（jie） IDM</title>
      <link href="/2021/08/12/how-to-use-idm/"/>
      <url>/2021/08/12/how-to-use-idm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言">前言</h3><p><s>众所周知</s>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><s><em>我很严肃</em>：</s></p><p><s><em>IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</em></s></p><h3 id="下载">下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装">安装</h3><p>运行下载的 <code>.exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解">破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 安装目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p><strong>方法同上</strong>。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” – “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://xn--9zr.tk/gx" alt=""></p><p>$$END$$</p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/12/how-to-use-idm/">https://ren-yc.github.io/2021/08/12/how-to-use-idm/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』『教程』WFR &amp; RBQ - 如何使用 Warfarin &amp; RBQScript</title>
      <link href="/2021/08/05/how-to-use-wfr-and-rbq/"/>
      <url>/2021/08/05/how-to-use-wfr-and-rbq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md" title="点击跳转至 github.com">帮助文档 &amp; Wiki</a></p><p>Warfarin 是一个由 C++ 编写而成的<strong>解释型</strong>语言。</p><p>RBQScript 是一个由 C++ 编写而成的<strong>编译型</strong>语言。</p><h3 id="特点">特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> / <code>.rbq</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md" title="点击跳转至 Github">这里（Warfarin）</a> 或 <a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md" title="点击跳转至 Github">这里（RBQScript）</a></p><h2 id="使用">使用</h2><p>Warfarin 目前最新版本：<strong>4.01</strong>（已停止更新，变更为 RBQScript 继续更新）</p><p>RBQScript 目前最新版本：<strong>4.12</strong></p><h3 id="下载-配置">下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin（RBQScript） C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-运行">编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code> / <code>fvm.exe</code></p></li><li><p>编译运行 <code>.wfr</code> / <code>.rbq</code> 源文件（请看下文）</p></li></ul><p>Warfarin（RBQScript） 的源文件扩展名一般为 <code>.wfr</code> / <code>.rbq</code>，</p><p>使用 <code>Warfarin.exe</code> / <code>fvm.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code> / <code>fvm -i 文件名 -cr/crj/crjp (-o 文件名.rbq)</code>，</p><p>此命令会编译出一个 <code>.ff0</code> / <code>.rbq</code> 字节码文件，相当于 C++ 的 <code>.exe</code> 文件，<s>但不能双击运行</s>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接">相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip" title="点击下载">本站下载链接（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script" title="点击跳转至 github.com">作者 GitHub 仓库（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/rbqscript" title="点击跳转至 github.com">作者 GitHub 仓库（RBQScript）</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt" title="点击跳转至 raw.githubusercontent.com">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin" title="点击跳转至 VSCode 插件商店">VSCode 插件（仅支持基础语言设置，咕咕）</a></p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/05/how-to-use-wfr-and-rbq/">https://ren-yc.github.io/2021/08/05/how-to-use-wfr-and-rbq/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages - Warfarin &amp; RBQScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U187148 gcd 与 lcm</title>
      <link href="/2021/07/23/u187148-solution/"/>
      <url>/2021/07/23/u187148-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息">题目信息</h3><h3 id="题目描述">题目描述</h3><p>小 T 想编一个程序，<s>可是又想不出来怎么编</s>，请聪明的你来帮帮他。</p><p>这个程序可以用来计算两个数的最大公约数或最小公倍数。</p><h3 id="输入格式">输入格式</h3><p>第 $1$ 行输入一个正整数 $T$；</p><p>第 $2$ 到 $T + 1$ 行输入字符串 <code>gcd</code> 或 <code>lcm</code>，以及两个正整数 $a$ 和 $b$。</p><h3 id="输出格式">输出格式</h3><p>输出 $T$ 行结果。</p><h3 id="输入输出样例">输入输出样例</h3><h4 id="输入-1">输入 #1</h4><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>2gcd 1 1lcm 10 15</code></pre><h4 id="输出-1">输出 #1</h4><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>130</code></pre><h4 id="输入-2">输入 #2</h4><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>5lcm 6 8gcd 2 10lcm 5 7gcd 1000 500lcm 10000000000 1</code></pre><h4 id="输出-2">输出 #2</h4><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>24235500100000000000</code></pre><h3 id="提示说明">提示说明</h3><p><strong>本题采用捆绑测试</strong></p><p>对于 $100%$ 的数据：</p><p>$1 \le T \le 10^9$</p><table><thead><tr><th style="text-align:left">Subtask</th><th style="text-align:left">分值</th><th style="text-align:left">$a, b$</th></tr></thead><tbody><tr><td style="text-align:left">$1$</td><td style="text-align:left">$1$</td><td style="text-align:left">$= 1$</td></tr><tr><td style="text-align:left">$2$</td><td style="text-align:left">$9$</td><td style="text-align:left">$\le 10^2$</td></tr><tr><td style="text-align:left">$3$</td><td style="text-align:left">$20$</td><td style="text-align:left">$\le 10^5$</td></tr><tr><td style="text-align:left">$4$</td><td style="text-align:left">$30$</td><td style="text-align:left">$\le 10^9$</td></tr><tr><td style="text-align:left">$5$</td><td style="text-align:left">$40$</td><td style="text-align:left">$\le 10^{18}$</td></tr></tbody></table><p>Idea：任宇宸，Solution：任宇宸，Code：任宇宸，Data：任宇宸</p><h3 id="题目难度">题目难度</h3><p>$\textcolor{orange}{普及-}$</p><h3 id="题目地址（可能变更）">题目地址（可能变更）</h3><p><a href="https://www.luogu.com.cn/problem/U187148">https://www.luogu.com.cn/problem/U187148</a></p><h3 id="题目解析">题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><p><strong>由于 $a, b \le 10^{18}$，最坏 <code>lcm</code> 结果 $a \times b$，所以要使用 <code>unsigned long long</code></strong></p><h3 id="代码分析">代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数（或者<s>你不要脸的话</s>直接调用 <code>algorithm</code> 中的 <code>__gcd</code>）。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;unsigned long long gcd(long long a, long long b) &#123;if (a % b == 0) return (unsigned long long)b;else return gcd(b, a % b);&#125;unsigned long long lcm(long long a, long long b) &#123;return (unsigned long long)a * (unsigned long long)b / gcd(a, b);&#125;int main() &#123;long long T, a, b;string mode;cin &gt;&gt; T;while (T--) &#123;cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;if (mode == &quot;gcd&quot;) &#123;cout &lt;&lt; gcd(a, b) &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; lcm(a, b) &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者: ren-yc<br>本文链接:  <a href="https://ren-yc.github.io/2021/07/23/u187148-solution/">https://ren-yc.github.io/2021/07/23/u187148-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
