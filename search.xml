<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LG - 爱数学的 ac 做因式分解（弱化版） - 题解</title>
      <link href="/2021/08/28/LG-%E7%88%B1%E6%95%B0%E5%AD%A6%E7%9A%84-ac-%E5%81%9A%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/28/LG-%E7%88%B1%E6%95%B0%E5%AD%A6%E7%9A%84-ac-%E5%81%9A%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题目十分的<strong>水</strong>，所以直接放代码（bushi</p><p>这道题其实就是简简单单的暴力</p><p>没错，就是暴力</p><p>对于这个二次三项式 来说：<br>我们只要满足两个整数 $x,y$ 满足两个条件：</p><ul><li>xy=cc</li><li>x+y=bb</li></ul><p>由于 $aa$ $=$ $1$，所以不用管<br>所以放置函数 $find_ans$</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>见注释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include&lt;bits/stdc++.h&gt;using namespace std;void find_ans(int c,int b)&#123;    one=-1e9-1;two=-1e9-1;    for(int i=1;i&lt;=sqrt(**abs(c)**);i++)&#123; // abs(c) 十分之重要，因为若c&lt;0，则会报错        if(**abs(c)**%i==0)&#123;  // i是abs(c)的一个因数            one=i;two=abs(c)/i; //x，y即可求出            if(c&gt;0)&#123;  // 分类 ： 1.若c为正数，即one，two为同正负                if(one+two==b)&#123; // 同为正数                    return;                &#125;                if(0-one-two==b)&#123; //同为负数                    one=-one;                    two=-two;                    return;                &#125;            &#125;            if(c&lt;0)&#123; // 2.若为负数                if(one-two==b)&#123; //x正，y负                    two=-two;                    return;                &#125;                if(two-one==b)&#123; //x负，y正                    one=-one;                    return;                &#125;            &#125;            one=-1e9-1;two=-1e9-1; // 可以运行到此，代表上面均不满足，即为现在的x，y是不能满足的，还原初始值        &#125;    &#125;    if(c==0)one=0,two=b; // 重点：数据范围中cc可以为0，那么必能因式分解，所以特例    return;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        int aa,bb,cc;        cin&gt;&gt;aa&gt;&gt;bb&gt;&gt;cc;        find_ans(cc,bb);        if(one==-1e9-1)&#123;            cout&lt;&lt;&quot;This is a wrong question&quot;&lt;&lt;endl;        &#125;else&#123;            cout&lt;&lt;max(one,two)&lt;&lt;&quot; &quot;&lt;&lt;min(one,two)&lt;&lt;endl;        &#125;    &#125;    return 0;&#125;</code></pre><p>不做过多解释了，是不是很水呀？</p><script type="math/tex; mode=display">END</script><p><strong>本文作者 氢氧根离子的AC</strong></p><p><strong>请无视下列内容</strong></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/28/LG-爱数学的-ac-做因式分解（弱化版）-题解/">https://ren-yc.github.io/2021/08/28/LG-爱数学的-ac-做因式分解（弱化版）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 FTQ</title>
      <link href="/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/"/>
      <url>/2021/08/26/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-FTQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在管理员账户下的 Windows 10 中有效</strong></p><p><strong>本文章可能包含敏感内容，请谨慎阅读</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>标题中的 FTQ 全称是 fotiaoqiang（佛跳墙，<del>即一种名菜</del>）。</p><p>那么个软件的用途是什么呢，在 OI 界，这个软件是我们众所周知的 <strong>VPN</strong>。</p><p>用了这个软件，就可以访问类似 谷歌、推特、油管 的网站了。<img src="https://图.tk/5" alt=""></p><p><del>以下纯属扯淡</del>：</p><p><del>你听过佛跳墙吗？只有1%的人答得上来！大家都知道，佛跳墙最近很火，究竟是为什么很火呢？佛跳墙到底是什么梗？相信大家对佛跳墙都很熟悉，佛跳墙就是我们每天都会经常遇到的，但是佛跳墙是怎么回事呢？今天小编就带大家来看看究竟是怎么一回事。佛跳墙最近很火，其实就是因为佛跳墙在网上火了起来。大家可能会感到很惊讶，佛跳墙为什么是这样的？佛跳墙究竟为什么火起来了呢？但事实就是这样，小编也感到非常惊讶。以上就是小编为大家带来的的关于佛跳墙是什么意思，佛跳墙是什么梗的内容。关于佛跳墙大家还有什么想说的吗？欢迎在评论区留言哦</del>~</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://六x8888点com/#由于敏感请转换中文">官网</a></p><p><a href="https://ren-yc.github.io/assets/FTQ/fotiaoqiang-2.7.6-1.zip">本站下载（不保证最新）</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行。</p><p>启动时由于需要设置代理，所以需要管理员权限。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>双击桌面上 $/$ 单击开始菜单上 的 fotiaoqiang，提示需要管理员权限，点击 “是”，然后在默认浏览器里会自动打开一个类似 <code>http://localhost:端口号/一些字符/connect</code> 的新标签页：</p><p><img src="https://ren-yc.github.io/assets/FTQ/final.PNG" alt=""></p><p>点击 “点击连接”，就可以愉快地使用 VPN 辣！！1<img src="https://啧.tk/gx" alt=""></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/26/TLS-如何使用-FTQ/">https://ren-yc.github.io/2021/08/26/TLS-如何使用-FTQ/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』LG - UVA13012 Identifying tea</title>
      <link href="/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/"/>
      <url>/2021/08/23/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLG-UVA13012-Identifying-tea/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>太淼了</del>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int t, a, b, c, d, e;    while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）        int ans = 0;//计数器        if (a == t) ans++;//判断        if (b == t) ans++;//同上        if (c == t) ans++;//同上        if (d == t) ans++;//同上        if (e == t) ans++;//同上（草）        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    return 0;//完结撒花&#125;</code></pre><script type="math/tex; mode=display">END</script><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/23/『题解』LG-UVA13012-Identifying-tea/">https://ren-yc.github.io/2021/08/23/『题解』LG-UVA13012-Identifying-tea/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 愚公移山 - 题解</title>
      <link href="/2021/08/23/LG-%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/23/LG-%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="5055026742fc07e2161d951e33b4b74cac6328aeea094b66d2cec01ef09058b7">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fab47da3d2cbc343606effdc5e83a9076fe300ebe1f212d271f71b54d0a98b12ae348716bc3b987079f27f9fb257dc0f2aae5f473e9b7ea00a29a51f004910c1ded84e84c5a8ed63294f292becba77410bb680bf95c1b785a366350ee5dee4c0414df4bf29bd780be85f4921040f1db1fb10b27ea2c0540dde4596a825d388b6082854271bc38aaa637ef774cbbb02826ef21c6e951bb10a044dfff8f329f18e6f5ba12de2117581012d99de6eb10431721ec4104baf8f78589622713f25d85732c743ef51cfa4702bed536b538009765914c90dbcddb3437772e758a98ecad2c55e63d63cfd6308ffdfdf40843c82f56339bd6f977d797d850c3f18d08a5d9db2304a117c28e1ee5a95f86af4d26ea82a290d7e41148157ad2f693f630ae0bc0df3df98458bb019f4ebb7ec3ec7792b2e03aae84ed86bdf315817ff2a6958aced90ce9c28e35a6b6ba1b2e53e4760ff1a57dc07d936ddf8b6ad0f6fd6aab6925a39d0341e600ca333a14a34e8dd145b299557787a4e872d34078679b1c41767f03ac7c8fd27d0a97718a9739eb6bbcab13645861ad5585a471447756f638e0733672026e54807e32ae75df0f7b754d90a45430d8b0670184f026c2731f1065cee30a91720d237bf831320f0c2af7018349c04befac7ba3495dcd60a5761a0e03d6b0e6d52d340e7f57b60e3971196798a6bf11196fe1eaf8dd3d84052306b1f61cc6575b58386ec130116f66a5331121c8a23cebd148ae7c7aa92666c80a1487b07745ac9468701e7f126cbb6928670682cb9a2f59dfdbd0dab2fc122dfe2b441f41c886c744ce8a5f79065f31152a7a2346e6eba29fc114b6e6d9bd4cdde86205100e1e264205392170acfcabdb2bf813a72105a7dae10517e9e057feff345bb5b30005f7786a6586017921ade2a1633b4f9fdfbbc4c27a1f361002246643568e67edd4e1a6cbc448a65e4046f11fd88221e7ac71e9c467eeb7dda54f3c28dbd604b122358b6cde6e83b1cb764b3d3f15ab8c87373c04e4e7662e554141a1afbada4db3569b91962d95b87ddce81d45ef5180ac69ff99c7e39173b6447ca261e3618722c2d42ff24028bd3665f8753495a9833954ba1b6b8750f5db56616a55ae1b1ead8b625f8bf1692ab5dd4e67fffaefebe251443d4c49a370b3e6dc71b91f27396e9967963bbce1cccf8582b53317bc0f47021099d85e94b22ab573038663096b3b7b5d4b44608039ebf651026a716b1125e3edaf2b490d2ae3ce3b35a1dce1df498c1b80c61d5e467efbe72aa9c9ff9e18180409b3ce83e9d9898754c58d5af8f53f134ce40a6279045e258012191ee40e6f90342fbe90e53d6815e08aee608d5769ac45f407522308ba8948e40a83c802573741d1db5ee2265a1b72ebe718d79f5573673ba23ef2afca9834348b329471062c56cc9ed00559f12b7e74cd69f649539c7fd422a97b8bd4e47d2a6f3bbe723ef760bde734ce04b831646cc8b5d8776e5c40b41f38e755ca988d2a0d037d30a854e89e7d1bc722980cbd8d25807755805451633feb7d3381e7cdb93ade9fe84fd96d3d26cde920e339548253b028af91625293e92595b42a8084ce2e5cbf2b9ad47a193e5bcd375f212732c9e69df009c2375c31234453d2ed09ae690fa44058741014f645386447ce9a590ded0527304b54e0587417474f9c8726eea59c6892c108b08cd72af441b242a649dbc46313dcee03771c1ee82e78e8229600021f4e886ab452dd4d7efa29fe899a16b31c083de27cb76033865ab45d9de400ea4da1d53c368aec6ed771a6ac0c7d911e05830472636991ae6d1837ede49fbbc355635b63100f0f403d7f86811f733d21dd5bd8b44f182455bef83871b2845e42d4731c975970385f99f04b3992100c7545ccd8dcffc00ef4a193db732420be127fe9f92ddb468dd7042699348e6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 听取 WA 声一片 - 题解</title>
      <link href="/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-%E5%90%AC%E5%8F%96-WA-%E5%A3%B0%E4%B8%80%E7%89%87-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="c3c971dd567e0a44e0b7bf28d6474cb634b32765a5499196fa65fdfc17057da9">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7faad92f0980626553485086a88b78cc785371726fa874a3efaed4d8e08931ab2b7fd2f501d9d60f5c074c4adcc76a96e66d3e82b9aec748794b64f67f815b0cc12c6a2d628eef7f5448f2d1bc86c3a9d5c4fc483344b77a5aab0387a0f393da522279145158867155ca33a46b9d5782b8856d73320ab7290b2f3f1762a2874626a69df475b373e314f9bbbd1f740006235213207f09aecacca57ba161363b0f7edcecfa37e116b1414b0c6d9473ba503f6cb6dac2df4a988bf14b6813fe2e8857836547e94274fe90689d1df3086fc6fdbebfd095c5611a5f31492993f1ea455fe0a1d3c9cb1e12280a6a9e7385a71d592857ca10e2805d2fd421ae1f41733b041b530c79af873eb22771dc4f13452f461123601b2a179d637d911dd260a696409d25ec062d2d12976ca99c35ff73fd59bb758166c2bf6d1d75f373b9af8b047abc4f82c528137fff9718249b5a487f0c0a9d128bcf2d2415697bb87a268c97118c8c5848333638c0b0edd5e0c348c785038d35e7830a8c8bad6ffa08387e24b38324d5c8bcf216c3361b5bf97044232a8a8086b37c5d8e9a1853010d44c1efefb6f939b53f22dc439f84a416689c85533fed7c2b565d62d26d0d37dfeae820683de98976f91ef94b69977e9e74e778de492c71ae6710fc80c2763453d068b64eba8c55ed90385ac7d3fafa78504c9ce25b4b4ae55a42022404a01b950a347642a8bd30a3e19d0c4fdbc686922011117451b90978c0c7e8e8623b46ccab9f8a1d2296765e1e71325f6cb02c2757e19e3c102fa2dc86c2ccecbdb1fae537775ea9f66e90137b93290c2d1f0b47bca0f19b21f661901241d4851a9700cab7b7e8462ea3ee98b44c3359fb3a456178f387a04516d52e2ee94ed45948f0da41a1428cc494b0657a7325da6b47ff133b518a03a804a6298c70aa4d072abb6685a3841be7dcceeb6b4528d7e60aed92c27b9076023c1d19a0b0ccf8fb46443534df3778d13b8a2c3187614bf0e525b2f9991ff68c91c68cb5ae41547c78e84308a11f3c3e76cb6750056456b63ee8c49f0a44bda8bb5d66814168c25a5dbaddb70404b4a24cc4e975041555501d651b9238f4a18692949cfbefbd7df96094bdd9956e13e9153dd15e083720ec3fade8452ea4567d3d34ff8ce3f2569d775b57d3d70cc183479d33ba7ae3d0f10f16664858ca80b1be88ce6ab4040256aa73b3b36145544795edff268d113451e10b48f447b93db3bda09d05248bec741395b43796009cac3336fbe4fce07976e099414eb8e4adbaed98563fb0fe4892b6ad22f7eb3a904636af0c913fb20c2275e0a5b96d4e4cd5df11980947812f167d124f8b44c54eb5d975e362f346ee9b55cc9cca0cf9137a22ea80be8eb0ad63d1743de4808e13c0ea3c22e417eb8c4c5aa2e16a9aa8b3edbf3ae225594954c4e11f6cbdb85b576b8fb4f7b9f6f83f0a274a160ffc188ff1bd5d06bc9477e0932e84ce0ffcb33cf99853df594324669fa111f49bae84c5ae19d2b698b8503e2ba15ca2a0af4a51ca7476670bd401b3f60e3c87de0b7bbc6c5f826a619ae97994c81d5f46e21c36dc3e280a369f571e1942b8da92b0d9ebaab6f3c46f880dad4a0634bdabb1632be368d4dd0a3433ef870d623920eef097c930235c9b78815eb0826534722f08e2b83a246db9fffdfd9a859eed78d7db1877e331fa2771de4eeff6bf13a19444872caf710594042854e05b2d4133347aaf1abd24f7bef0143e28a68b553ffb39d9701f29311d9265b2359047607ffa4117899e22b00d9b55704c576700adbcc26a2d5e84d7cff6b4c05d30fb779baadc42a97c711ef358ab3cb0474849ebdd466d5d9fc71f7cbb8b986e4293f61708ed6aeb773e8b7d24cd6984dc09c37a6dd781d290e267483723880a847a3c98f2a809126271eb9072e3580319e817730425f0c64eca137d92e1971e6322de28c616b7d921e77f146071754cb1d59e23525a509fcb8b3a7f2706d3f1d8aa0054d0d23cbfccd51dfd534677c9b8b3a426dcf020c999dcdbeceb7b7e448a238368899dc6b6541215f50452d8b4f0cb45bfda73b1cd98134023bf06480f137cb8dddb5a42d6d65c419133a3e5acf2a79174191ebb3298767d3c0356393353190ca3e3133261b1b0757cc510ae6ed1f0a4649cc1d29e90faa37c01471c639090ce73b6548cb8fe26de5c0eaa065188de80c7c361cf5d782d5335cb9491218ac74dfb6477df570524017212444b22b1ba8dd2e747a2309ebe09885b7e8d2827f49250f369d71290732b1c54888025b069b5a6bdd70f77cc6785e3eeef90ef750746cf88aaa0bc1e8cc4b813cc9d447aec0c49e69674235cd315b168ec2792b68af5ec08819d4c0ddcfdbd29bc2a8f5516c8104d91e925fda8be84656c70ab65e2eba34c9e9ba4f9c33138399f3240c9a595950d04ae3a3b9c6eb7d3111ca2d1baf53e68934661bb1ed59ea2f924ba49fe74eb118c99d5140cce4525b60efad3a544768adafbba788be48a2b8ad3aa35ce1b8bf807f68be13bc5f43cb53e7b36850f564bfe2186f96be626af80f1abcb331518bec6d4f3ee0ad6a7e02abd8b0ab52ba388b64b01e412022b2a34dee1469f3c1e9064b861aae0be9b64f3dbb04f7c891c959526e5b2013f1d1d8bc449a0dd1aaf6b4b0ac</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Killer Queen - 题解</title>
      <link href="/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/21/LG-Killer-Queen-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="4cecaa89a771b080a1ecea9b03f47019d146cc24afad77752a2c4b21ad59eb1a">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa1a2b814bb701ac1476ce49392963e30ae929fac76027f3f61242132ab9e4a167a83130805d2c94fc5711f90b497133fb9ed93998ab04f5eb74df1467c0cee32eabcf44a9088dbc4daa8e384c2e6c9a79dc3cf344c3096040693381db6fd87b1771ecf21e6f196d706d9d1fe4f860634ce2e1a58b477cbc36fff4da3334bdcd48743aca98023b7359da5c17cc93fe8074ba22f9c1569ca5016825188400b28c82b428423185bf4d8f0858ba9073f059a2f1c7b638a81b40318fde3537361df770a2008dadfc9f55e340d5307128737c8c067a4a4e3d6cd9d3c409bf02c9ed9f14ca51a73a8fe32a499db7dc411936970dbb0d102747f0d8246fdeae79acfcfa7f050895b15792c4f7277e660795e6f86997e9614cbb3594679dca7dcdda85ea052bd75ea7954518431e9fb1f0335529488b4a5cdf872f564971aa896d236b437225e0a740b0945c8e7917c653c05bfa1903fde0830a51625e497db199396e3b6ea8b7ce5e62dc35547d8b7a731f2cd0052936cb09861efa2b98dd7a0df3928f96e7d60ad28d6cfbe54dfffc231668d019702c2a0b867d01170a3a5d06f3cafc64b098fbe30e77412f0e75d6ea9602ff95091cf62452713011a44b0d105a93ba5987902e6a108d2942cb4716e8f3080562401cff64ac9ede952811fb3f9c069c20110976996c1dd40a7c342e7fd2281b72292f2fd2804cf560397ff79a59ee349bdedb60f2cfda194d0437b5dfa4f9204c2c6f155af731580ad820b27bb3e5743f25e50b196fc331cecfc80dfa26f32293e13e39a38446aaa8f2a11c5d569fa51dd81264000c88d272c774824185508cb12361e40cfcff09b5696b449c06073f19a1078a9e0d25ddf7a5462256108d11cc3402d140fa16d4cd72d26c756b093d4acf23d25db733de29a40d264723ff99bfdfd4d2cfaeaef3185f476e96b557d646009b084f798d884e1c46089c16bba0b8c2d0ef5c7d964ee4bf4ed859e1a357a32c8a4a3c1aee24d0bd9dbda29afdd0cb22a86c2adeb8491e7d5f701b3fb57d24556b61e77d48d9371112001793329309ff1007d4491adbaf6c6d1d0ca1ffa5c5a6acbc254cadaeddeb48aaf460ef602220db5167d416fd828ff048bb9761fed2cd063f1bd4fbe59d781167fbb7a145657937b51e9beb9eec6ec9b1d882c4ca664c08d6f10d323b7896ca8f9392dc2741881b5b15db0cc612d7b0c0d89ecc00f4e55e4e0cea9fc359cb6b6fc80f97dfa1da9484b5ba311cada957ccc04158ff55e2615d5acb2ef42941226a8cc9a64cd0e0ef4bcb170de57a6dcc0ce808e7226603b599ecc0794bf9641832489062ffee4dae62741ddc56d165d9d39e0ad60c3672dc7ee9df548ea377982e5eb53dc535903f586aff784fadbecbb5872a79a702cc126def30379346579412c9ee02b3ab9f9139571fd85a15ebd9b8efc61489ff6f57ce3f8a1b2c3fe9996799e8d84d7bba5640c9f2f6a82341dca5a14dc495528288cd3ff677fb12a7fdd172163cc48d508d50f45d24cdb7261708afda6069a27c5de2311042aef0463679ea88b8213256fc5ab342eca3725af4da8c45b7b9962ca26aed07161f1dc4be8243502d22f342719335226145598d11408f39662641c022551808a3187df6084a1acf818925db71a75d5d14f3997748a2787c1c50e305d845b8fa4e0aea085de2d29c487e6d24b21cb10d25caca22e0022b0830fbd61e808300aaddcb61d87e002d8419f469361bb22f5b6924224e05af48b8141c4249e5436c9519814ceb509f33bde0d24840919f34d6c8c21da33de463c81139d5cf595c0a65dc1fdeb1f319e1dea365b6ee4121941434fa4ccbaa1a9dcd18239b7490300d97ce9f79b1703053513dcf226ed17fcd4f420ca220b3104934490dfa8dce772f5f201c6c8d68b432003d5182895966476b9d52e74cd04c4924d5d62339922206a7948f5211cb60d1fb00eb292cea86d5ad1cf3dacc7c973715fbefe8a86c2f1098f64a31b38238275d2b23da5116059b5387aac90edf860727389f433ffe63b26f8dc417ffec9ec77588fbf96f71515752a9bf905e396b53c29f219d5519adef4d85c90d5735029440394991693ef02f64b4a6058ac74e237b7f6474abe91f0fac74922b19ca38e26fd8b77d2d856cd0452c87db74c7a21b6f2f97e09ec58cf1408f45e057c3d84e38a73bcf9f1a9a56fcb46f9978bc93f366f80590a0ae79fc4e1596be1b649df6a0b75ae706a7eed091f8da5e9d07a27e956bada7118b4cf7c3f6bda38b586f7cd614d0ca60cf3bfac1a950c5d754d4307b48ea6177e5102bf6296d07b300b0a4861667d9041cfa3b52857ec5096b169b4a658a5e0bc1c2daac8d29c80da458d44bb11af7fa27acdfb559b81287b6a9cee585b12812d6a5d49a4a448de55de5a28d26f70f61cb870c744fae0bbec8c54a93c90688b06f9a36b1c90496ed8c9096482df6b0a1393e15951aeed278da581c72fd35e63cd21767c5e74a6986d0bd522fa876160a82084269195167e8b21d99bff785b882b0327f97b36608a2fd6d5d06f402266ca63df50bfa90415550409224e838e9f3472e38d9093b3d9763f1ada313b3aa31f011fd999cda2e96b2af2877a550fd3d10dd1620e6d4237ac7dade42d0887fbea1e26d6e8957104a9afdf6ad97f8f5e4f46d71f6eb573db7a84dcd7a9e7200f071f97fcb9621e6df7290a7f0a33cc067863dc4403729415bb897761407029d851878429f2fe7fb25440c95b6a1b4242a5c48b7dc90b400c2b85b41bc9eaa699dcd820e8cf5f2afe77c2100566209ef169c6cb7480ce037e79dec8012d6d75a8c4f65fac46f3ed5650ac5e11e9a65ca4f8a803c104b24ed8e38c53c238980996d797c321229b68ccdd6776e11044fc48e2714b4a9f2d3bcfab51afecddef00919153b39577bdc32b51136730214cede2d5fc6b7d250c4665d571a11e2f88fb26440b1c6e824e762db45e148d3102237934d48ceda7f9ae9f3d94cd70498debc80ae66fab650dd4a8efed56767438f61cd2d9a3ee277e90a5161a9d7705fd5e5b50c16602cc9a7f3bbd2642c80b28c4bfd63180f5459020f48c558382e344270e459c8eb31134af07761f0a296bf73280080d1937e8993b0b74ae20dd4ee06b6a85bd91f5a1a37922aaef5a9e7dc402f312e8b5d089cdd8a2c8602c2eacae74df93535568c1babbad4e7048f65035209956170df8ed0cfd07f69046331c46c6c618b1c550ae4d67a4ce29eca9d1e7e8d93c771d152c5f9da05041f30ff943d72eb225ef2845c410c094636219603f1f38253ba9b91262fb289001211034b102495c1af54f1896be733cd9da302bdfb8fb9e9fa43599824720d47e680c0e0f983a8698ecbc346da56045c6282ff9e56c6d61c63ebd065a3ed06cd20559f0828e213735eb123936231e55d2c650a5a5f837001c50bf2c2b30f2dca9bd0820def38e99250693a9b82e1ae4fb365d2ad07da2b4ed05846cda0d120807808aa7b728f1de53c92fccb988101428cf96021cf92a258429abe1e960a1c6afedbc5b4c02a40d4bd0d8082293baded15f4f6d2bc4bbe4ca488164ddf50b933b0084429c632b237a8290061c58314aff3d9ba55f9b4ad51cd2504cc79f9f393077314719960bd8419afbe91599852ff3679f73e2e1f866a534525f3dc21303f75dd8f3c1a3640e4d925122c6398dfcf2acf1adcf7293781e1c48162005a2676261717f8ebad40565250ef7b77bb3e1d9cb21c4618fb807d978e7479b524228c39db8d4658887f07a8d104c91573f92ee9ad3893b9c47012e22c5a94a11238c34d35b1aabe2088dacfac0e1e04bc60fdae0606847704dacfcf87c9b9d1e75e859888970867d785f1eb350e6e8aeb3c760bf113f8dd1307ea5fd7d46a9a3b3a3461579cc02b89fe017d20e806abc5c024a3526ec589b65d97c00c4a9cd368731fc8a7781c64b1fa1ee8d12b4e07de3e83fd704d9ef6921db6521568ba310537aa103eedfafe3acb73822d0321a048c6a50ad2fddb4cf72b85623cf41b29f0176d081dd060696b5dd6a75cc493d43773b14f4719f3508c3319c8a6e83ce51f2614e7de965fb6c6c8feb66d810c88208725e77440181ee2f4a56c2b68ef7954030b78fc1814c8201d05da4654faefef4ad43ac67ad94899d9f2e342d02f50997b06a9216aea947127561631285989ed131cd7013f98fad7dba6659c9ebbe82517afbd091ac66a7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 李白的酒 - 题解</title>
      <link href="/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%9D%8E%E7%99%BD%E7%9A%84%E9%85%92-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="0693e25c9ae21a2fb753b9b013b821ee64141ea58ce2d1cd79ec24990a4c665d">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fabfdd31b03a909f2fd127b07f2c0c39b07f6567dc0f7f62746c8fbc03e5068c942417f5c9330c9c8ec67e7c74bc163e7b70a1b7cfcef47279be9ea1016ae4cc752b1b5cb2699471509dce9ae41f547b82f2611e448556b8ce1e14237f3d2881ffcdc01111d6d8418f53884a2d83d5fec3fe4078a53fe6f29ee654c29fb417d78e2ce6a9c17a7c06802fd1e2a08e97bb4e998392501280765a8d3de5458806b0c85c5c6669e8e6cf3bd83fa79060c188b8fb7cf06355404d5ba719e05ecb27bd616c306ce2c4b187b604e7aec70f639d288a137550ed1e390b582aafeeb8909d5cf89ab110d10d173138aa20cc3197455d1ec479e021299994f894e01cebfe68eccb0808a13ff586aa54597dc3889e003782b2c08e924916d9f43aa4301313e9312c0ceea48b0d40ceb2b42886cbb697639345cdfbcac67242b0abe5d5bc8ca37d73315e0ec82a1758bca4a9fded5598b107c034c73549ec93f7e4e012b77629d4196570229f2e49944cb7ad91938eb08021ea51a43d260c070dc280e4bb02e22ca449e1a2b12c2488218297cd8fa281757f48cdff7d1596568828c3a5257862290b0b1ca2dadcf3bba476c6d08bd748839a4174967ad5345368726a8c92fd555078e0d17bd38ee0bae48595c149b2724b4cf14865d41df08b61a7f6de795e8efaa6ed9ee84a556fda38e7e7ef956b1545a1fbfb62a0ecd5dc4abb2f659d264ddfef156cad751feea95bbb15742d2d5fb94b8d560b4d6afbf5e5a7d79b93fe60da2eeaa09d44e15fa660eaa0a3d9cfcf0ce4fbc48ed9425994f30eeea356e81edcbe748d23091c747adadd2367006616c22873f7236cf00cacb0048e6cd28a887c2707bc8f76ba7a4109fe6b6e5a20e6c4d2eef4136d100b243d1eed72d5e020288f80108ae5f60d0991a81118087bfee76e0df655fdcf966bac8bc4b95fe730cb02d81d6ab02fe7bdfad08da905f57d58d672ef97b30be7b6d31cd3a1cc2ce4635c9d084cf6069e7eeebd2580e9ba2559f08a04b0ff8b33038caad7438f2757deef7016c36263bca8df66317c5066efec10a8b2e3fb47d92d0c04145dc7484eb04800047542880037c26813f29f5063396a7d0ef77b4c5196cc168af62a5d82fce48f7d8529d1f761bd12e3207543d43d55ecfa0efad85f7e501f3b2683d16411c88ae7d142244c0a8fe95368a7655af157ed645df2a23fdcabd3735b4c929517a607df51629ae499e5198375e0d8056b9076eb0b81d0b730f50295f9cef54281af0c535be50c2ba018d03caa38de0d3f6b03cc98fb9327a39a793615f880f57875611031c3179fb7f97455df5a5972e128e3ae2fc759573d350067e8bf4be32ed951f4ba5ab4d848cea2dda867a8096c564b1e86e2c6f5fac90661f03ee9fddd717da23d40c62e1dcbfa65ff85baad2d493afc4e1b254a5395486cd7c5c4c47233e4915173d0e5d8d4bd91e6e3871ae5686e8dbc28647bbfaaa904f9cd51cdffbc3040d78a3bae350c2ba78fe7b6017819c1efb6e2e73c84d0ee20fd7aa5e80598213ced0d8b446161acd77399ed292916c78d4d4fc948a92c0416110f5095ee7ccce408becb0f2b19031aaf97bfd74de33350f5644f398434a5dd73df7d53d062f21ce035d12e6413ae4a268a2749e755eed8fedf1f3c0dda9d95f2112162eed6896cf680c956344524870eb46129512f8d2d8b396cdd9a19a5505b0e59de0737143ff1907b15b684e0c1dc333765b45460a48925b75662531f4e5c265de07f1e9f5e9b904144e3b8fb9e8388635fd30c7c4943f56fdbe7ee25289c1489c43e993a41e3a85a310872bcef22d755ceb7e1ffee047be9491f1339733cd1b1af792cc9ed9a86d6e3e959e2df224776f0ee1a73c4282378d48564223082fcb4a21718b5922cbb86fca9fce4af3498a3a96c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 满二叉树 - 题解</title>
      <link href="/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/14/LG-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>满二叉树板子题。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>三个 <code>for</code> 循环，</p><p>第一个用于计算节点的数量，</p><p>第二个用于初始化树数组，</p><p>第三个用于模拟。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int k, q, a[10001] = &#123;0&#125;, p = 1;    char s[101];    cin &gt;&gt; k &gt;&gt; q;    for (int i = 1; i &lt;= k; i++) &#123;        p *= 2;    &#125;    for (int i = 1; i &lt;= p - 1; i++) &#123;        a[i] = i;    &#125;    for (int i = 1; i &lt;= q; i++) &#123;        cin &gt;&gt; s;        int o = 1;        for (int j = 0; s[j] != &#39;\0&#39;; j++) &#123;            if (s[j] == &#39;L&#39;) &#123;                o *= 2;            &#125; else &#123;                o *= 2;                o++;            &#125;        &#125;        cout &lt;&lt; o &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/14/LG-满二叉树-题解/">https://ren-yc.github.io/2021/08/14/LG-满二叉树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS - 如何使用 IDM</title>
      <link href="/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/"/>
      <url>/2021/08/12/TLS-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-IDM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>众所周知</del>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><del>_我很严肃_：</del></p><p><del>_IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！_</del></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="https://ren-yc.github.io/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的 <code>exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 主目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p>方法同上。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” — “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://啧.tk/gx" alt=""></p><h6 id="若破解失败，记得在评论区留言告诉我小编哦"><a href="#若破解失败，记得在评论区留言告诉我小编哦" class="headerlink" title="若破解失败，记得在评论区留言告诉我小编哦"></a>若破解失败，记得在评论区留言告诉我<del>小编</del>哦</h6><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/12/TLS-如何使用-IDM/">https://ren-yc.github.io/2021/08/12/TLS-如何使用-IDM/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APPs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四篇关于 chen_zhe 的美文</title>
      <link href="/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/"/>
      <url>/2021/08/09/%E5%9B%9B%E7%AF%87%E5%85%B3%E4%BA%8E-chen-zhe-%E7%9A%84%E7%BE%8E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="壹-chen-zhe人"><a href="#壹-chen-zhe人" class="headerlink" title="壹 chen_zhe人"></a>壹 chen_zhe人</h2><p>那是谁 是谁 是谁</p><p>那就是 chen_zhe</p><p>chen_zhe 人 chen_zhe 人</p><p>背负着暴政之名</p><p>抛弃了一切（指民心）而战斗（指禁言）的男人</p><p>chen_zhe 代码是超音波（形容很会卡常）</p><p>chen_zhe 之眼（指管控 OIer）在洛谷飞翔</p><p>手里掌握着 恶魔之力</p><p>正义的英雄（</p><p>chen_zhe 人 chen_zhe 人</p><p>开始知道暴政的男人</p><p>因那紫名而觉醒的男人</p><p>chen_zhe 禁言是迫害之力</p><p>chen_zhe 之眼透视一切</p><p>chen_zhe 劈砍肋骨可断</p><p>手里掌握着 管理之力</p><p>正义的英雄</p><p>chen_zhe 人 chen_zhe 人</p><h2 id="贰-少年-chen-zhe"><a href="#贰-少年-chen-zhe" class="headerlink" title="贰 少年 chen_zhe"></a>贰 少年 chen_zhe</h2><p>明亮的机房中开着一台神秘的电脑，旁边是一个题库，都存着一望无际的 chen_zhe 做的神仙毒瘤题，其间有一个十二三岁的少年，血管里流着网络流，靠着一棵平衡树，向蒟蒻的 lhy930 尽力地踩去，lhy930 被爆踩了好久后却将身一扭，反从他的胯下跳进他家的内存池了。</p><p>这少年便是 chen_zhe。我被他爆踩时，也不过十多岁，离现在将有几年了；那时我还没开始学 OI，也很 LJ，我正是一个蒟蒻。那一年，我家是一件大比赛的值年。这比赛，说是三十多年才能轮到一回，所以很毒瘤；正月里做神仙毒瘤题，题目很多，数据很讲究，做的人也很多，数据也很要防偷去。我家只有一个忙月，忙不过来，他便对父亲说，可以叫他的儿子 chen_zhe 来出题配数据的。</p><p>我的父亲允许了；我也很高兴，因为我早听到 chen_zhe 这名字，而且知道他和我仿佛年纪，是个神犇巨佬，会做和出神仙毒瘤题，所以我们叫他巨佬。他是能 AK 所有比赛的。</p><p>我于是日日盼望新年，新年到，chen_zhe 也就到了。好容易到了年末，有一日，母亲告诉我，chen_zhe 来了，我便飞跑的去看。他正在机房里，红色的圆脸，头戴一顶小绿帽，看上去明显就是一个光头。他见人很喜欢嘲讽，唯独嘲讽我嘲讽得最过分，没有旁人的时候，来嘲讽我，于是不到半日，我便被爆踩了。</p><p>我们那时候不知道谈些什么，只记得 chen_zhe 很高兴，说是上洛谷之后，做了没有其他人会做的毒瘤题。</p><p>第二日，我便要他做题。他说：“这不能。须有神仙毒瘤题了才好。我们电脑上，有了题，我开出一块内存池来，用预处理所有的几亿个数据，打好表，看输入来了时，我立刻地将我预处理好的答案，只一输出，那正确答案 $0$ $ms$ 就输出来了。数据结构、字符串、图论、DP 什么的都是 LJ 玩意儿……”</p><p>我于是又很盼望有题。</p><p>chen_zhe 又对我说：“现在这些题太水了，你夏天到我们这里来。我们日里去网上虐人，lhy930 也有，kkk 也有，tourist 也有。晚上我和爹虐全场去，你也去。”</p><p>“要加文件输入输出吗？”</p><p>“不用。我的程序可是非常大佬的，可以自动判断要不要文件输入输出。要管的是卡时间、卡空间、卡算法。洛谷上面，你看，月赛开始了，我要 AK 了。你便写好膜拜之语，在犇犇里发出去……”</p><p>我那时并不知道这所谓月赛的是怎么一件东西——便是现在也没有知道——只是无端的觉得这肯定是神犇巨佬才能参加的比赛。</p><p>“比赛很水么？”</p><p>“有我呢。开始了，看见题了，我便 AK 了。这些题目很毒瘤，要用主席树，还要用模拟退火。但是对我来说都是不是一点的水……”</p><p>我素不知道天下有这许多新鲜事：竟然有比 A+B Problem 毒瘤的题目，而且竟然有人能够 <code>AC</code>，我先前单知道我连 A+B Problem 都过不了罢了。</p><p>“我们 CF 上，题目要来的时候，就有许多人喊着要 AK，但最后都被我给 Hack 掉了……”</p><p>阿！chen_zhe 的心里有无穷无尽的稀奇的算法，都是我往常的朋友所不知道的。他们不知道一些事，chen_zhe 在 AK 虐场时，他们都和我一样还在颓 A+B Problem。</p><p>可惜正月过去了，chen_zhe 须回家里去，我急得大哭，他也躲到厨房里，哭着不肯出门，但终于被他父亲带走了。他后来还托他的父亲带给我一堆神仙毒瘤题和它们的 <code>AC</code> 代码，我也曾送他一两道红题，但从此没有再见面。</p><h2 id="叁-chen-乙己"><a href="#叁-chen-乙己" class="headerlink" title="叁 chen 乙己"></a>叁 chen 乙己</h2><p>chen_zhe 一上洛谷，所有做题的人便都看着他笑，有的叫道，“chen_zhe，你门前又长出主席树了！”他不回答，对老师说，“开两台电脑，要一堆毒瘤题。”便排出一堆 <code>AC</code> 代码。他们又故意的高声嚷道，“你一定又 AK 了人家的比赛了！”chen_zhe 睁大眼睛说，“你怎么这样凭空污人蒟蒻……”“蒟蒻？什么蒟蒻？我前天亲眼见你虐了 lhy930，吊着打。”chen_zhe 便涨红了脸，额上的青筋条条绽出，争辩道，“AK 不能算 AK……AK！……巨佬的事，能算 AK 么？”接连便是难懂的话，什么“我是神犇”，什么“lhy930 是蒟蒻”之类，引得众人都哄笑起来：机房内外充满了快活的空气。</p><p>听人家背地里谈论，chen_zhe 原来也做 IOI 的题，但终于不屑于再做，又不会出这种对他来说特别水的题目；于是做的题愈做愈难，难到我一看就吓晕了。幸而做得所有题目，便替人家做水题，换一道神仙毒瘤题做。可惜他又有一样坏脾气，便是不屑于做。做不到几天，便连人和电脑程序代码，一齐失踪。如是几次，叫他做水题的人也没有了。chen_zhe 没有法，便免不了偶然做些 AK 神仙毒瘤比赛的事。但他在洛谷里，品行却比别人都好，就是从不拖欠；虽然间或不屑于做洛谷的题，暂时记在任务计划上，但不出一小时，定然全 A，从任务计划上拭去了这些题目的名字。</p><p>chen_zhe 做过几道神仙毒瘤题，涨红的脸色渐渐复了原，旁人便又问道，“chen_zhe，你当真能 AK IOI 么？”chen_zhe 看着问他的人，显出不屑、鄙视的神气。他们便接着说道，“你怎的连洛谷的题目也不刷光呢？”chen_zhe 立刻显出藐视嘲讽模样，脸上笼上了一层红色，嘴里说些话；这回可是全是“全是水题”之类，一些不懂了。在这时候，众人也都哄笑起来：机房内外充满了快活的空气。</p><p>在这些时候，我可以附和着笑，老师是决不责备的。而且老师见了 chen_zhe，也每每这样问他，引人发笑。chen_zhe 自己知道不能和他们谈天，便只好向蒟蒻说话。有一回对我说道，“你会做 A+B Problem 么？”我略略摇一摇头。他说，“不会做，……我便考你一考。洛谷的深蓝题，怎样做的？”我想，这么大佬的人，也能考我么？便回过脸去，不再理会。chen_zhe 等了许久，很恳切的说道，“不会做罢？……我教给你，记着！这些题应该记着。将来打我出的比赛的时候，做题要用。”我暗想我和他的等级还很远呢，而且我也从不敢打他出的神仙毒瘤比赛；又好笑，又不耐烦，懒懒的答他道，“谁要你教，不是只有你才会做的题目么？”chen_zhe 显出极不高兴的样子，将两个指头的长指甲敲着键盘，点头说，“错啦错啦！……这些题目都是超级水的红题，你知道么？”我愈不耐烦了，努着嘴走远。chen_zhe 刚打了一堆毒瘤算法以及宏函数，想在 IOI 官网上 AK，见我毫不热心，便又叹一口气，显出极惋惜的样子。</p><p>有几回，邻居 main 包和 ltt 听得笑声，也赶热闹，拦住了 chen_zhe。他便给他们神仙毒瘤题，一人几十道。他们做完题，仍然不散，眼睛都望着他的个人题库。chen_zhe 着了慌，退出题目将屏幕锁住，弯腰下去说道，“太简单了了，这都太简单了。”直起身又看一看题目，自己摇头说，“简单简单！难乎哉？不难也。”于是这一群神犇巨佬都在笑声里走散了。</p><p>chen_zhe 是这样的使人快活，可是没有他，别人也便这么过。</p><p>有一天，大约是 ACM World Final 后的两三天，正在慢慢的算 <code>AC</code> 题目，取下粉板，忽然说，“chen_zhe 长久没有打洛谷的题了。任务计划里还有十九道题呢！”我才也觉得他的确长久没有打我们的题了。一个蒟蒻的 lhy930 说道，“他怎么会打我们这些水题？……他打神仙毒瘤题去了。”老师说，“哦！”“他总仍旧是 AK。这一回，是自己太强，竟 AK 到 IOI 里去了。IOI 的神仙毒瘤题，AK 得的么？”“后来怎么样？”“怎么样？先拉他去了 ACM World Final 比赛现场，后来是做题，做了几分钟，就直接 AK 了。”“后来呢？”“后来他 <code>AC</code> 完所有的神仙毒瘤题了。”“刷完了怎样呢？”“怎样？……谁晓得？许是去出神仙毒瘤题然后自己 <code>AC</code> 了。”老师也不再问，仍然不住地感叹 chen_zhe 是历史上最强的神犇大佬。</p><h2 id="肆-chen-zhe-先生"><a href="#肆-chen-zhe-先生" class="headerlink" title="肆 chen_zhe 先生"></a>肆 chen_zhe 先生</h2><p>浙江也无非是这样。NOIP 爆 $0$ 的时节，望去确也象绯红的轻云，但 <code>WA</code> 下也缺不了成群结队的 “天朝 OIer” 的速成班，头顶上盘着大辫子，顶得绿帽的顶上高高耸起，形成一棵主席树。也有解散辫子，盘得平的，除下帽来，油光可鉴，宛如小蒟蒻的算法一般，还要将脖子扭几扭。实在标致极了。</p><p>天朝 OIer 会馆的门房里有几本《算法导论》买，有时还值得去一转；倘在上午，里面的几间洋房里倒也还可以坐坐的。但到傍晚，有一间的地板便常不免要咚咚咚地响得震天，兼以满房烟尘斗乱；问问精通时事的人，答道，“那是在学 DP。”</p><p>到别的地方去看看，如何呢？</p><p>我就往上海的 OI 专门机房去。从长沙出发，不久便到一处驿站，写道：新♂日♂暮♂里。不知怎地，我到现在还记得这名目。其次却只记得温州了，这是江南皮革厂的老板黄鹤王八蛋欠钱的地方。上海是一个强市，并不大；夏天热得利害；还没有浙江的 OIer。</p><p>大概是物以希为贵罢。北京的白菜运往浙江，便用红头绳系住菜根，倒挂在水果店头，尊为“胶菜”；福建野生着的芦荟，一到北京就请进温室，且美其名曰“龙舌兰”。我到上海也颇受了这样的优待，不但机房不收学费，几个教练还为我的食宿操心。我先是住在小黑屋旁边一个客店里的，初夏已经颇热，蚊子还多，后来用被盖了全身，用衣服包了头脸，只留两个鼻孔出气。在这呼吸不息的地方，蚊子竟无从插嘴，居然睡安稳了。饭食也不坏。但一位教练却以为这客店也包办棕名的饭食，我住在那里不相宜，几次三番，几次三番地说。我虽然觉得客店兼办棕名的饭食和我不相干，然而好意难却，也只得别寻相宜的住处了。于是搬到别一家，离小黑屋也很远，可惜每天总要喝难以下咽的蒟蒻汤。</p><p>从此就看见许多陌生的 dalao，听到许多新鲜的算法。数据结构是两个 dalao 分任的。最初是二叉树。其时进来的是一个白胖的 dalao，大饼脸，戴着眼镜，挟着一迭大大小小的书。一将书放在讲台上，便用了缓慢而很能嘲讽的声调，向学生介绍自己道：——</p><p>“我就是叫作 chen_zhe 的……。”</p><p>后面有几个人笑起来了。他接着便讲述 OI 在上海发达的历史，那些大大小小的书，便是从最初到现今关于这一门学问的著作。起初有几本是线装的；还有翻刻中国译本的，他们的翻译和研究新的医学，并不比浙江早。</p><p>那坐在后面发笑的是上次 % 你赛爆 $0$ 的留级学生，在机房已经一年，掌故颇为熟悉的了。他们便给新生讲演每个 dalao 的历史。这 chen_zhe dalao，据说是太强了，竟能 AK IOI、吊打集训队；他做的题，都是神仙毒瘤题，有一回参加 IOI，致使出题者的疑心他走后门，硬是叫他爆了 $0$。</p><p>他们的话大概是真的，我就亲见他有一次 AK IOI。</p><p>过了一星期，大约是星期六，他使助手来叫我了。到得机房，见他坐在树状数组和许多单独的线段树中间，——他其时正在研究着线段树，后来有一篇论文在本校的杂志上发表出来。</p><p>“我的代码，你能抄下来么？”他问。</p><p>“可以抄一点。”</p><p>“拿来我看！”</p><p>我交出所抄的代码去，他收下了，第二三天便还我，并且说，此后每一星期要送给他看一回。我拿下来打开看时，很吃了一惊，同时也感到一种不安和感激。原来我的代码已经从头到末，都在注释栏添改过了，不但增加了许多脱漏的地方，连语句的错误，也都一一订正。这样一直继续到教完了他所担任的功课：二叉树、线段树、主席树。</p><p>可惜我那时太不用功，有时也很任性。还记得有一回 chen_zhe dalao 将我叫到他的机房里去，翻出我那代码上的一条语句来，是递归的定义，指着，向我嘲讽的说道：——</p><p>“你看，你将这条语句移了一点位置了。——自然，这样一移，的确比较的快速些，然而代码不是竞速，题意是那么样的，我们没法改换它。现在我给你改好了，以后你要全照着PPT上那样的写。”</p><p>但是我还不服气，口头答应着，心里却想道：——</p><p>“代码还是我写的不错；至于实在的题意，我心里自然记得的。”</p><p>学年试验完毕之后，我便到 slay 颓了一夏天，秋初再回机房，成绩早已发表了，同学一百余人之中，我在中间，不过是没有爆 $0$。这回 chen_zhe dalao 所担任的功课，是 OI 实习和莫队。</p><p>OI 实习了大概一星期，他又叫我去了，很高兴地，仍用了极能嘲讽的声调对我说道：——</p><p>“我因为听说浙江 OIer 是很敬重 main 包的，所以很担心，怕你不肯次 main 包。现在总算放心了，没有这回事。”</p><p>但他也偶有使我很为难的时候。他听说蒟蒻是很菜的，但不知道详细，所以要问我怎么菜，菜到怎样的程度，还叹息道，“总要看一看才知道。究竟是怎么一回事呢？”</p><p>有一天，本级的学生会淦事到我寓里来了，要借我的代码看。我检出来交给他们，却只翻检了一通，并没有带走。但他们一走，洛谷就收到一封很长的私信，拆开看时，第一句是：——</p><p>“警告：刷屏者禁言”</p><p>这是《算法导论》上的句子罢，但经 kkksc03 新近引用过的。其时正值犇犇战争，k 老先生便写了一封给 chen_zhe 联盟和反 chen_zhe 大队的团队主的私信，开首便是这一句。文文新闻上很斥责他的不逊，爱咕青年也愤然，然而暗地里却早受了他的影响了。其次的话，大略是说上年 % 你赛的题目，是 chen_zhe dalao 代码上做了注释，我预先知道的，所以能有这样的成绩。末尾是匿名。</p><p>我这才回忆到前几天的一件事。因为要开同级会，淦事便在黑板上写广告，末一句是“请全数到会勿漏为要”，而且在“漏”字旁边加了一个圈。我当时虽然觉到圈得可笑，但是毫不介意，这回才悟出那字也在讥刺我了，犹言我得了教练漏泄出来的题目。</p><p>我便将这事告知了 chen_zhe dalao；有几个和我熟识的蒟蒻也很不平，一同去诘责淦事托辞检查的无礼，并且要求他们将检查的结果，发表出来。终于这流言消灭了，淦事却又竭力运动，要收回那一封匿名信去。结末是我便将这 kkksc03 式的信退还了他们。</p><p>浙江是弱省，所以浙江 OIer 当然是蒟蒻，分数在 $9$ 分以上，便不是自己的能力了：也无怪他们疑惑。但我接着便有参观封禁浙江 OIer 的命运了。第二年添教高级算法，算法的代码是全用电影来显示的，一段落已完而还没有到下课的时候，便影几片时事的片子，自然都是 chen_zhe 联盟战胜反 chen_zhe 大队的情形。但偏有浙江 OIer 夹在里边：在犇犇里刷屏，被管理员发现，要封禁了，围着看的也是一群浙江 OIer；在讲堂里的还有一个我。</p><p>“Hello World！”他们都拍掌欢呼起来。</p><p>这种欢呼，是每看一片都有的，但在我，这一声却特别听得刺耳。此后回到浙江来，我看见那些闲看禁言 OIer 的人们，他们也何尝不酒醉似的喝彩，——妈耶，无法可想！但在那时那地，我的意见却变化了。</p><p>到第二学年的终结，我便去寻 chen_zhe dalao，告诉他我将不学 OI，并且离开这上海。他的脸色仿佛有些悲哀，似乎想说话，但竟没有说。</p><p>“我想去学游戏设计，dalao 教给我的 C++，也还有用的。”其实我并没有决意要学游戏设计，因为看得他有些凄然，便说了一个慰安他的谎话。</p><p>“为竞赛而教的 C++ 之类，怕于游戏设计也没有什么大帮助。”他叹息说。</p><p>将走的前几天，他叫我到他家里去，交给我一道神仙毒瘤题的 <code>AC</code> 代码，后面写着两个字道：“爆踩”，还说希望将红题也送他。但我这时适值没有红题了；他便叮嘱我将来出了发给他，并且时时私信告诉他此后的状况。</p><p>我离开上海之后，就多年没有写过代码，又因为状况也无聊，说起来无非使他失望，便连信也怕敢写了。经过的年月一多，话更无从说起，所以虽然有时想写信，却又难以下笔，这样的一直到现在，竟没有寄过一封信和一张照片。从他那一面看起来，是一去之后，杳无消息了。</p><p>但不知怎地，我总还时时记起他，在我所认为我 % 的 dalao 的之中，他是最强，最骚的一个。有时我常常想：他的对于我的热心的爆踩，不倦的嘲讽，小而言之，是为浙江，就是希望浙江有新的 OI；大而言之，是为学术，就是希望新的 OI 传到浙江去。他的性格，在我的眼里和心里是伟大的，虽然他的姓名并不为许多人（除 OIer）所知道。</p><p>他所注释的代码，我曾经剪成三个 Word 文档，收藏着的，将作为永久的纪念。不幸 $9$ 年前迁居的时候，中途毁坏了一台笔记本，失去半个 F 盘的数据，恰巧这代码也遗失在内了。责成修电脑的去修复，寂无回信。只有他的神仙毒瘤题的 <code>AC</code> 代码至今还挂在我电脑的桌面上，C++ 旁边。每当夜间疲倦，正想偷懒时，仰面在灯光中瞥见他白胖的面貌，似乎正要说出嘲讽蒟蒻的话来，便使我忽又良心发现，而且增加勇气了，于是喝上一口冰阔落，再继续写些为“dalao”之流所深恶痛疾的文字。</p><p><em>*</em>文章转自luogu</p><p>此文章转载于 <a href="https://www.cnblogs.com/Attention/p/9781101.html">https://www.cnblogs.com/Attention/p/9781101.html</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/09/四篇关于-chen-zhe-的美文/">https://ren-yc.github.io/2021/08/09/四篇关于-chen-zhe-的美文/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 光头强砍树 - 题解</title>
      <link href="/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E5%85%89%E5%A4%B4%E5%BC%BA%E7%A0%8D%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>很淼，读入后循环判断输出就行了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(n)$</p><p>空间复杂度 $O(n)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, k, a[101] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    cin &gt;&gt; k;    for (int i = 0; i &lt; n; i++) &#123;        if (a[i] != k) cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/08/LG-光头强砍树-题解/">https://ren-yc.github.io/2021/08/08/LG-光头强砍树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 不存在的 1 + 1 = 1 - 题解</title>
      <link href="/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/08/LG-%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-1-1-1-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="8b8f1647a71bdad4b72c4d59567215c1ed927ec0a6adca13a3ea2db9e3a9bf3a">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa867922bb79024b0677968247b502752d97d3df173df156e4e39a8f50fee38e6f90faa3abcbdf247c6955328d6a076ed3ba5a45acff3d1a149283d3a99eb05453b75634ec5f10d3f2d287bb0a5ee1df0370c868a4540f2e37204ca913caa7d495a164317128b36e42432d47877a1adbdc4de5c4706d33bcdb930c06f4e7635e632427a55f3418d36bb2ffe145e06388986afcf3c96b005740188a9a3b846fd200024f88c835dd040b74c33920511c773a15d4417f744a677fa3f15c0e0e579f45b1a289575d0dd4f1a488d4576042f8abbe92a1e50eccae7b65cb123151fe58b8967249ada7793e4e686c98e4eb460e40eacd08aec962c0a11a486f6c2691a9f9862e906016aef1a0d009c73968da54d3a6c7e846c0b39a060742e4e7b92c4b24d54b92e41229e6ee6401cb6b3cb81721a9014347d2b64ad2cb11a5ec23b148c20943b0fb69ff8282ba785020396f15587992a0e5636e1713027d4d6400db505deb3c3b1fc4d173bf57b0129ef0ea344026439f6e3dd09758fd9040c51ec80b0ee07ac9a24522813b7b01d2ab6b9fde279b34890ac5cc285bbe8e6ea72422a50fc82f564129d920ea15ae6d93930db13c91cb0da78f9bc14163d3c1d6fac5cb5799da47cd724ff785ec7d03c2f72853d3f2bd402e8de565343578d6dd226c5920a799c933e65a78f71a7d781792124bd8e87d7c0fe9e3a5a77871b46031227453a34442718a2f0a514fc8a2984d4103d0380d0b4a029589b21b6abab09b1d829b3dfed911ee414a2ba83d99ac9687b730535410f49e05a88131b2e3cb98325993bc194a2d682a76ac6d8f86cf2e5c413bcacf997cbe842181e44941da7cc8c61b742b87ac94d8aea8abb23f7dc3cfc30d5377506bf7d028f73a801897b42f00ef60f1efd1ebef29a19b26a1a4a6a06c109d278ddaa902e3b25a3865dceda98af12bade52d4942e00bb962cec86780bad67e7c3283891723aa2efd9b05305ca0d7b6e5820f9a833a7516cc61cde2b33279e5c57c5753359c1e2495583d1089f4189f8117a07c3abc07b9b8af12430652d2da87edaa502fdf75ccb6a846f8b324609a083a7b85d7d6d88005656c81627cb29abfbbe0ccc1decd998745df79824ed209e584d3538835694c35c067efc193503ea6143b042abac8c08dbfb74dda516e5cd1e1201d940a3c9a340bbbc3e7e9e68e9f28ad303d33ae01d49163f6341a60af624ea3943f582ba8627ff10c488fa1a24617ddfd1d1e62f098f98db3e239693f102a20e7f124a7b5faacf2faa3928f90d5962eff7595246971a406f306367c58ca6ea4764be5db27f2106bddb81167d3b0ec3694013ca1dbcef07063483db1072cf773a130ab3f5c8cee88a57a3aa8c12beca22050297485b1d2bb19003183fc02b420170466a697784c6104df474396a00fcdd4fe2b259de7ba55fe3557a68315cc20434a236e9369b773f40cec032da0c391498d89dd82fbb53602651cd92b618665e7f2d08311916c2990198b114ee1f9dc7e81020363db432429742382a0c49550a4638086768f4f3114cceaec9e080e4363a528dc563707abbe11b14d94655ccd86d27fd8c778ccd6b4b7ac02ed5b73d83063426e0ff97811cd51faca3a4040b22396954c215f68cd27e725c6a1cbb47cb6af77872e72a4fff4bebe60efd0487d599e8a4c0b906d9d78bce2fd9bf7eb27634105063c9ee766adfbd8d422e84f5360d9932af32c63741652c1025a3f134cf5ccff722f27ee8ef5f78ef2b0d0d6ce7761a7f264c75f752396c6cfb443516329f833ef698c37017b02af96e4f5a57ad81d9f835fd30f716ec606fd7e81bb78af1d62ce45e705402beb7525457df85d5f83bf406524b5aa27dfa2b22edabc73d0c65bb9caefff26356a7a57ee64d4c9da5945161f27766127568f168063813e8781df3859b34bca7991ade65e9b44bdaad0657ea4b72eee782545078a4cff0d796b5887fe532b49221557f960175224f1aa558435e407da31ad453b4e3bd127d289a7fd80d57c604bcc451a6d72795e20fccb0620352e9f6ae65457</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 木棍 - 题解</title>
      <link href="/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%9C%A8%E6%A3%8D-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目说</p><blockquote><p>Bob 想知道至少他需要去掉多少根。</p></blockquote><p>所以我们可以利用 “三角形两边之和大于第三边” 的性质来做。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>不解释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long n, tmp, a = 1, b = 2;    cin &gt;&gt; n;    if (n &lt; 3) &#123;        cout &lt;&lt; 0 &lt;&lt; endl;        return 0;    &#125;    for (int i = 2; a + b &lt;= n; i++) &#123;        long long c = a + b;        a = b;        b = c;        tmp = i;    &#125;    cout &lt;&lt; n - tmp - 1 &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-木棍-题解/">https://ren-yc.github.io/2021/08/07/LG-木棍-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 苹果树 - 题解</title>
      <link href="/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%8B%B9%E6%9E%9C%E6%A0%91-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>典型的 $Fibonacci$ 数列题，题目居然写出来了……</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>板子题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, i = 0, a, b = 1, s = 2;    cin &gt;&gt; n;    if (n &gt;= 2) &#123;        n -= 2;        i += 2;    &#125; else &#123;        cout &lt;&lt; 1 &lt;&lt; endl;        return 0;    &#125;    while (n &gt; 0) &#123;        n -= s;        i % 2 == 0 ? a = s : b = s;        s = a + b;        i++;    &#125;    cout &lt;&lt; i &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/">https://ren-yc.github.io/2021/08/07/LG-苹果树-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 万恶的试卷 - 题解</title>
      <link href="/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E4%B8%87%E6%81%B6%E7%9A%84%E8%AF%95%E5%8D%B7-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>既然题目说了 $a_i$ 可能很大，就是高精度了，<del>但我懒得写高精</del>，得用个不同的排序方法。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>这题难就难在两个输出循环怎么搞，为了避免溢出，要先输出一半再输出一半。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;string a[1001];bool cmp(string a, string b) &#123;    if (a.size() == b.size()) return a &gt; b;    return a.size() &gt; b.size();&#125;int main() &#123;    long long n;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1, cmp);    for (int i = 1; i &lt;= n; i += 2) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    for (int i = (n / 2) * 2; i &gt;= 1; i -= 2) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/">https://ren-yc.github.io/2021/08/07/LG-万恶的试卷-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 捕食关系 - 题解</title>
      <link href="/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E6%8D%95%E9%A3%9F%E5%85%B3%E7%B3%BB-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>水题一道，输入后循环查找 $a_i$ $&gt;$ $b_j$。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(n + m)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, m, s = 0;    cin &gt;&gt; n &gt;&gt; m;    int a[20001] = &#123;0&#125;, b[20001] = &#123;0&#125;;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        cin &gt;&gt; b[i];    &#125;    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= m; j++) &#123;            if (a[i] &gt; b[j]) &#123;                s++;            &#125;        &#125;    &#125;    cout &lt;&lt; s &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/">https://ren-yc.github.io/2021/08/07/LG-捕食关系-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 负二进制 - 题解</title>
      <link href="/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%B4%9F%E4%BA%8C%E8%BF%9B%E5%88%B6-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="27e476abbb5e1b6cacf92f4be005a500508464e180c0a2adc69243ee8c891f6b">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa70a7c812791a84e704cd9a1a8c94c7d7b76cca68ed58adbcaa4b636ae8687a7444bddac6e78044871624f40f04fcf5c2eb15633e0c639a307067521b0ee75d827652616467aad501616266198b56b6d8ede27e0795e55d51434bad4540c88b914dbf76ba9885617ecc374332e04a99fb131b7d67b4846361b2693a1be68c0a3ebeca13a8f2af18dc28d1c8bb185944d948ed6377751a3d79a21f7feb82a0786794f92ae430e8de100d4e3618a28dd7e045cbb857c6a65d312920b94e3fc642e51c2fbbd7511db6d35e3f1354ec74537051675d8c4f806f370badf13e68b5c4c384911c3bdb023d41d041fb86bbfaa400161ae425b4f9ad3c5075f2b1efcc007f49811ee18db09d99b69a119ff4452e3b55f21438c7cc20e6486b7943d65f0cc00f8834bdd10af16e11ac5aa240090c90e6efe8f9a6cca90331003fab99141b07190cbfd4fe99b251999228a7950206d265e88a9e7af8c5111fadb8f31237ed2bc7cbf3e99e24c91ef0c42f98159d820fae19636f62d766c2094d568ced6fc6c53961473ec8a8d39c7b4c7bbd0380d0740428f1a3ce768071a87877760d090623ce99b5aa2e498fdffac804abc51706fffa4966b64be46dc9b7f9dea8dd735624cd2c47f7c9a817210dab5808c8a966cb0f9b8317badf2be7c675bec532211241bf0f1c6bd0e8a5da58e4f781f889ee096a7617dde71736d6d92246eb5467db7c9c1fde98b375edb28eba829082bbb0688e8a5ce3d4870d81adbfbc7b121848d90f5725fe28a1945fe38de860b51146eff7513e1e2d94358bcaff15ab524b09944b8428c68e5d3d72ceeb1c53c6e6a07292d26ab6b294ac27ecfccabb54b3c22d09a917209e0784c61aa2e76be2c9bcc39d62611d6662b49a87f6809dc4531d7db9e336a587c24b93af8da80752e473fbe0a5c2ecca620e3219c0c274deb8a1dc1bc4887eead74b947b4a6f957086aea28ce22dd0e89b3b53be5968d725b33021b9e379a430f0698ca5b852aacf6a5ba26f06566cd93804b1c0dcd82c49b031dbac13cd81c88f819bae25765e70d3293c01fe733b74ac630d4801943571fcb6e879016ea3c1d869b5627a4e4dbb89dde32686ab4343b8609c5b1db8e25c4927cd05d3ba5484340ff80934f22d30b2fc796b889d209ab98c994197f51ba4d43e0c4d3fee60e0b539215c7687eaed5e54caba01a6b74e18090594aa702ea01cc71ee729833667cad369885433b6662077284947068a338f5811a33327161a08f09bdbbbd84467d09f476071b1ae8b08faafb371f75944f9be7ada3081a813ce6d346dc6aba3501811de2918cc36a98b93a1a34d1a13ad580cd4b20da82028da71ae76e2ef02031f7d23db8910780f25c2b74da217f626b18f7cccf5920ae23bd4460d8ed4dbea9b11592606dd91f0b417918dcb2f24bcdc2c99f191feff1cae4990f7604777a2e0d6d43a9672864bba8390dd6796bf5e4c0a7e2d3b68e01071885c6471c314b3ac4c5434c443775da1c10fc2a62a6eed316b589e2ef7790adc5763f15fa95456dbb32b4d80b5e48c8f2e2b048e2be45a05ce81b05521385b5961a20b6b1c4936a0404555bd938f0b5122f847b2e8bad866734b0996c119b3c0731be8d916c1810209f7a934939d470768099e5ce41808837a40b8965356201e4a9bd71e3292ad80310ea211f22a089b19b11dd58e543b4644fa48d2af952eb4be7072b078c7b50ee486ac2d3418011435c3423dc8cf485cf333d036c48acea189b2cfa0ba6718793c72e808451656b3aa649d1246885f49f12c3b63f185b7732c8feb50fc5b936dab04a861a5410838b6ff902328d2e8ab58ce781a103c46218453d527e2a7723ae1b27b4927e1b435d45620bdc511ce68f363ce32ee71ebdadbffd25cfb86c43fb36bd8733ad279413f77243af4f26f56cf6b2a5bfa86592e06e4999a87789cb7fffcd2812ac6f46705121d792d2722c5f06726d90840da591f60da6d8a53af2cf94d755f83bd7936746d6aa9050a2752aff7baf8179e2eb81f56f3be00ea9d6cbc201ce151ae18a09af6714e000645e405f91a65b5d304b21ca31e72792a12c1b5f137119e01e7d079c8dd0816995249183412c657c2c156dca1d15ebdf18f191a3e0e42563eca4b965b487da35d9cb38af102b5765f3461059451a5fb09423618553aaee9fbafae24326d79950b6f9b92f5f94170682f6b5547a9a7c2ab2c1bf7333054b7a4af2c0c54f5a35607c69486f6a7608f936808eb0af1e2eaf7de9fde9cca7350f4901f4a64583a058bf61a32abc42f62ce146e3b129b099f1f4cd1b8eea0bd004c742e2e82f00be2f68aba118516ee18e9490b42887c5360c2dd8b427aece6527d5c53de1194440ad1d6cbd52ccab1e5781b0d61877c7590acbde4020dec839934c27546bfa896db72d6dbb62f151be03d6e5f70c327d1338d991249b5787dd3e48b7351a2735d2ae3b07ae1684c59386564bf80f2d3262bad4193adfcf79aa556837804d820ef62aa458db4d1a12a653f7ea3d00175aed589d0c6405aca86f852db4a300d7c7eda17e537410b835c95d3f35867e310738db90523c74e3a88779353303155368deacaa95d8e0282725dc19485d934ef41646d4f0cfc5f41ae174e6d319aa71ca1d59d8d5248fdbcaa07246fb749618afcad3963154966310bfd4ab46153a836bbd87c0885c4d68b61c7e49ddd6c0db5017ebf87015800ef7b98b634665975c81da1e7c3827bc3999e96fbe668c9bb6962bba3cc6b7d4781a04ada2d3bf341d2120de4e1099317df1ed461ab8426289612cf31697a65d15424754da199ba83a67c5b985f9a22a1c7173ab1e6c8fcfae17664dfe91fe17cde001bd256708013</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 行程码 - 题解</title>
      <link href="/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/07/LG-%E8%A1%8C%E7%A8%8B%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="a8e54a3c9f5ab8717cbaa413c27c603f8c4e7fdf62ea8aa7101a22487a15d518">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7faedaa4259942de8772ffb248874bc8625c78ab4856d829b262483956de4413fde9590b3c3bc28a1ee047575e9acd8d852752e5bde07f73ebd1948c122f4b7675ade58365c2a8234bfd5a2cd81b787a72441172efd17d99a2abaee4c595a80c911b8203d3a3a51d3361e1131a783fde79ae60a31f67e7e24cb2a412df8861c13d4b9705c5fcb63e1178aecc495906726d309a2889e8b4ab20073b1c86ec06d409db56bc16d0a1b8e9a555d464eaff6edda59b30ea0440fdc5e878907f208a785290b6db0b8ab0ff16f6eef4543671cf108ea649f4abcec24b0bdb5d6f4d4f9e7e72b7c7cf1b6d3d714ab7c3ad42a59259b75806a6bf510a1c2678de285599f2b4825cc98122a3bdd36c7b29c5bd8fbd305518355efd09949e5f9957ac913193934b40aa4f7ac5a297255802dd46a1b30c8fd274e4461e5973b689d171db2ec47cc6bf740fd5a3d9f4be6113bf91e0b84793aaf4674d595ea1882aecfe443382abf319a61f8dc7b07199088d0da5eaad7217fe7792cb0ed614b2fc1a743ec0ff4d3ed793a419da423431f216900608129129a4bbee9d6b6ce61ecd89e7db50705d023a8fa2ad9685552ecb1f60a5766207201bdeba34d874a6b33f3b51d38dd2cdd09ab6059d0a64e7b2945643767ca60888f67a17491b4fc78edab95dcd61342dae5c23f0af8f7df270618596067e6194e06c40fa4c8b70e6a5401119bcd4d04b0bd55fc164eb67f7da90b4fdd1441f979d727a3b9411fafd934dc667cc5ac715cd9a06ecc28fdfd0446098df820b5088ec64ac24a6be7ff2c8c03aae616546b2077125bb9344b98139a615e28305c9f8007a5d50e6d2846696e6d8082f53ace2a7e8f37ccfbde413ea80bbd57772f09e60b73bc6399a179ca30552941c36be76dd22c2b1369f76c47a7ea0e9321995d5093253215cc1a9b2ebb58df8a587351a5b20e9257ddc64f479d9db464f51ddcbcb23c9d0ca466fed92e0c86a15cd740bebce9e32a00cf20bb92d69eca22b285dcc550023d270dfb286c95495c1ba7b1c844944d15f345826177165cf95de5c25dddc2f5ec21ab69ce282d090fb2cb0e772fbb94e17f13ce35e7e95fd751b97470ce888b199c84f9d90eac0cc08841cd20f4e0e6709cdf0d08c9d533bb7f2ffda0fd16ed727da2d1bd438539aaea200a9f106de573db79780b697edc8a48a7d658cb39c3310d04bbeac5994d71545f1d4bbeda53ce9e2415a9e4cabce4ec278a503da094ec20353450b50fc147b53630a99ee394ee8695c32e3aebdc3ebad9ec1e6e799153df4967e524e5e1be3bb46539fc987c2baa65190cd8fe7fcba0767d6130de7afe32e7e9ae02724102573f92068228388ec203201af9d4aa1676477c958508548c83381435efd223cfb9484da71b1788e0ef52a66492322f1b3129d5ef39ffb3ac8839350cfdd95d42ef2d6c7f3cd46f6c1b504b77445431d4d8b87248b68d58b3533f00830b147d372fd3f08481cac6e095e5308f2c572a9269407e1ab2b488819f1293578c4ea604902ea622bcdc852920491dea1a1bd9d2d03257b9d2607cb4c3807c391808fdd82a21936819bac9d2082293c7e644ac1cdb1c7917921348683c33e15008e96a082d54a53795df5e60485c0afc09d7cdcf400ceffa5926516c19683276d29b9195c6bebb94fc1d533a4c6f63d39129eeddd8755422b694f1c62440936715f5b2fbb9235b841ede503b6826d0a15c05dee959859ac5dc76cfa56e3f8db61d8eb7304dfe3a70badb854f7af9bd9254a7b781699ac336f48b9825eeae9d1d520533355bc37d74bfe2b8b07a54a7b0ac5d641b27cfad280f8c6526d245b130774799f4170075db2ce023a84aa83373986833d94c889c14e1922f1177b8adaba3caef19df1ede8dd5e42a47f4c53b0272ee50e5e6a622905b9c3da1f55279d676b1a26e373bc0a7811e877712275098daa894e0fca457afb5ebe7c1c5d682989656da32eb6921ef437b82ebd270c0f1d75f9c7cc358ac4ef4da24bbcfc53730d62d692ff94be0750e7cb9857d8bf8d0de07b635a4c740c3422cf0a07977e30f4eb951822e6fdff4c85d0890e52581f112673d5c0f86e08677b7aee4c8fef562230f0c0128f748e711c6c2167a4ab7fda2b58707fa2135eae67f394315d2a24ce53153ffdf85923ff28d95d46f7f654c3e1f86c2a98a440729d98579fea4c62e858157c4c53ec9ad2ff71543f0f927e63d4c90a89398a020ccedef6b012dbbd6574e5532c38cdacbf01fb24c7ca93732e3150777f14a17879d480aa07755fc6d0bf4f7b26562c96c2da721990c8e3ab3fe341ffafd2967150a6f079042d310b9848712ceff70f61e8b150c2d5de6326bf719aa392422435ce74708a8c79923942dc32a982df5250a253b19c80dfa5f56f3940d94300a409918358313941d5564cdbdb857275b61ecdaf8fb052e77a64eb14933ec0eea6eb5eb979a0969d94bd6a1534f55dcfade1fbb419ec4c754983de3511568d1bb34aa1b7430b398261957191e440452a471016558c31237f7169162c37ca255dd228f8efc7f181c94fde9caf1f0447f7131b2b7e0eda0a267be406787cba9cc848df6434c11ca1912561821b0eceecc4617980642270c080b9525972f5beddaba590a3419500b53690e3b58b49e66dc728e8b444119810d70f128d955e3f16b9541f80385ac9274e8942a896dc040a3bc79cab9ea8265699654d8264438992a0c147e30eaeaf2f9f3609e246980e12e82768e36fdca960e365bff8e0d8f20c33080e456550ca9657a09fe1efffd829ee46b3b04d166501da9901d7373495780717c8b76e109ebc6f46f13b6e0c00cb25adf5e64f4a585d891369626f797e270126cfee2cfd52c825c76f31734d3f2b51c775e5ef9ec7e56dfe8a2dbb8c28522d70e493ad2f5b9eb8c413678ee62da4d445b1a7708fe61fbf26789f3164e8ca9edc2d6bcd2c938dc2c63846988bcd2a210187879e27918f07fc699f2302fd814f8a312412b3459c93f70a88ba1a8c03108a40eaca1fe0d9bb0fe021fc699e3850bcfc3bded3786eb80f5da0ba410a2e1d645dda2696fd1ed027ff8040f5ad5eb5d7a1daef794b00fbd833bb625daaa39ab80e04d78ae8e17126c6fe02fc9eab96d709c47fa2810e9b547e8b954dd220ba7adb61062470607a356579e0a4143af575f53dcf93cb828c635a28a9303ad93012517c4b1c55cdcb5569223a9fcd1a9f4fbb1c6d0d1130c0f3dac2f560a2ad8d0fce3ab16e79121be4ef91de4bcc9a86ae63027af5c46e046df6a5393653bf74e25085f5ee519621955e9728f23c7094d866e9fd44767b85a1a5b8c000138cdc9d6cdb86e26f4b2ceecb532baf05d676ba9706b2e3dade56d66d259d240bd23a1b21dc1447092521c3b9800a620372e25e7e1f7fe4f3c90b656484250a6bc77071641a0e853655a9342b0da04005cdbe9716dc5aafae674384e12cf9e266597aae1698500e9de818795f7b3b48679f1ce157e2a253dfaff54687d94e29020d912736b36e8425bf10d6c21f70d955cd9140dcbd18e590810bae642d74caed74e5314816538a3f5e458ecc34f71a635fb3042c242824485deb68a1e3da292bec023d80dad33374b4e5c8d8098c189c7938e235309ee9d02f2783192d055bc9f7554c2b70a4df5faadbbafe014b24b5b92cb0755ca6a85b87c4b14e988916e6526fcce9e721de272d955ec4142d929a8bd5ecb52ff53a021ff5a874335b6cf5a6e31ae8153f7229e33829f3414d3eaee0a3fcd36f5c75a7e32755b19c86af87a47b83597d6178d470564d2b6a81c62088115da81a9fa46add71f191d5b839e790faf2333a8535df33eec8c821d3d710aaf10e80a46fd17fe814fb1d0f3906ad8b728407f5300353a817cabc7c681b886369d4317c01b0e66953343abed4ad5a653c5360f7eaf51265a9553dd5d3f50635466f00a498ef69df5f14901a54fe1acb5ce38851fc309a12797370d2e8494d34e53899a50ac39b8c8018489d9efebcbd0f2945e1cca34f91d17b55aa061d9418a22badbc9794e5510821c06c65df2188875f48ba12f52cf374ff351058c6a94f9fb9acca1f82a870bef3482ad14a799a7609fe57dbca89b4b0da18f004147ec86982e7e0845227dc702afcf746cbc022c8a6b3e078ecf8d5cb05d6ed7738bdebcdc6af645fadbfca8309b0f30b6ab4f256827240619da600e97bce843d027967f28c8ca4ce5cfb6561aa1d12d77b9cd7956e6db3128dcb731e2ddfc550acf6c8780ed057061236a08c5054f2a9b50aac44630145e0c54395a55f0570ffe4ec83d2e9012fb7f5b123c3802e78edebaf25a605e1f0b6657367d93cb2115c702146ea6c5e7e5bcb9290a0deed86c7d366e9b98b494bd8e84445fd7d8f37b24be655ea60c4920f8e861007e64ebd4100ac9d35980814322900b58f0e481292ed8b249b105531da4dbb3a7d83c71974f54645d71306278644e73044e982c70095a44cea32c58ce667d064bf8a68696a414d0e2691ab555d93c5e25673bb3bc13d8eeb19070cf306af098effc426c77bd30ae6277b3e706a9a4e7a373045347429ba13e10d048217f24fd7a39f1b9bfd00c485f767b9e0451a061de71ff221014b4c7af5dc7328c8de591e98cbfee16ff68fbaca21e7d150ad80c49c9df9bfb14ef11d9deb2de52c792e118851dc50c7a052689762c9e12c4e56deeda72688e16efb7efdbc45874f459d28ab2a922042d0330490a751940cef3fa2eb600c5d23aaa8ae4f590ba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LG - MC 之吃牛肉 - 题解</title>
      <link href="/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-MC-%E4%B9%8B%E5%90%83%E7%89%9B%E8%82%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="来自验题人的致歉"><a href="#来自验题人的致歉" class="headerlink" title="来自验题人的致歉"></a>来自验题人的致歉</h3><p>本题验题人太<strong>垃圾</strong>了，没有注意到题意矛盾，导致标程出错，而样例过于简单，无法查出部分错误。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题太淼了，但我做的时候因为玩过 MC，觉得吃饱指的是不能再吃，差半个饱食度也能吃的那种。</p><p>这题就是字符串匹配。</p><p><strong><code>if</code> 出奇迹</strong></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>时间复杂度 $O(nm)$</p><p>空间复杂度 $O(1)$</p><p>要点：</p><p>$tot$ 要转换成整型再 $\div$ $3$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, m, cnt = 0;    double tot = 0;    bool flag = false;    string s;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; s &gt;&gt; m;        for (int j = 0; j &lt; m; j++) &#123;            if (s == &quot;stone&quot;) &#123;                tot += 0.1;            &#125;            if (s == &quot;coal&quot;) &#123;                tot += 0.5;            &#125;            if (s == &quot;iron&quot;) &#123;                tot += 1;            &#125;            if (s == &quot;gold&quot;) &#123;                tot += 1.5;            &#125;            if (s == &quot;diamond&quot;) &#123;                tot += 1.75;            &#125;            if (s == &quot;obsidian&quot;) &#123;                tot += 4;            &#125;            if (s == &quot;zombie&quot;) &#123;                tot += 0.5;                flag = true;            &#125;            if (s == &quot;skeleton&quot;) &#123;                tot += 1;                flag = true;            &#125;            if (s == &quot;creeper&quot;) &#123;                tot += 2;                flag = true;            &#125;            if (flag == true || 20 - tot &lt; 6) &#123;                cnt += floor(tot / 3);                tot -= floor(tot / 3) * 3;                flag = false;            &#125;        &#125;    &#125;    cout &lt;&lt; cnt &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-MC-之吃牛肉-题解/">https://ren-yc.github.io/2021/08/06/LG-MC-之吃牛肉-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 公交车站 - 题解</title>
      <link href="/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/06/LG-%E5%85%AC%E4%BA%A4%E8%BD%A6%E7%AB%99-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>题面很长，总体来说，这道题就是让你来判断每个乘客的区间中是否有车停靠。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>本题要点：</p><p>要定义结构体，结构体中要有总时间如 <code>TOT</code></p><p>输入的时候记得用 <code>scanf()</code>，这个函数可以无视中间的 <code>:</code></p><p><code>scanf()</code> 的参数是指针类型</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct NODE &#123;    int HH, MM, TOT;&#125; a[1001], s[10001], t[10001];int main() &#123;    int n, m, tmp, d[1001] = &#123;0&#125;;    cin &gt;&gt; n &gt;&gt; m;    tmp = n;    for (int i = 0; i &lt; n; i++) &#123;        scanf(&quot;%d:%d %d&quot;, &amp;a[i].HH, &amp;a[i].MM, &amp;d[i]);//输入记得带格式        a[i].TOT = a[i].HH * 60 + a[i].MM;    &#125;    for (int i = 0; i &lt; m; i++) &#123;        scanf(&quot;%d:%d %d:%d&quot;, &amp;s[i].HH, &amp;s[i].MM, &amp;t[i].HH, &amp;t[i].MM);//同上        s[i].TOT = s[i].HH * 60 + s[i].MM;        t[i].TOT = t[i].HH * 60 + t[i].MM;        for (int j = 0; j &lt; n; j++) &#123;            if (s[i].TOT &lt;= a[j].TOT &amp;&amp; t[i].TOT &gt;= a[j].TOT &amp;&amp; d[j] != 0) &#123;                cout &lt;&lt; a[j].TOT - s[i].TOT &lt;&lt; endl;                d[j]--;                goto END;            &#125; else if (tmp != 1) &#123;//敲黑板                tmp--;            &#125; else &#123;                cout &lt;&lt; &quot;Leave&quot; &lt;&lt; endl;                tmp = n;//记得重置                goto END;//goto跳转到结尾，也可以用break            &#125;        &#125;        END:;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/06/LG-公交车站-题解/">https://ren-yc.github.io/2021/08/06/LG-公交车站-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - Hands - 题解</title>
      <link href="/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/08/05/LG-Hands-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题看上去很难，但分析后就可以一个循环解决。</p><p>每次取牌如果有一个连续的大于 $0$ 的数列，那就全部取出，取到其中的某一个数等于 $0$。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>边输入边累加，记住当 $x - last &lt; 0$ 时，就不要累加。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int ans = 0, n, x, last;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; x;        ans += max(0, x - last);        last = x;    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/LG-Hands-题解/">https://ren-yc.github.io/2021/08/05/LG-Hands-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』WFR - 如何使用 Warfarin</title>
      <link href="/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/"/>
      <url>/2021/08/05/WFR-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Warfarin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Warfarin 是一个由 C++ 编写而成的解释型语言。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md">这里</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Warfarin 目前最新版本：<strong>3.50</strong></p><h3 id="下载-amp-配置"><a href="#下载-amp-配置" class="headerlink" title="下载 &amp; 配置"></a>下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-amp-运行"><a href="#编译-amp-运行" class="headerlink" title="编译 &amp; 运行"></a>编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code></p></li><li><p>编译运行 <code>.wfr</code> 源文件（请看下文）</p></li></ul><p>Warfarin 的源文件扩展名一般为 <code>.wfr</code>，</p><p>使用 <code>Warfarin.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code>，</p><p>此命令会编译出一个 <code>.ff0</code> 文件，相当于 C++ 的 <code>.exe</code> 文件，<del>但不能双击运行</del>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://ren-yc.github.io/assets/ff0/Warfarin.zip">本站下载链接</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/">https://ren-yc.github.io/2021/08/05/WFR-如何使用-Warfarin/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warfarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 买二送一 - 题解</title>
      <link href="/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E4%B9%B0%E4%BA%8C%E9%80%81%E4%B8%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><blockquote><p>凡是顾客购买两本书，就可以免费带走第三本书，只要免费书的价格不超过两本付费书各自的价格即可。</p></blockquote><p>可以使用排序来做。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>排序，建议偷懒使用 <code>sort</code> 函数，<strong>But</strong> 是降序排序，所以要写炒鸡简单的 <code>cmp()</code> 函数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, a[100001], ans = 0;bool cmp(int x, int y) &#123;    return x &gt; y;&#125;int main() &#123;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1, cmp);    for (int i = 1; i &lt;= n; i += 3) &#123;        ans += a[i] + a[i + 1];    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/">https://ren-yc.github.io/2021/07/31/LG-买二送一-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 方舱医院 - 题解</title>
      <link href="/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/31/LG-%E6%96%B9%E8%88%B1%E5%8C%BB%E9%99%A2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="e521163a2f64f6e2c1f778891da6574dcc7ecc4d59d3d0acda2426fe85070151">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa25e1ee344652a1004e20dfe5d41cee5a34e2b85cad6c1fc9498c3f2c0928e49db9d0ad62c1a0eff4f2065ce51917ef05122fcd485b94d404e7cf65f9b328b63d604f4085e56ae2b170dcea8f00453aeb682e17a5e831026dbcb108c402d385528958c8380d124ee292a7aff063c716f109911a3e0016b6b018a608bc8f9d244e498dddcd1cfc18a1d3676a041dd76382f95ae991104a2e220d7a3150cec51e1286d99c39cce39c79799e7bc539cd4d09a5fb8ebd3e27b2a8bd398585392dcd35b681a5667cfaa684afa0be13407a527f526ff2f985a7fdefbf2d713f4cf44e62d27119855a9ce2d2d795dfde2462903b6fb99abe20a067cc60840ffc39a50237abae282d09a1f18142ea1438d2a8661cbeae050f47028c234c4be562cf0e4fc401f949a5ce0abba9ac07e12291182cf8715613d1a086243f7fd0d11c059abb505038cebc803397e6e5be4310d6c757b87bc6c4fa18b77e8bdcbc4cfff243698dbb05432ee61153f8c8794970431053be8a1b812c287311e6e3ddbd95435f4693aab8985e3b4846b5062a76b08126f71a503ced12b6e7ee776e5e0c5dc8123c3e6538c59651ac266d7a854d4efced72d337c7b37d2f2d8d300757fe5b17477437c7de899412b8e7f9e3847c9ed5b3efd6828b0c3e79be7bc0fff571747b855e9010faa0b37de5befedafac027d7456246622d075af7d386a1c5c9da20bb7394e66d127625952fcfe2615ae22a58be7166240235c0eae6ef936171eea1579594cb36fba8fb5a939075bd0187e1dc39db7aaedf89f9db6971592f4bc725150eb0666c186abf1e6cf4f8b1fbdb7108b39781ef557b3cbae27c2e9aac3aeae552d8d672167c1b21df7b0477d6623b0a6ae1656bc7be536a5d1ebf4432424c76a1a019f083647e1c00de2871b87eb0d449068db4851b7bec1ca431202ce9839f9397202dabdc32d6d1cf7e2583fdebd3293e98ab021be4d005f30882788c3f677acc6a2e4d5bff5cad7afdf0433107a4c04cb266eabe853cec26f153d53fff01724d9044479c44c7638f5b1d75278050513ea3b1939930d9c92059dc40fd8ef0d75b65d54c64dd421716ac0b8be58d895b109c5bf357bde2d7e4b1b21ad74d4a1f72f6d368f387c7ef1ff581bca6f5dad0a8429c4c77f7e344b089782ea19394684b0f2703a54f114c5476dad683b07758eb5dc9a3e74085711420aaf98e66a8f0e027a66310a3050a3afa0149ce4fcaba079e5604a168151dd0b2602ab6268ab293aa460d1afd007f43e3e3814819ca2b795cfc897d962e0ed2111e32a29d5d3fc44e9fec80556973bb2495ca2580ee953b31958d05dee6cc37cae3ef686a72333395fb78744032fcf2f8a5b2044fbf01ef8700bf09300fd109d2e3d7860c7c98d1d9aa89ac1f50aae76181ab04474a93b3c51702f0dade7d34a56828db53e10db265edb68c70898963495f2da6683e4475ab4533549085c76104b6bf046b576ae1293dd33411eda0565150a5370fc888e3212eb03d57de07824c84c6a04bf76099a6e988d5e8dcdf41a4c1edf20f8b3d31690b3843a473be2b656b936c5d6ad6a9927f75626e307cd861935bc14799485512b820a82f18ab540287b6ad9e0a990d152521a6b7db3d7c04c93589feb0a96bfc624830379f2b862b30d59271c9e1366757fed71e1fc648eca6575efc66d2ed0b8d730f46cc7f9faac880a051f0f4767cb240a01b8d7fe2fa4edc57485c15089f7dc68d9ea08d28f3ac5287ed44834786409f453e02983914b1444d1892134245b49994a2dad768091cfded8a3ebdcc2df90bbd1bb8445317abf9a95d27785c53418328cba18ec8113ebde78d4a3a4b75</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 开关灯 - 题解</title>
      <link href="/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%BC%80%E5%85%B3%E7%81%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>一个循环搞定。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>一个嵌套循环 + 检查灯的状态的循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, x, y, a[10001] = &#123;0&#125;, sum = 0;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; x &gt;&gt; y;        for (int j = x; j &lt;= y; j++) &#123;            if (a[j] == 1) &#123;                a[j] = 0;            &#125; else &#123;                a[j] = 1;            &#125;        &#125;    &#125;    for (int i = 1; i &lt;= 10000; i++) &#123;        if (a[i] == 1) &#123;            sum++;        &#125;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-开关灯-题解/">https://ren-yc.github.io/2021/07/26/LG-开关灯-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 古老的 A + B - 题解</title>
      <link href="/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E5%8F%A4%E8%80%81%E7%9A%84-A-B-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="a8c651de31c697c97fa37e21678892b0850c0028649ef743febaa541b86d2690">33c7c2007436768271a01b49189558256fdf298294ab4f08cfc60e76edbeb3390f0005c364f656d0effabe5c0346fb2b739f810af1132a60725674fb66796a7f0d549c97dd05b1d113f55281bd8f455666a9716681681fb726ea4a1025dd8661049770aafd32739bf88cd1fff955bc45f44fd154cb4038b75555f79e8c1e8147c4b877230e060e439f0363de01f6fcdd98bd63a82b0af1b8ef88661616dfc7213ba4809af894ee169a9a14397b77ec3f4615f192a073f9df1dcfc1a869d3c4880b7057694951edc3ec8ddb45e48c10636d54684bd9fdd32deb9d38b1cde4b00c8c666749fbc83ffaf7511ffd578a80674fff5a280016d0c6c49da1c0ed09f1d54855aff47fba760e32ef95120bc85709290db79f0149afdf4cdfa8511d3441d454ed82390949c180090bd6663974785fb6b3b576ea60763c09fc4c17d83ec7fa1a1f33dbbb3da5893f718675cadba88f6207fc02a49da4fa43c68eb0e5c9c6bfada136e0b00650f3ddab8c959b532cf3194e7f52cf7ee7f0223709e6c350ed48c444380d84d453e61b631eaed824aecacd164d5d15e5e051930d31ff4c914475f3a6bac6bd2c674d4ae17c328e1a2f488ff11a2e976ebb98454232d0232bcfc89b2e428cfc4070da3de4bf853983a0df99b17c71006e0fc65f932ea6d0269216e85ebc0f62ff7929f19a5b29de0d5c797a8ce87bc960fcbd5fe97033650182e7a71e4504a450df2efc7466e87492ae48a5ba6f361e473aa7338ccbc1e7895ad6e6229d636a331195939687865b7c20635a9e8d8d919febae1c0640c2bdf8d0218993ad9eac116b35e9e41be5aaf4d2b988539bbda54cb99da712b526b9b9d4c9c02538586ca11edc66a29ac50b2d3fa336ea46679f82953a9959fb3cad410da43f2cf743799dc50c9c1c46f7f583559f3596cb9523249a844dd5c2563459411998a853e596584525ab040f441798aeb8bd57585c14526da8463e2f682fbafb13615d855ee463be182440c55cda8b7239a5e887701168d367548e6c8b180584ddcedbf4ad253719cb80de17a3e2a7d764b976271e1e4db91048baa31592d41ef0ed2b5e895fa7390f032eeef7551be6dd184cebb34ffefc5c6be016e0cce76e24ce9341c22da6e71d3d6db71cec30dddfbb22366540e683a0dc41fde4a6dbf889c6b315920670c56a3e414c4a150abc1365e7bff86803ef4b022e044bcb4a882234a60a472d38cacd26d1d8d4ed56c50fc22a8a348a24dce43db650c2b29e836caf09221784aab0a79daf8788c11e0de555bf884fc9c25acb34d5811d89d8e4de601266a84400a973c1f783943f262c3de842b844af23a35226ac8cbab518548930e353436caf046283e09574ed1d894397f99601752fe69965ac620a399b53fc380cd3ca96157bff4f505ee16f6bff8958486c528f012dd9e664fd69bcd4b053da7b04d33685930ae3ec145fb883f7669e6f17c5b6cc7aeb00634bf8eead1fcf77012de4ed86f42abf23839dcf4e4853b1f23aecd8041f9f400497441aeb858db1a564e58dd8114a8a492260f592eaea46c7057fee7ad03327fb8dab7b8da877599cc77ea3af44023ce0cf5b86eef1a8e8a464f46924776814c5d2117c60a8c240268dba502ba75c322fca7ec4176d90aaad89e3f5d4456e7315213b80fd1d050963a395997559c87dfbbe6f4df79375fa70951a6bbc29fbbbfdc7aa2c773f282bd9bfbbcab4878df738b09266c0d8dc67bd0e292aafbc46e39413d052926cf2addf17047557ae2f0c8d758646113ea4d97b17de6477941c719f12366c003efa08fd18302467d7058cf59b8b0f75bef8f7125001856b6d8786dd587498c4cf0a5da3f0f0f2cb6d19b6f95c95310c4e0683b267ce90ffe6f2c557c71f9d614e8eb6e7a73d284a92f97c08dde458b16646b5b1e727c5a949afdd747b09c8baac994543059e45ef0398fb5ed822de1faf3c24aeda50d7566326ba0c07d9a3f62a75423d55af939c407825bdb07060e819a678d0723f9567678589ec2a94ef56b733058af1574f498b4dd41fc625266b27615745a22457f1ecc7878954fd68e6438afe5a97a4750844c63f339524d892f3732036102c8c3587a6f21a586a85f8a9fb6324dc7ad5f4db935c54d8910756a90ccdbfa22bd81817efa3c9d867de8388a2551885ff4f556bb20ead1da98b5f1591df45036815834094d8c6ad192494ca98bf7f7525cd21c639a92722255ce5d790c25667127c285e03f9806653498740730832bd2f90b3b99572c98e70e162f784801ffac402c2420f9f6dfa1cccce6b22cfb7924b25c2c03201148f2f3ad3bea7df1c186a773e18a9f95f36e12fc8bc3d24c8f05dffbc9d5653dbab9e256fb0a3d1dec69d91efd42ff1cfa96e930277f57a53a9b99825d058e3fb9ce429e8ffafbd62d5b319f117191614321823f6238cc6741248726f550fdc5c50954d855df6c363e21eedc49956ba012f7563822b11554e3be28818cf4677434ddb29b93d08da1e0d5d7b18a697b1cc980f7b0a08cc0077fd8d52740b69e92e38ea42e95062686428aa892f39a783b5fbc426a5f01abcc8c3be2c297883705ab64c0da3d2d6473e89a257a8abe966770dd21901aaa6d52512c6957ebab64f31fb180b5ec49efe344702dbcc9f3f4733800904a5be974840e5b457183bb8f7fcd7e9037a187c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 排序 - 题解</title>
      <link href="/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/26/LG-%E6%8E%92%E5%BA%8F-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡淼的 C++ <code>if</code> 语句题（?）。</p><p>太淼了就不解释了</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>全读入完来个函数判断就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[6], b[6], cnt1, cnt2, tot1, tot2;int mysort() &#123;    if (cnt1 &gt; cnt2) &#123;        return 1;    &#125; else if (cnt1 == cnt2) &#123;        if (tot1 &gt; tot2) &#123;            return 1;        &#125; else if (tot1 &lt; tot2) &#123;            return 2;        &#125; else &#123;            return 0;        &#125;    &#125; else &#123;        return 2;    &#125;&#125;int main() &#123;    for (int i = 0; i &lt; 6; i++) &#123;        cin &gt;&gt; a[i];        cnt1 += a[i];        if (a[i] == 50) tot1++;    &#125;    for (int i = 0; i &lt; 6; i++) &#123;        cin &gt;&gt; b[i];        cnt2 += b[i];        if (b[i] == 50) tot2++;    &#125;    cout &lt;&lt; mysort() &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/26/LG-排序-题解/">https://ren-yc.github.io/2021/07/26/LG-排序-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 生小虫子 - 题解</title>
      <link href="/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E7%94%9F%E5%B0%8F%E8%99%AB%E5%AD%90-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就在检验 <code>for()</code> 循环的应用。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>读入一切信息后，</p><p>写一个循环 $z$ 次的 <code>for</code> 循环，如果满足条件 <code>k == x</code>，小虫子数量增加，反之 <code>s1 = 0</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int k = 0, x, y, z;    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;    int s1 = 0, s2 = 0, cc = 1, cl = 0;    for (int i = 1; i &lt;= z; i++) &#123;        k++;        cl += cc;        cc = s2;        s2 = s1;        if (k == x) &#123;            s1 = cl * y;            k = 0;        &#125; else &#123;            s1 = 0;        &#125;    &#125;    cout &lt;&lt; cc + cl &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/">https://ren-yc.github.io/2021/07/25/LG-生小虫子-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 合成大西瓜 - 题解</title>
      <link href="/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道 C++ 枚举题，只要遍历 $b$ 数组就 $ok$ 了。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$，$b_x = b_x + 1$;</p><p>遍历 $b$ 数组。</p><p>倒着遍历，一旦发现有符合条件的数，直接输出并结束程序。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, b[201];int main() &#123;    int x;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; x;        b[x]++;    &#125;    for (int i = 0; i &lt; n; i++) &#123;        b[i + 1] += b[i] / 2;    &#125;    for (int i = n - 1; i &gt;= 0; i--) &#123;        if (b[i] != 0) &#123;            cout &lt;&lt; i + 1 &lt;&lt; endl;            break;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/">https://ren-yc.github.io/2021/07/25/LG-合成大西瓜-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 救援争先 - 题解</title>
      <link href="/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%95%91%E6%8F%B4%E4%BA%89%E5%85%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡不淼的 C++ 结构体排序题，我卡 <code>cmp</code> 了好久。</p><p>就俩循环读入 &amp; 输出，<code>sort()</code>，还有<strong>万恶</strong>的 <code>cmp</code>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i . sh, a_i . sm, a_i . dh, a_i . dm$;</p><p>使用 <code>sort()</code> 结构体排序;</p><p>循环输出排序后的 $a_i$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct Node &#123;    int sh, sm, st, dh, dm, et, id;&#125; a[1001];bool cmp(Node a, Node b) &#123;    return a.et &lt; b.et || a.et == b.et &amp;&amp; a.st &lt; b.st || a.et == b.et &amp;&amp; a.st == b.st &amp;&amp; a.id &lt; b.id;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        scanf(&quot;%d:%d %d:%d&quot;, &amp;a[i].sh, &amp;a[i].sm, &amp;a[i].dh, &amp;a[i].dm);        a[i].st = a[i].sh * 60 + a[i].sm;        a[i].et = a[i].st + a[i].dh * 60 + a[i].dm;        a[i].id = i + 1;    &#125;    sort(a, a + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; a[i].id &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/">https://ren-yc.github.io/2021/07/25/LG-救援争先-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之武魂融合技 - 题解</title>
      <link href="/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/25/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E6%AD%A6%E9%AD%82%E8%9E%8D%E5%90%88%E6%8A%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道炒鸡淼的 C++ 模拟题，也不卡 <code>long long</code>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $x$ 和 $y$。</p><p><strong>一边输入一边计算，速度快</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, x, y, z;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; x &gt;&gt; y;        z = (x + y) * 2;        cout &lt;&lt; z &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/">https://ren-yc.github.io/2021/07/25/LG-斗罗大陆之武魂融合技-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 前 n 个偶数位回文数之和 - 题解</title>
      <link href="/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E5%89%8D-n-%E4%B8%AA%E5%81%B6%E6%95%B0%E4%BD%8D%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%8B%E5%92%8C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>这道题目就不淼了，变成沝了。</del></p><p>写几个函数就不行了。</p><p><del>真 简 单</del></p><p><del>250lht：呜呜呜这是比赛赛题，我保龄。</del></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入 $n$，写个循环判断从 $1$ 起的每一个数，如果满足函数 <code>weishu</code> 和函数 <code>huiwen</code>，则加到计数器。</p><p>这时有人就会问了，<code>huiwen</code> 函数中的 <code>_itoa_s()</code> 是神马东西，请看<a href="https://blog.csdn.net/smcrystal/article/details/71191335?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.base">这里</a>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool huiwen(int g) &#123;    int i, j;    char b[1001];    _itoa_s(g, b, 10);    for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><p>以上代码交到洛谷上会 <strong><a href="https://www.luogu.com.cn/record/54096300">CE</a></strong>，你谷居然无法使用 <code>stdlib.h</code> 的 <code>_itoa_s()</code> ???</p><p><strong>偷懒失败</strong>，只好自己写转换函数。</p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;    int i = 0, k, n;    char temp;    if (m &lt; 0) &#123;        s[i] = &#39;-&#39;;        m = -m;        i++;    &#125;    while (m &gt; 0) &#123;        n = m % 10;        m /= 10;        s[i] = n + &#39;0&#39;;        i++;    &#125;    s[i] = &#39;\0&#39;;    if (s[0] == &#39;-&#39;) k = 1;    else k = 0;    for (int j = k; j &lt; i / 2; j++) &#123;        temp = s[j];        s[j] = s[i - j - 1 + k];        s[i - j - 1 + k] = temp;    &#125;&#125;bool huiwen(int g) &#123;    int i, j;    char b[1001];    int_to_string(b, g);    for (int i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/">https://ren-yc.github.io/2021/07/24/LG-前-n-个偶数位回文数之和-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 斗罗大陆之魂系辨认 - 题解</title>
      <link href="/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86%E4%B9%8B%E9%AD%82%E7%B3%BB%E8%BE%A8%E8%AE%A4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>@250lht 这道题目太淼了！</p><p>不多废话，这道题直接写一连串的 <code>if</code> 语句就行了。</p><blockquote><p><strong>P.S.由于 Windows 操作系统终端使用 GB2312，所以无法正确显示中文，但这不会影响洛谷评测结果</strong></p></blockquote><p>审题人真的良心，写了这个，不说的话我还以为我代码出 BUG 了呢。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入 $n$，循环读入 $a_i$，尽量<strong>一边读入一边输出</strong>，<strong>速度快</strong>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void judge(int n) &#123;    if (1 &lt;= n &amp;&amp; n &lt;= 4) cout &lt;&lt; &quot;魂土&quot;;    if (5 &lt;= n &amp;&amp; n &lt;= 14) cout &lt;&lt; &quot;魂师&quot;;    if (15 &lt;= n &amp;&amp; n &lt;= 34) cout &lt;&lt; &quot;大魂师&quot;;    if (35 &lt;= n &amp;&amp; n &lt;= 39) cout &lt;&lt; &quot;魂王&quot;;    if (40 &lt;= n &amp;&amp; n &lt;= 49) cout &lt;&lt; &quot;魂宗&quot;;    if (50 &lt;= n &amp;&amp; n &lt;= 54) cout &lt;&lt; &quot;魂尊&quot;;    if (55 &lt;= n &amp;&amp; n &lt;= 59) cout &lt;&lt; &quot;魂帝&quot;;    if (60 &lt;= n &amp;&amp; n &lt;= 69) cout &lt;&lt; &quot;赤炎斗罗&quot;;    if (70 &lt;= n &amp;&amp; n &lt;= 79) cout &lt;&lt; &quot;巅峰斗罗&quot;;    if (80 &lt;= n &amp;&amp; n &lt;= 89) cout &lt;&lt; &quot;封号斗罗&quot;;    if (90 &lt;= n &amp;&amp; n &lt;= 100) cout &lt;&lt; &quot;海神&quot;;    cout &lt;&lt; endl;&#125;int main() &#123;    int n, a[101] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];        judge(a[i]);    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/">https://ren-yc.github.io/2021/07/24/LG-斗罗大陆之魂系辨认-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 2 - 题解</title>
      <link href="/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/24/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题目应使用算法库函数 <del>当然自己手写也行</del> 和类型转换。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>先输入 $x$ 和 $y$，直接输出 $\lceil x \div y \rceil$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long a, b;    cin &gt;&gt; a &gt;&gt; b;    cout &lt;&lt; ceil((double)a / (double)b) &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/">https://ren-yc.github.io/2021/07/24/LG-王者荣耀-2-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - gcd 与 lcm - 题解</title>
      <link href="/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/23/LG-gcd-%E4%B8%8E-lcm-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数。</p><p>（算法库里有 int 的：<code>__gcd</code>，不过本题卡 long long）</p><p><strong>注意本题数据范围 $10^{10}$，卡 long long</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;long long gcd(long long a, long long b) &#123;    if (a % b == 0) return b;    else return gcd(b, a % b);&#125;long long lcm(long long a, long long b) &#123;    return a * b / gcd(a, b);&#125;int main() &#123;    long long T, a, b;    string mode;    cin &gt;&gt; T;    while (T--) &#123;        cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;        if (mode == &quot;gcd&quot;) &#123;            cout &lt;&lt; gcd(a, b) &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; lcm(a, b) &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/">https://ren-yc.github.io/2021/07/23/LG-gcd-与-lcm-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（2） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%882%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ <strong>结构体</strong>排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，$a$ 一样的按 $name_0$（字符串首） 的 ASCII 码<strong>从小到大</strong>排序，所以我们还要自己写 <code>cmp</code> 函数，来比较两结构体。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<del>偷懒</del>，写一个 <code>cmp</code>。</p><p><del>出题人 NB！！！不卡我们 long long 了</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;struct node &#123;    string name;    int a;&#125; wx[101];bool cmp(node a, node b) &#123;    if (a.a == b.a) &#123;        return a.name[0] &lt; b.name[0];    &#125;    return a.a &gt; b.a;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; wx[i].name &gt;&gt; wx[i].a;    &#125;    sort(wx, wx + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; wx[i].name &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/">https://ren-yc.github.io/2021/07/22/LG-微信（2）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 微信（1） - 题解</title>
      <link href="/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E5%BE%AE%E4%BF%A1%EF%BC%881%EF%BC%89-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ 排序题。</p><p>要点：题目要求<strong>从大到小</strong>排序，所以我们要自己写 <code>cmp</code> 函数，来判断升序。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>输入正整数 $n$，然后循环输入 $a_i$。</p><p>建议使用 <code>sort</code> 函数<del>偷懒</del>，写一个 <code>cmp</code>。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(long long a, long long b) &#123;    return a &gt; b;&#125;int main() &#123;    int n;    int a[1001] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    sort(a, a + n, cmp);    for (int i = 0; i &lt; n; i++) &#123;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/">https://ren-yc.github.io/2021/07/22/LG-微信（1）-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG - 王者荣耀 - 题解</title>
      <link href="/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/07/22/LG-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道典型的 C++ 语言入门题。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>直接输入正整数 $n$ 再输出 $n \times 10$。</p><p>或者输入字符串 $n$ 再输出 $n + ‘0’$。</p><p><strong>注意本题数据范围 $10^{18}$，卡 long long（使用方法 2 可无视）</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long x;    cin &gt;&gt; x;    cout &lt;&lt; x * 10 &lt;&lt; endl;    return 0;&#125;</code></pre><script type="math/tex; mode=display">END</script><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/">https://ren-yc.github.io/2021/07/22/LG-王者荣耀-题解/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/03/hello-world/"/>
      <url>/2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><blockquote><p>本文作者：ren-yc<br>本文链接： <a href="https://ren-yc.github.io/2021/06/03/hello-world/">https://ren-yc.github.io/2021/06/03/hello-world/</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://ren-yc.github.io/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA"></a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
